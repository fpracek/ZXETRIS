# file opened: ./src/ZXETRIS.asm
   1  0000              ; ===================================================================
   2  0000              ; SAM.PR World - 2025 Fausto Pracek
   3  0000              ; ===================================================================
   4  0000
   5  0000                      DEVICE ZXSPECTRUM48
   6  0000                      SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
   7  0000
   8  0000                      ORG 0x8000               ; Loader address (0x8000)
   9  8000
  10  8000                      INCLUDE "TILES.asm"
# file opened: ./inc/TILES.asm
   1+ 8000              ; ===================================================================
   2+ 8000              ; Tiles
   3+ 8000              ; ===================================================================
   4+ 8000
   5+ 8000              ; --------------------------------------------------------------------
   6+ 8000              ; Constants
   7+ 8000              ; --------------------------------------------------------------------
   8+ 8000              TILE_VERTICAL_WALL		        EQU		0
   9+ 8000              TILE_BLOCK	   					EQU		1
  10+ 8000              TILE_BLOCK_ROW_COMPETED			EQU		2
  11+ 8000              TILE_BLOCK_EMPTY    			EQU		3
  12+ 8000              TILE_HORIZONTAL_WALL			EQU		4
  13+ 8000              TILE_FIRST_CHAR 				EQU		5
  14+ 8000              TILES_DEF:
  14+ 8000
  15+ 8000              ; Verical wall
  16+ 8000 02           	db 2
  17+ 8001 FF           	db 255
  18+ 8002 10           	db 16
  19+ 8003 10           	db 16
  20+ 8004 10           	db 16
  21+ 8005 FF           	db 255
  22+ 8006 02           	db 2
  23+ 8007 02           	db 2
  24+ 8008              ; Block
  25+ 8008 00           	db 0x00
  26+ 8009 7E           	db 0x7E
  27+ 800A 40           	db 0x40
  28+ 800B 42           	db 0x42
  29+ 800C 42           	db 0x42
  30+ 800D 42           	db 0x42
  31+ 800E 5E           	db 0x5E
  32+ 800F 00           	db 0x00
  33+ 8010              ; Block (Row completed)
  34+ 8010 FF           	db 0xFF
  35+ 8011 81           	db 0x81
  36+ 8012 81           	db 0x81
  37+ 8013 81           	db 0x81
  38+ 8014 81           	db 0x81
  39+ 8015 81           	db 0x81
  40+ 8016 81           	db 0x81
  41+ 8017 FF           	db 0xFF
  42+ 8018              ; Block (Row empty)
  43+ 8018 FF           	db 0xFF
  44+ 8019 FF           	db 0xFF
  45+ 801A FF           	db 0xFF
  46+ 801B FF           	db 0xFF
  47+ 801C FF           	db 0xFF
  48+ 801D FF           	db 0xFF
  49+ 801E FF           	db 0xFF
  50+ 801F FF           	db 0xFF
  51+ 8020              ; Horizontal wall
  52+ 8020 22           	db 34
  53+ 8021 22           	db 34
  54+ 8022 22           	db 34
  55+ 8023 3E           	db 62
  56+ 8024 22           	db 34
  57+ 8025 22           	db 34
  58+ 8026 E3           	db 227
  59+ 8027 22           	db 34
  60+ 8028
  61+ 8028
  62+ 8028
  63+ 8028
  64+ 8028              ; Char " "
  65+ 8028 00           	db 0x00
  66+ 8029 00           	db 0x00
  67+ 802A 00           	db 0x00
  68+ 802B 00           	db 0x00
  69+ 802C 00           	db 0x00
  70+ 802D 00           	db 0x00
  71+ 802E 00           	db 0x00
  72+ 802F 00           	db 0x00
  73+ 8030              ; Char "!"
  74+ 8030 00           	db 0x00
  75+ 8031 30           	db 0x30
  76+ 8032 30           	db 0x30
  77+ 8033 30           	db 0x30
  78+ 8034 30           	db 0x30
  79+ 8035 00           	db 0x00
  80+ 8036 30           	db 0x30
  81+ 8037 00           	db 0x00
  82+ 8038              ; Char """
  83+ 8038 00           	db 0x00
  84+ 8039 6C           	db 0x6C
  85+ 803A 6C           	db 0x6C
  86+ 803B 48           	db 0x48
  87+ 803C 00           	db 0x00
  88+ 803D 00           	db 0x00
  89+ 803E 00           	db 0x00
  90+ 803F 00           	db 0x00
  91+ 8040              ; Char "#"
  92+ 8040 00           	db 0x00
  93+ 8041 2C           	db 0x2C
  94+ 8042 7E           	db 0x7E
  95+ 8043 2C           	db 0x2C
  96+ 8044 2C           	db 0x2C
  97+ 8045 7E           	db 0x7E
  98+ 8046 2C           	db 0x2C
  99+ 8047 00           	db 0x00
 100+ 8048              ; Char "$"
 101+ 8048 00           	db 0x00
 102+ 8049 18           	db 0x18
 103+ 804A 3E           	db 0x3E
 104+ 804B 58           	db 0x58
 105+ 804C 3C           	db 0x3C
 106+ 804D 1A           	db 0x1A
 107+ 804E 7C           	db 0x7C
 108+ 804F 00           	db 0x00
 109+ 8050              ; Char "%"
 110+ 8050 00           	db 0x00
 111+ 8051 62           	db 0x62
 112+ 8052 64           	db 0x64
 113+ 8053 08           	db 0x08
 114+ 8054 10           	db 0x10
 115+ 8055 26           	db 0x26
 116+ 8056 46           	db 0x46
 117+ 8057 00           	db 0x00
 118+ 8058              ; Char "&"
 119+ 8058 00           	db 0x00
 120+ 8059 38           	db 0x38
 121+ 805A 6C           	db 0x6C
 122+ 805B 38           	db 0x38
 123+ 805C 6A           	db 0x6A
 124+ 805D 64           	db 0x64
 125+ 805E 3A           	db 0x3A
 126+ 805F 00           	db 0x00
 127+ 8060              ; Char "'"
 128+ 8060 00           	db 0x00
 129+ 8061 30           	db 0x30
 130+ 8062 30           	db 0x30
 131+ 8063 20           	db 0x20
 132+ 8064 00           	db 0x00
 133+ 8065 00           	db 0x00
 134+ 8066 00           	db 0x00
 135+ 8067 00           	db 0x00
 136+ 8068              ; Char "("
 137+ 8068 00           	db 0x00
 138+ 8069 0C           	db 0x0C
 139+ 806A 18           	db 0x18
 140+ 806B 18           	db 0x18
 141+ 806C 18           	db 0x18
 142+ 806D 18           	db 0x18
 143+ 806E 0C           	db 0x0C
 144+ 806F 00           	db 0x00
 145+ 8070              ; Char "("
 146+ 8070 00           	db 0x00
 147+ 8071 30           	db 0x30
 148+ 8072 18           	db 0x18
 149+ 8073 18           	db 0x18
 150+ 8074 18           	db 0x18
 151+ 8075 18           	db 0x18
 152+ 8076 30           	db 0x30
 153+ 8077 00           	db 0x00
 154+ 8078              ; Char "*"
 155+ 8078 00           	db 0x00
 156+ 8079 00           	db 0x00
 157+ 807A 00           	db 0x00
 158+ 807B 66           	db 0x66
 159+ 807C 18           	db 0x18
 160+ 807D 66           	db 0x66
 161+ 807E 00           	db 0x00
 162+ 807F 00           	db 0x00
 163+ 8080              ; Char "+"
 164+ 8080 00           	db 0x00
 165+ 8081 00           	db 0x00
 166+ 8082 18           	db 0x18
 167+ 8083 18           	db 0x18
 168+ 8084 7E           	db 0x7E
 169+ 8085 18           	db 0x18
 170+ 8086 18           	db 0x18
 171+ 8087 00           	db 0x00
 172+ 8088              ; Char ","
 173+ 8088 00           	db 0x00
 174+ 8089 00           	db 0x00
 175+ 808A 00           	db 0x00
 176+ 808B 00           	db 0x00
 177+ 808C 00           	db 0x00
 178+ 808D 30           	db 0x30
 179+ 808E 30           	db 0x30
 180+ 808F 10           	db 0x10
 181+ 8090              ; Char "-"
 182+ 8090 00           	db 0x00
 183+ 8091 00           	db 0x00
 184+ 8092 00           	db 0x00
 185+ 8093 00           	db 0x00
 186+ 8094 3C           	db 0x3C
 187+ 8095 00           	db 0x00
 188+ 8096 00           	db 0x00
 189+ 8097 00           	db 0x00
 190+ 8098              ; Char "."
 191+ 8098 00           	db 0x00
 192+ 8099 00           	db 0x00
 193+ 809A 00           	db 0x00
 194+ 809B 00           	db 0x00
 195+ 809C 00           	db 0x00
 196+ 809D 30           	db 0x30
 197+ 809E 30           	db 0x30
 198+ 809F 00           	db 0x00
 199+ 80A0              ; Char "/"
 200+ 80A0 00           	db 0x00
 201+ 80A1 02           	db 0x02
 202+ 80A2 06           	db 0x06
 203+ 80A3 0C           	db 0x0C
 204+ 80A4 18           	db 0x18
 205+ 80A5 30           	db 0x30
 206+ 80A6 60           	db 0x60
 207+ 80A7 00           	db 0x00
 208+ 80A8              ; Char "0"
 209+ 80A8 00           	db 0x00
 210+ 80A9 3C           	db 0x3C
 211+ 80AA 66           	db 0x66
 212+ 80AB 6E           	db 0x6E
 213+ 80AC 76           	db 0x76
 214+ 80AD 66           	db 0x66
 215+ 80AE 3C           	db 0x3C
 216+ 80AF 00           	db 0x00
 217+ 80B0              ; Char "1"
 218+ 80B0 00           	db 0x00
 219+ 80B1 18           	db 0x18
 220+ 80B2 38           	db 0x38
 221+ 80B3 58           	db 0x58
 222+ 80B4 18           	db 0x18
 223+ 80B5 18           	db 0x18
 224+ 80B6 7E           	db 0x7E
 225+ 80B7 00           	db 0x00
 226+ 80B8              ; Char "2"
 227+ 80B8 00           	db 0x00
 228+ 80B9 3C           	db 0x3C
 229+ 80BA 46           	db 0x46
 230+ 80BB 1C           	db 0x1C
 231+ 80BC 30           	db 0x30
 232+ 80BD 60           	db 0x60
 233+ 80BE 7E           	db 0x7E
 234+ 80BF 00           	db 0x00
 235+ 80C0              ; Char "3"
 236+ 80C0 00           	db 0x00
 237+ 80C1 3C           	db 0x3C
 238+ 80C2 46           	db 0x46
 239+ 80C3 1C           	db 0x1C
 240+ 80C4 06           	db 0x06
 241+ 80C5 46           	db 0x46
 242+ 80C6 3C           	db 0x3C
 243+ 80C7 00           	db 0x00
 244+ 80C8              ; Char "4"
 245+ 80C8 00           	db 0x00
 246+ 80C9 30           	db 0x30
 247+ 80CA 30           	db 0x30
 248+ 80CB 60           	db 0x60
 249+ 80CC 7E           	db 0x7E
 250+ 80CD 0C           	db 0x0C
 251+ 80CE 0C           	db 0x0C
 252+ 80CF 00           	db 0x00
 253+ 80D0              ; Char "5"
 254+ 80D0 00           	db 0x00
 255+ 80D1 7E           	db 0x7E
 256+ 80D2 60           	db 0x60
 257+ 80D3 7E           	db 0x7E
 258+ 80D4 06           	db 0x06
 259+ 80D5 46           	db 0x46
 260+ 80D6 3C           	db 0x3C
 261+ 80D7 00           	db 0x00
 262+ 80D8              ; Char "6"
 263+ 80D8 00           	db 0x00
 264+ 80D9 3C           	db 0x3C
 265+ 80DA 60           	db 0x60
 266+ 80DB 7C           	db 0x7C
 267+ 80DC 66           	db 0x66
 268+ 80DD 66           	db 0x66
 269+ 80DE 3C           	db 0x3C
 270+ 80DF 00           	db 0x00
 271+ 80E0              ; Char "7"
 272+ 80E0 00           	db 0x00
 273+ 80E1 7E           	db 0x7E
 274+ 80E2 06           	db 0x06
 275+ 80E3 0C           	db 0x0C
 276+ 80E4 18           	db 0x18
 277+ 80E5 18           	db 0x18
 278+ 80E6 18           	db 0x18
 279+ 80E7 00           	db 0x00
 280+ 80E8              ; Char "8"
 281+ 80E8 00           	db 0x00
 282+ 80E9 3C           	db 0x3C
 283+ 80EA 66           	db 0x66
 284+ 80EB 3C           	db 0x3C
 285+ 80EC 66           	db 0x66
 286+ 80ED 66           	db 0x66
 287+ 80EE 3C           	db 0x3C
 288+ 80EF 00           	db 0x00
 289+ 80F0              ; Char "9"
 290+ 80F0 00           	db 0x00
 291+ 80F1 3C           	db 0x3C
 292+ 80F2 66           	db 0x66
 293+ 80F3 3E           	db 0x3E
 294+ 80F4 06           	db 0x06
 295+ 80F5 66           	db 0x66
 296+ 80F6 3C           	db 0x3C
 297+ 80F7 00           	db 0x00
 298+ 80F8              ; Char ":"
 299+ 80F8 00           	db 0x00
 300+ 80F9 00           	db 0x00
 301+ 80FA 30           	db 0x30
 302+ 80FB 30           	db 0x30
 303+ 80FC 00           	db 0x00
 304+ 80FD 30           	db 0x30
 305+ 80FE 30           	db 0x30
 306+ 80FF 00           	db 0x00
 307+ 8100              ; Char ";"
 308+ 8100 00           	db 0x00
 309+ 8101 00           	db 0x00
 310+ 8102 30           	db 0x30
 311+ 8103 30           	db 0x30
 312+ 8104 00           	db 0x00
 313+ 8105 30           	db 0x30
 314+ 8106 30           	db 0x30
 315+ 8107 10           	db 0x10
 316+ 8108              ; Char "<"
 317+ 8108 00           	db 0x00
 318+ 8109 0C           	db 0x0C
 319+ 810A 18           	db 0x18
 320+ 810B 30           	db 0x30
 321+ 810C 30           	db 0x30
 322+ 810D 18           	db 0x18
 323+ 810E 0C           	db 0x0C
 324+ 810F 00           	db 0x00
 325+ 8110              ; Char "="
 326+ 8110 00           	db 0x00
 327+ 8111 00           	db 0x00
 328+ 8112 00           	db 0x00
 329+ 8113 7E           	db 0x7E
 330+ 8114 00           	db 0x00
 331+ 8115 7E           	db 0x7E
 332+ 8116 00           	db 0x00
 333+ 8117 00           	db 0x00
 334+ 8118              ; Char ">"
 335+ 8118 00           	db 0x00
 336+ 8119 30           	db 0x30
 337+ 811A 18           	db 0x18
 338+ 811B 0C           	db 0x0C
 339+ 811C 0C           	db 0x0C
 340+ 811D 18           	db 0x18
 341+ 811E 30           	db 0x30
 342+ 811F 00           	db 0x00
 343+ 8120              ; Char "?"
 344+ 8120 00           	db 0x00
 345+ 8121 3C           	db 0x3C
 346+ 8122 66           	db 0x66
 347+ 8123 0E           	db 0x0E
 348+ 8124 18           	db 0x18
 349+ 8125 00           	db 0x00
 350+ 8126 18           	db 0x18
 351+ 8127 00           	db 0x00
 352+ 8128              ; Char "@"
 353+ 8128 00           	db 0x00
 354+ 8129 3C           	db 0x3C
 355+ 812A 66           	db 0x66
 356+ 812B 06           	db 0x06
 357+ 812C 36           	db 0x36
 358+ 812D 56           	db 0x56
 359+ 812E 3C           	db 0x3C
 360+ 812F 00           	db 0x00
 361+ 8130              ; Char "A"
 362+ 8130 00           	db 0x00
 363+ 8131 3C           	db 0x3C
 364+ 8132 66           	db 0x66
 365+ 8133 66           	db 0x66
 366+ 8134 7E           	db 0x7E
 367+ 8135 66           	db 0x66
 368+ 8136 66           	db 0x66
 369+ 8137 00           	db 0x00
 370+ 8138              ; Char "B"
 371+ 8138 00           	db 0x00
 372+ 8139 7C           	db 0x7C
 373+ 813A 66           	db 0x66
 374+ 813B 7C           	db 0x7C
 375+ 813C 66           	db 0x66
 376+ 813D 66           	db 0x66
 377+ 813E 7C           	db 0x7C
 378+ 813F 00           	db 0x00
 379+ 8140              ; Char "C"
 380+ 8140 00           	db 0x00
 381+ 8141 3C           	db 0x3C
 382+ 8142 66           	db 0x66
 383+ 8143 60           	db 0x60
 384+ 8144 60           	db 0x60
 385+ 8145 66           	db 0x66
 386+ 8146 3C           	db 0x3C
 387+ 8147 00           	db 0x00
 388+ 8148              ; Char "D"
 389+ 8148 00           	db 0x00
 390+ 8149 7C           	db 0x7C
 391+ 814A 66           	db 0x66
 392+ 814B 66           	db 0x66
 393+ 814C 66           	db 0x66
 394+ 814D 66           	db 0x66
 395+ 814E 7C           	db 0x7C
 396+ 814F 00           	db 0x00
 397+ 8150              ; Char "E"
 398+ 8150 00           	db 0x00
 399+ 8151 7E           	db 0x7E
 400+ 8152 60           	db 0x60
 401+ 8153 7C           	db 0x7C
 402+ 8154 60           	db 0x60
 403+ 8155 60           	db 0x60
 404+ 8156 7E           	db 0x7E
 405+ 8157 00           	db 0x00
 406+ 8158              ; Char "F"
 407+ 8158 00           	db 0x00
 408+ 8159 7E           	db 0x7E
 409+ 815A 60           	db 0x60
 410+ 815B 7C           	db 0x7C
 411+ 815C 60           	db 0x60
 412+ 815D 60           	db 0x60
 413+ 815E 60           	db 0x60
 414+ 815F 00           	db 0x00
 415+ 8160              ; Char "G"
 416+ 8160 00           	db 0x00
 417+ 8161 3C           	db 0x3C
 418+ 8162 66           	db 0x66
 419+ 8163 60           	db 0x60
 420+ 8164 6E           	db 0x6E
 421+ 8165 66           	db 0x66
 422+ 8166 3C           	db 0x3C
 423+ 8167 00           	db 0x00
 424+ 8168              ; Char "H"
 425+ 8168 00           	db 0x00
 426+ 8169 66           	db 0x66
 427+ 816A 66           	db 0x66
 428+ 816B 66           	db 0x66
 429+ 816C 7E           	db 0x7E
 430+ 816D 66           	db 0x66
 431+ 816E 66           	db 0x66
 432+ 816F 00           	db 0x00
 433+ 8170              ; Char "I"
 434+ 8170 00           	db 0x00
 435+ 8171 3C           	db 0x3C
 436+ 8172 18           	db 0x18
 437+ 8173 18           	db 0x18
 438+ 8174 18           	db 0x18
 439+ 8175 18           	db 0x18
 440+ 8176 3C           	db 0x3C
 441+ 8177 00           	db 0x00
 442+ 8178              ; Char "J"
 443+ 8178 00           	db 0x00
 444+ 8179 7E           	db 0x7E
 445+ 817A 18           	db 0x18
 446+ 817B 18           	db 0x18
 447+ 817C 18           	db 0x18
 448+ 817D 58           	db 0x58
 449+ 817E 30           	db 0x30
 450+ 817F 00           	db 0x00
 451+ 8180              ; Char "K"
 452+ 8180 00           	db 0x00
 453+ 8181 66           	db 0x66
 454+ 8182 6C           	db 0x6C
 455+ 8183 78           	db 0x78
 456+ 8184 78           	db 0x78
 457+ 8185 6C           	db 0x6C
 458+ 8186 66           	db 0x66
 459+ 8187 00           	db 0x00
 460+ 8188              ; Char "L"
 461+ 8188 00           	db 0x00
 462+ 8189 60           	db 0x60
 463+ 818A 60           	db 0x60
 464+ 818B 60           	db 0x60
 465+ 818C 60           	db 0x60
 466+ 818D 60           	db 0x60
 467+ 818E 7E           	db 0x7E
 468+ 818F 00           	db 0x00
 469+ 8190              ; Char "M"
 470+ 8190 00           	db 0x00
 471+ 8191 42           	db 0x42
 472+ 8192 66           	db 0x66
 473+ 8193 7E           	db 0x7E
 474+ 8194 66           	db 0x66
 475+ 8195 66           	db 0x66
 476+ 8196 66           	db 0x66
 477+ 8197 00           	db 0x00
 478+ 8198              ; Char "N"
 479+ 8198 00           	db 0x00
 480+ 8199 46           	db 0x46
 481+ 819A 66           	db 0x66
 482+ 819B 76           	db 0x76
 483+ 819C 6E           	db 0x6E
 484+ 819D 66           	db 0x66
 485+ 819E 62           	db 0x62
 486+ 819F 00           	db 0x00
 487+ 81A0              ; Char "O"
 488+ 81A0 00           	db 0x00
 489+ 81A1 3C           	db 0x3C
 490+ 81A2 66           	db 0x66
 491+ 81A3 66           	db 0x66
 492+ 81A4 66           	db 0x66
 493+ 81A5 66           	db 0x66
 494+ 81A6 3C           	db 0x3C
 495+ 81A7 00           	db 0x00
 496+ 81A8              ; Char "P"
 497+ 81A8 00           	db 0x00
 498+ 81A9 7C           	db 0x7C
 499+ 81AA 66           	db 0x66
 500+ 81AB 66           	db 0x66
 501+ 81AC 7C           	db 0x7C
 502+ 81AD 60           	db 0x60
 503+ 81AE 60           	db 0x60
 504+ 81AF 00           	db 0x00
 505+ 81B0              ; Char "Q"
 506+ 81B0 00           	db 0x00
 507+ 81B1 3C           	db 0x3C
 508+ 81B2 66           	db 0x66
 509+ 81B3 66           	db 0x66
 510+ 81B4 66           	db 0x66
 511+ 81B5 68           	db 0x68
 512+ 81B6 36           	db 0x36
 513+ 81B7 00           	db 0x00
 514+ 81B8              ; Char "R"
 515+ 81B8 00           	db 0x00
 516+ 81B9 7C           	db 0x7C
 517+ 81BA 66           	db 0x66
 518+ 81BB 7C           	db 0x7C
 519+ 81BC 66           	db 0x66
 520+ 81BD 66           	db 0x66
 521+ 81BE 66           	db 0x66
 522+ 81BF 00           	db 0x00
 523+ 81C0              ; Char "S"
 524+ 81C0 00           	db 0x00
 525+ 81C1 3C           	db 0x3C
 526+ 81C2 60           	db 0x60
 527+ 81C3 3C           	db 0x3C
 528+ 81C4 06           	db 0x06
 529+ 81C5 46           	db 0x46
 530+ 81C6 3C           	db 0x3C
 531+ 81C7 00           	db 0x00
 532+ 81C8              ; Char "T"
 533+ 81C8 00           	db 0x00
 534+ 81C9 7E           	db 0x7E
 535+ 81CA 18           	db 0x18
 536+ 81CB 18           	db 0x18
 537+ 81CC 18           	db 0x18
 538+ 81CD 18           	db 0x18
 539+ 81CE 18           	db 0x18
 540+ 81CF 00           	db 0x00
 541+ 81D0              ; Char "U"
 542+ 81D0 00           	db 0x00
 543+ 81D1 66           	db 0x66
 544+ 81D2 66           	db 0x66
 545+ 81D3 66           	db 0x66
 546+ 81D4 66           	db 0x66
 547+ 81D5 66           	db 0x66
 548+ 81D6 3C           	db 0x3C
 549+ 81D7 00           	db 0x00
 550+ 81D8              ; Char "V"
 551+ 81D8 00           	db 0x00
 552+ 81D9 66           	db 0x66
 553+ 81DA 66           	db 0x66
 554+ 81DB 66           	db 0x66
 555+ 81DC 3C           	db 0x3C
 556+ 81DD 3C           	db 0x3C
 557+ 81DE 18           	db 0x18
 558+ 81DF 00           	db 0x00
 559+ 81E0              ; Char "W"
 560+ 81E0 00           	db 0x00
 561+ 81E1 66           	db 0x66
 562+ 81E2 66           	db 0x66
 563+ 81E3 66           	db 0x66
 564+ 81E4 7E           	db 0x7E
 565+ 81E5 66           	db 0x66
 566+ 81E6 42           	db 0x42
 567+ 81E7 00           	db 0x00
 568+ 81E8              ; Char "X"
 569+ 81E8 00           	db 0x00
 570+ 81E9 66           	db 0x66
 571+ 81EA 76           	db 0x76
 572+ 81EB 1C           	db 0x1C
 573+ 81EC 38           	db 0x38
 574+ 81ED 6E           	db 0x6E
 575+ 81EE 66           	db 0x66
 576+ 81EF 00           	db 0x00
 577+ 81F0              ; Char "Y"
 578+ 81F0 00           	db 0x00
 579+ 81F1 66           	db 0x66
 580+ 81F2 66           	db 0x66
 581+ 81F3 3C           	db 0x3C
 582+ 81F4 18           	db 0x18
 583+ 81F5 18           	db 0x18
 584+ 81F6 18           	db 0x18
 585+ 81F7 00           	db 0x00
 586+ 81F8              ; Char "Z"
 587+ 81F8 00           	db 0x00
 588+ 81F9 7E           	db 0x7E
 589+ 81FA 06           	db 0x06
 590+ 81FB 1C           	db 0x1C
 591+ 81FC 30           	db 0x30
 592+ 81FD 60           	db 0x60
 593+ 81FE 7E           	db 0x7E
 594+ 81FF 00           	db 0x00
 595+ 8200              ; Char "["
 596+ 8200 00           	db 0x00
 597+ 8201 38           	db 0x38
 598+ 8202 30           	db 0x30
 599+ 8203 30           	db 0x30
 600+ 8204 30           	db 0x30
 601+ 8205 30           	db 0x30
 602+ 8206 38           	db 0x38
 603+ 8207 00           	db 0x00
 604+ 8208              ; Char "\"
 605+ 8208 00           	db 0x00
 606+ 8209 40           	db 0x40
 607+ 820A 60           	db 0x60
 608+ 820B 30           	db 0x30
 609+ 820C 18           	db 0x18
 610+ 820D 0C           	db 0x0C
 611+ 820E 06           	db 0x06
 612+ 820F 00           	db 0x00
 613+ 8210              ; Char "]"
 614+ 8210 00           	db 0x00
 615+ 8211 38           	db 0x38
 616+ 8212 18           	db 0x18
 617+ 8213 18           	db 0x18
 618+ 8214 18           	db 0x18
 619+ 8215 18           	db 0x18
 620+ 8216 38           	db 0x38
 621+ 8217 00           	db 0x00
 622+ 8218              ; Char "^"
 623+ 8218 00           	db 0x00
 624+ 8219 18           	db 0x18
 625+ 821A 3C           	db 0x3C
 626+ 821B 66           	db 0x66
 627+ 821C 00           	db 0x00
 628+ 821D 00           	db 0x00
 629+ 821E 00           	db 0x00
 630+ 821F 00           	db 0x00
 631+ 8220              ; Char "_"
 632+ 8220 00           	db 0x00
 633+ 8221 00           	db 0x00
 634+ 8222 00           	db 0x00
 635+ 8223 00           	db 0x00
 636+ 8224 00           	db 0x00
 637+ 8225 00           	db 0x00
 638+ 8226 7E           	db 0x7E
 639+ 8227 00           	db 0x00
 640+ 8228
# file closed: ./inc/TILES.asm
  11  8228                      INCLUDE "SCREEN.asm"
# file opened: ./inc/SCREEN.asm
   1+ 8228              ;------------------------------------------------------------------------
   2+ 8228              ; Set screen charater attribute
   3+ 8228              ; INPUT:
   4+ 8228              ;   A: Value
   5+ 8228              ;   D: Character Y position
   6+ 8228              ;   E: Character X position
   7+ 8228              ; OUTPUT: -
   8+ 8228              ; MODIFIES: HL
   9+ 8228              ;------------------------------------------------------------------------
  10+ 8228              SetAttributeAtDE:
  11+ 8228 D5                   PUSH    DE
  12+ 8229 E5                   PUSH    HL
  13+ 822A C5                   PUSH    BC
  14+ 822B F5                   PUSH    AF
  15+ 822C 7A                   LD      A, D    ; Load row in A
  16+ 822D                      ; Before keeping the bits of the third, we carry out the rotations
  17+ 822D 0F                   RRCA
  18+ 822E 0F                   RRCA         ; Passes the bits of the third to bits 0 and 1
  19+ 822F 0F                   RRCA         ; and those of the row to bits 5, 6 and 7
  20+ 8230 6F                   LD      L, A    ; Load the result in L
  21+ 8231 E6 03                AND     0x03     ; A = bits of the third
  22+ 8233 F6 58                OR      0x58     ; Adds the fixed bits of the high part of the address
  23+ 8235 67                   LD      H, A    ; H = 0101 10TT
  24+ 8236 7D                   LD      A, L   ; A = row in bits 5, 6 and 7 and third in bits 0 and 1
  25+ 8237 E6 E0                AND     0xE0     ; Keeps the bits of the line
  26+ 8239 B3                   OR      E       ; Adds the bits of the column
  27+ 823A 6F                   LD      L, A    ; L = RRRC CCCC
  28+ 823B F1                   POP     AF
  29+ 823C 77                   LD      (HL),A          ; Scrivi l'attributo
  30+ 823D FE FF                CP      0xFF
  31+ 823F 20 02                JR      NZ, SetAttributeAtDE_1
  32+ 8241
  33+ 8241 36 10                LD      (HL),COLOR_RED
  34+ 8243              SetAttributeAtDE_1:
  35+ 8243
  36+ 8243
  37+ 8243
  38+ 8243 C1                   POP     BC
  39+ 8244 E1                   POP     HL
  40+ 8245 D1                   POP     DE
  41+ 8246 C9                   RET
  42+ 8247              ;------------------------------------------------------------------------
  43+ 8247              ; Print string
  44+ 8247              ; INPUT:
  45+ 8247              ;  HL: String address
  46+ 8247              ;  D: Y position
  47+ 8247              ;  E: X position
  48+ 8247              ;  B: If equals to 1 use yellow character
  49+ 8247              ; OUTPUT: -
  50+ 8247              ; MODIFIES: DE, HL, BC
  51+ 8247              ;------------------------------------------------------------------------
  52+ 8247              Screen_PrintString:
  53+ 8247 0E 47                LD      C, 0x47
  54+ 8249 78                   LD      A, B
  55+ 824A 41                   LD      B, C
  56+ 824B FE 01                CP      1
  57+ 824D 20 02                JR      NZ, Screen_PrintStringContinue
  58+ 824F 06 46                LD      B, 0x46
  59+ 8251              Screen_PrintStringContinue:
  60+ 8251 7E                   LD      A, (HL)            ; Load address of current string position to A
  61+ 8252 B7                   OR      A                  ; Flag updating in base of A value
  62+ 8253 C8                   RET     Z
  63+ 8254 F5                   PUSH    AF
  64+ 8255 78                   LD      A, B
  65+ 8256 CD 28 82             CALL SetAttributeAtDE
  66+ 8259 F1                   POP     AF
  67+ 825A F5                   PUSH    AF
  68+ 825B D6 1B                SUB     27
  69+ 825D CD AD 82             CALL Screen_PrintRamChar
  70+ 8260 F1                   POP     AF
  71+ 8261 1C                   INC     E
  72+ 8262 23                   INC     HL                 ; Current string position address set to next element
  73+ 8263 18 EC                JR   Screen_PrintStringContinue        ; Loop repeat
  74+ 8265
  75+ 8265              ;-----------------------------------------------------
  76+ 8265              ; Print space character with a specified attribute
  77+ 8265              ; INPUT:
  78+ 8265              ;   A: Attribute
  79+ 8265              ;   D: Y position
  80+ 8265              ;   E: X position
  81+ 8265              ; OUTPUT: -
  82+ 8265              ; MODIFIES: AF
  83+ 8265              ;-----------------------------------------------------
  84+ 8265              Screen_PrintSpaceChar:
  85+ 8265 D9                   EXX
  86+ 8266
  87+ 8266                      ;EX      AF,AF'
  88+ 8266 D5                   PUSH    DE
  89+ 8267                      ;EX      AF,AF'
  90+ 8267 CD 28 82             CALL    SetAttributeAtDE
  91+ 826A D1                   POP     DE
  92+ 826B                      ;EX      AF,AF'
  93+ 826B 21 00 3D             LD      HL, ROM_CHAR_SET_ADDRESS
  94+ 826E 06 00                LD      B,0
  95+ 8270 0E 00                LD      C,0
  96+ 8272 09                   ADD     HL,BC
  97+ 8273 CD F9 82             CALL    Screen_GetCharAddress
  98+ 8276 06 08                LD      B,8
  99+ 8278              PrintLoop:
 100+ 8278 7E                   LD      A,(HL)
 101+ 8279 12                   LD      (DE),A
 102+ 827A 23                   INC     HL
 103+ 827B 14                   INC     D
 104+ 827C 10 FA                DJNZ    PrintLoop
 105+ 827E D9                   EXX
 106+ 827F C9                   RET
 107+ 8280              ;------------------------------------------------------------------------
 108+ 8280              ; Load 8x8 tiles into RAM
 109+ 8280              ; INPUT: -
 110+ 8280              ; OUTPUT: -
 111+ 8280              ; MODIFIES: DE, HL, BC
 112+ 8280              ;------------------------------------------------------------------------
 113+ 8280              Screen_LoadTiles:
 114+ 8280 F3                   DI                      ; Interrupts disabled
 115+ 8281 11 40 9C             LD      DE, RAM_CHAR_SET_ADDRESS
 116+ 8284 21 00 80             LD      HL, TILES_DEF
 117+ 8287 01 28 02             LD      BC, 552
 118+ 828A ED B0                LDIR
 119+ 828C FB                   EI                      ; Interrupts enabled
 120+ 828D C9                   RET
 121+ 828E
 122+ 828E              ;------------------------------------------------------------------------
 123+ 828E              ; Clear the screen and set attributes
 124+ 828E              ; INPUT: -
 125+ 828E              ; OUTPUT: -
 126+ 828E              ; MODIFIES: AF, DE, HL, BC
 127+ 828E              ;------------------------------------------------------------------------
 128+ 828E              Screen_Clear:
 129+ 828E 3E 00                LD   A, 0           ; 0 in the lower 3 bits = black
 130+ 8290 D3 FE                OUT  (254), A       ; Send A to port 0xFE
 131+ 8292
 132+ 8292                      ;----------------------------------------------------------
 133+ 8292                      ; Clear 6144 bytes of screen pixel area (0x4000..0x57FF)
 134+ 8292                      ;----------------------------------------------------------
 135+ 8292
 136+ 8292 21 00 40             LD   HL, 0x4000      ; Start address of pixel area
 137+ 8295 11 01 40             LD   DE, 0x4001      ; DE = HL + 1 for LDIR
 138+ 8298 01 00 18             LD   BC, 6144        ; Number of bytes to clear
 139+ 829B 36 00                LD   (HL), 0         ; Store 0 in the first byte
 140+ 829D ED B0                LDIR                 ; Repeats until BC = 0 (fills with 0)
 141+ 829F
 142+ 829F                      ;----------------------------------------------------------
 143+ 829F                      ; Fill 768 bytes of attributes area (0x5800..0x5AFF)
 144+ 829F                      ; with 0x07 (white on black)
 145+ 829F                      ;----------------------------------------------------------
 146+ 829F
 147+ 829F 21 00 58             LD   HL, 0x5800      ; Start address of attributes area
 148+ 82A2 11 01 58             LD   DE, 0x5801      ; DE = HL + 1 for LDIR
 149+ 82A5 01 00 03             LD   BC, 768         ; Number of attribute bytes
 150+ 82A8 36 07                LD   (HL), 0x07      ; Attribute = 0x07 (white on black)
 151+ 82AA ED B0                LDIR                 ; Fill the attribute area with 0x07
 152+ 82AC
 153+ 82AC C9                   RET
 154+ 82AD
 155+ 82AD              ;------------------------------------------------------------------------
 156+ 82AD              ; Print a single RAM character out to a screen address
 157+ 82AD              ; INPUT:
 158+ 82AD              ;   A: Character to print
 159+ 82AD              ;   D: Character Y position
 160+ 82AD              ;   E: Character X position
 161+ 82AD              ; OUTPUT: -
 162+ 82AD              ; MODIFIES: -
 163+ 82AD              ;------------------------------------------------------------------------
 164+ 82AD              Screen_PrintRamChar:
 165+ 82AD D5                   PUSH    DE
 166+ 82AE D9                   EXX                                 ; Backup registers BC, DE, HL
 167+ 82AF D1                   POP     DE
 168+ 82B0 F5                   PUSH    AF
 169+ 82B1 21 40 9C             LD      HL, RAM_CHAR_SET_ADDRESS    ; Character set bitmap data in ROM
 170+ 82B4 06 00                LD      B,0                         ; BC = character code
 171+ 82B6 4F                   LD      C, A
 172+ 82B7 CB 21                SLA     C                           ; Multiply by 8 by shifting
 173+ 82B9 CB 10                RL      B
 174+ 82BB CB 21                SLA     C
 175+ 82BD CB 10                RL      B
 176+ 82BF CB 21                SLA     C
 177+ 82C1 CB 10                RL      B
 178+ 82C3 09                   ADD     HL, BC                      ; And add to HL to get first byte of character
 179+ 82C4 CD F9 82             CALL    Screen_GetCharAddress       ; Get screen position in DE
 180+ 82C7 06 08                LD      B,8                         ; Loop counter - 8 bytes per character
 181+ 82C9              PrintRamCharL1:
 182+ 82C9 7E           5       LD      A,(HL)                      ; Get the byte from the ROM into A
 183+ 82CA 12                   LD      (DE),A                      ; Stick A onto the screen
 184+ 82CB 23                   INC     HL                          ; Goto next byte of character
 185+ 82CC 14                   INC     D                           ; Goto next line on screen
 186+ 82CD 10 FA                DJNZ    PrintRamCharL1              ; Loop around whilst it is Not Zero (NZ)
 187+ 82CF D9                   EXX                                 ; Restore registers BC, DE, HL
 188+ 82D0 F1                   POP     AF
 189+ 82D1 C9                   RET
 190+ 82D2              ;------------------------------------------------------------------------
 191+ 82D2              ; Print a single ROM character out to a screen address
 192+ 82D2              ; INPUT:
 193+ 82D2              ;   A: Character to print
 194+ 82D2              ;   D: Character Y position
 195+ 82D2              ;   E: Character X position
 196+ 82D2              ; OUTPUT: -
 197+ 82D2              ; MODIFIES: -
 198+ 82D2              ;------------------------------------------------------------------------
 199+ 82D2              Screen_PrintRomChar:
 200+ 82D2 D5                   PUSH    DE
 201+ 82D3 D9                   EXX                                 ; Backup registers BC, DE, HL
 202+ 82D4 D1                   POP     DE
 203+ 82D5 F5                   PUSH    AF
 204+ 82D6 21 00 3D             LD      HL, ROM_CHAR_SET_ADDRESS    ; Character set bitmap data in ROM
 205+ 82D9 06 00                LD      B,0                         ; BC = character code
 206+ 82DB D6 20                SUB     32                          ; Adjust for the character set
 207+ 82DD 4F                   LD      C, A
 208+ 82DE CB 21                SLA     C                           ; Multiply by 8 by shifting
 209+ 82E0 CB 10                RL      B
 210+ 82E2 CB 21                SLA     C
 211+ 82E4 CB 10                RL      B
 212+ 82E6 CB 21                SLA     C
 213+ 82E8 CB 10                RL      B
 214+ 82EA 09                   ADD     HL, BC                      ; And add to HL to get first byte of character
 215+ 82EB CD F9 82             CALL    Screen_GetCharAddress       ; Get screen position in DE
 216+ 82EE 06 08                LD      B,8                         ; Loop counter - 8 bytes per character
 217+ 82F0              PrintRomCharL1:
 218+ 82F0 7E                   LD      A,(HL)                      ; Get the byte from the ROM into A
 219+ 82F1 12                   LD      (DE),A                      ; Stick A onto the screen
 220+ 82F2 23                   INC     HL                          ; Goto next byte of character
 221+ 82F3 14                   INC     D                           ; Goto next line on screen
 222+ 82F4 10 FA                DJNZ    PrintRomCharL1              ; Loop around whilst it is Not Zero (NZ)
 223+ 82F6 D9                   EXX                                 ; Restore registers BC, DE, HL
 224+ 82F7 F1                   POP     AF
 225+ 82F8 C9                   RET
 226+ 82F9              ;------------------------------------------------------------------------
 227+ 82F9              ; Get screen address from a character (X,Y) coordinate
 228+ 82F9              ; INPUT:
 229+ 82F9              ;   D: Y character position (0-23)
 230+ 82F9              ;   E: X character position (0-31)
 231+ 82F9              ; OUTPUT:
 232+ 82F9              ;   DE: screen address
 233+ 82F9              ; MODIFIES: A
 234+ 82F9              ;------------------------------------------------------------------------
 235+ 82F9              Screen_GetCharAddress:
 236+ 82F9 7A                   LD      A,D
 237+ 82FA E6 07                AND     %00000111
 238+ 82FC 1F                   RRA
 239+ 82FD 1F                   RRA
 240+ 82FE 1F                   RRA
 241+ 82FF 1F                   RRA
 242+ 8300 B3                   OR      E
 243+ 8301 5F                   LD      E,A
 244+ 8302 7A                   LD      A,D
 245+ 8303 E6 18                AND     %00011000
 246+ 8305 F6 40                OR      %01000000
 247+ 8307 57                   LD      D,A
 248+ 8308 C9                   RET
 249+ 8309              ;------------------------------------------------------------------------
 250+ 8309              ; Put a 16x16 tile on the screen
 251+ 8309              ; INPUT:
 252+ 8309              ;   A: Tile number (0-255)
 253+ 8309              ;   D: Y position (0-23)
 254+ 8309              ;   E: X position (0-31)
 255+ 8309              ; OUTPUT: -
 256+ 8309              ; MODIFIES: A
 257+ 8309              ;------------------------------------------------------------------------
 258+ 8309              Screen_Print16x16Tale:
 259+ 8309 D5                   PUSH    DE
 260+ 830A F5                   PUSH    AF
 261+ 830B 3E 07                LD      A, 0x07
 262+ 830D CD 28 82             CALL    SetAttributeAtDE
 263+ 8310 F1                   POP     AF
 264+ 8311 CD AD 82             CALL    Screen_PrintRamChar        ; Print the first 8x8 tile
 265+ 8314 14                   INC     D                       ; Move to the right for the second tile
 266+ 8315 3C                   INC     A                       ; Increment the tile number
 267+ 8316 F5                   PUSH    AF
 268+ 8317 3E 07                LD      A, 0x07
 269+ 8319 CD 28 82             CALL    SetAttributeAtDE
 270+ 831C F1                   POP     AF
 271+ 831D CD AD 82             CALL    Screen_PrintRamChar        ; Print the second 8x8 tile
 272+ 8320 1C                   INC     E                       ; Move back to the left for the first tile
 273+ 8321 15                   DEC     D                       ; Move down for the next row of tiles
 274+ 8322 3C                   INC     A                       ; Increment the tile number
 275+ 8323 F5                   PUSH    AF
 276+ 8324 3E 07                LD      A, 0x07
 277+ 8326 CD 28 82             CALL    SetAttributeAtDE
 278+ 8329 F1                   POP     AF
 279+ 832A CD AD 82             CALL    Screen_PrintRamChar        ; Print the third 8x8 tile
 280+ 832D 14                   INC     D                       ; Move to the right for the second tile
 281+ 832E 3C                   INC     A                       ; Increment the tile number
 282+ 832F F5                   PUSH    AF
 283+ 8330 3E 07                LD      A, 0x07
 284+ 8332 CD 28 82             CALL    SetAttributeAtDE
 285+ 8335 F1                   POP     AF
 286+ 8336 CD AD 82             CALL    Screen_PrintRamChar        ; print the fourth 8x8 tile
 287+ 8339 D1                   POP     DE
 288+ 833A C9                   RET
 289+ 833B
 290+ 833B
 291+ 833B              ;------------------------------------------------------------------------
 292+ 833B              ; Constants
 293+ 833B              ;------------------------------------------------------------------------
 294+ 833B              SCR_BASE                        EQU 0x4000      ; Base address of the Spectrum screen
 295+ 833B              ATTR_BASE                       EQU 0x5800      ; Start of the attribute area
 296+ 833B              ROM_CHAR_SET_ADDRESS            EQU 0x3D00      ; Start of the ROM character set
 297+ 833B              RAM_CHAR_SET_ADDRESS            EQU 0x9C40      ; Start of the RAM character set
 298+ 833B              COLOR_BLACK                     EQU 0x00
 299+ 833B              COLOR_BLUE                      EQU 0x08
 300+ 833B              COLOR_YELLOW                    EQU 0x30
 301+ 833B              COLOR_CYAN                      EQU 0x28
 302+ 833B              COLOR_GREEN                     EQU 0x20
 303+ 833B              COLOR_RED                       EQU 0x10
 304+ 833B              COLOR_MAGENTA                   EQU 0x18
 305+ 833B              COLOR_WHITE                     EQU 0x38
 306+ 833B              COLOR_WALL                      EQU 0x57
 307+ 833B              ;-------------------------------------------------------------------------
 308+ 833B              ; Variables
 309+ 833B              ;-------------------------------------------------------------------------
 310+ 833B
# file closed: ./inc/SCREEN.asm
  12  833B                      INCLUDE "INPUTS.asm"
# file opened: ./inc/INPUTS.asm
   1+ 833B              ; ===================================================================
   2+ 833B              ; Inputs
   3+ 833B              ; ===================================================================
   4+ 833B
   5+ 833B              ; -----------------------------------------------------------------------------
   6+ 833B              ; CheckInput
   7+ 833B              ; -----------------------------------------------------------------------------
   8+ 833B              ; Reads Kempston joystick (port #1F) and the keyboard (Q, A, O, P).
   9+ 833B              ; Returns in A one of these values:
  10+ 833B              ;   0..7 => direction pressed
  11+ 833B              ;   255 => no direction
  12+ 833B              ;
  13+ 833B              ; Kempston bits:
  14+ 833B              ;   bit0=right, bit1=left, bit2=down, bit3=up
  15+ 833B              ; We decode to 8 directions with possible diagonals.
  16+ 833B              ;
  17+ 833B              ; If no joystick direction, we scan the keys:
  18+ 833B              ;   Q => up,    A => down
  19+ 833B              ;   O => left,  P => right
  20+ 833B              ; Combinations => diagonals.
  21+ 833B              ;
  22+ 833B              ; The code is just an example. Adapt it as needed.
  23+ 833B              ; -----------------------------------------------------------------------------
  24+ 833B
  25+ 833B              CheckInput:
  26+ 833B
  27+ 833B                  ; 1) Read Kempston joystick
  28+ 833B                  ;IN    A,(#1F)      ; read port #1F into A
  29+ 833B                  ;AND   #0F          ; we only care about bits 0..3
  30+ 833B                  ;CP    0
  31+ 833B                  ;JR    NZ,DecodeJoystick
  32+ 833B
  33+ 833B                  ; if A=0 => no joystick direction => check keyboard
  34+ 833B C3 DE 94         JP    ReadKeyboard
  35+ 833E
  36+ 833E              ; -----------------------------------------------------------------------------
  37+ 833E              ; DecodeJoystick: bits 3..0 => up,down,left,right => produce a direction
  38+ 833E              ; -----------------------------------------------------------------------------
  39+ 833E              DecodeJoystick:
  40+ 833E 47               LD    B,A        ; keep a copy in B
  41+ 833F                  ; bit3=up=8, bit2=down=4, bit1=left=2, bit0=right=1
  42+ 833F
  43+ 833F                  ; We want to combine them for diagonals: up+left => 4, up+right => 5, etc.
  44+ 833F                  ; E.g. if bit3 & bit1 => up-left => direction=4
  45+ 833F                  ; We'll do a simple check approach:
  46+ 833F
  47+ 833F 3E FF            LD    A,#FF      ; default = none, we'll override
  48+ 8341                  ; check if up
  49+ 8341 CB 58            BIT   3,B
  50+ 8343 28 11            JR    Z,NoUp
  51+ 8345                  ; up=1
  52+ 8345                  ; check if left
  53+ 8345 CB 48            BIT   1,B
  54+ 8347 20 07            JR    NZ,UpLeft
  55+ 8349                  ; check if right
  56+ 8349 CB 40            BIT   0,B
  57+ 834B 20 06            JR    NZ,UpRight
  58+ 834D                  ; otherwise pure up
  59+ 834D 3E 02            LD    A,2
  60+ 834F C9               RET
  61+ 8350              UpLeft:
  62+ 8350 3E 04            LD    A,4
  63+ 8352 C9               RET
  64+ 8353              UpRight:
  65+ 8353 3E 05            LD    A,5
  66+ 8355 C9               RET
  67+ 8356              NoUp:
  68+ 8356                  ; check if down
  69+ 8356 CB 50            BIT   2,B
  70+ 8358 28 11            JR    Z,NoDown
  71+ 835A                  ; down=1
  72+ 835A                  ; check if left
  73+ 835A CB 48            BIT   1,B
  74+ 835C 20 07            JR    NZ,DownLeft
  75+ 835E                  ; check if right
  76+ 835E CB 40            BIT   0,B
  77+ 8360 20 06            JR    NZ,DownRight
  78+ 8362                  ; otherwise pure down
  79+ 8362 3E 03            LD    A,3
  80+ 8364 C9               RET
  81+ 8365              DownLeft:
  82+ 8365 3E 06            LD    A,6
  83+ 8367 C9               RET
  84+ 8368              DownRight:
  85+ 8368 3E 07            LD    A,7
  86+ 836A C9               RET
  87+ 836B              NoDown:
  88+ 836B                  ; no up, no down => check left or right
  89+ 836B CB 48            BIT   1,B
  90+ 836D 20 07            JR    NZ,JustLeft
  91+ 836F CB 40            BIT   0,B
  92+ 8371 20 06            JR    NZ,JustRight
  93+ 8373                  ; if we get here => something else, but we said bits 0..3 => must be 0 => not possible
  94+ 8373 3E FF            LD    A,#FF
  95+ 8375 C9               RET
  96+ 8376              JustLeft:
  97+ 8376 3E 00            LD    A,0
  98+ 8378 C9               RET
  99+ 8379              JustRight:
 100+ 8379 3E 01            LD    A,1
 101+ 837B C9               RET
 102+ 837C
# file closed: ./inc/INPUTS.asm
  13  837C                      INCLUDE "FP_UTILS.asm"
# file opened: ./inc/FP_UTILS.asm
   1+ 837C              ;**************************************************************************
   2+ 837C              ;* FP UTILITIES                                                           *
   3+ 837C              ;**************************************************************************
   4+ 837C
   5+ 837C
   6+ 837C              ;============================================================
   7+ 837C              ; STRING UTILITIES
   8+ 837C              ;============================================================
   9+ 837C
  10+ 837C              ;--------------------------------------------------------------------------
  11+ 837C              ; *** String_NumberToASCII ***
  12+ 837C              ; Convert a 16-bit unsigned number to a string of ASCII digits.
  13+ 837C              ;---------------------------------------------------------------------------
  14+ 837C              ; INPUT:
  15+ 837C              ;   HL = the 16-bit unsigned number to convert.
  16+ 837C              ; OUTPUT: -
  17+ 837C              ; MODIFY: HL, DE, BC, AF
  18+ 837C              ;--------------------------------------------------------------------------
  19+ 837C              String_NumberToASCII:
  20+ 837C 01 F0 D8        LD       BC,-10000
  21+ 837F CD 95 83        CALL     .Num1
  22+ 8382 01 18 FC        LD       BC,-1000
  23+ 8385 CD 95 83        CALL     .Num1
  24+ 8388 01 9C FF        LD       BC,-100
  25+ 838B CD 95 83        CALL     .Num1
  26+ 838E 0E F6           LD       C,-10
  27+ 8390 CD 95 83        CALL     .Num1
  28+ 8393 0E FF           LD       C,-1
  29+ 8395              .Num1:
  30+ 8395 3E 2F           LD       A,'0'-1
  31+ 8397              .Num2:
  32+ 8397 3C              INC      A
  33+ 8398 09              ADD      HL, BC
  34+ 8399 38 FC           JR       C, .Num2
  35+ 839B ED 42           SBC      HL, BC
  36+ 839D 12              LD       (DE), A
  37+ 839E 13              INC      DE
  38+ 839F C9              RET
  39+ 83A0
  40+ 83A0              ;---------------------------------------------------------------------
  41+ 83A0              ; *** String_RemoveLeadingZeros ***
  42+ 83A0              ; Remove leading zeros from the string
  43+ 83A0              ;----------------------------------------------------------------------
  44+ 83A0              ; INPUT:
  45+ 83A0              ;   HL: Pointer to the string
  46+ 83A0              ; OUTPUT: -
  47+ 83A0              ; MODIFY: HL, AF, BC
  48+ 83A0              ;---------------------------------------------------------------------
  49+ 83A0              String_RemoveLeadingZeros:
  50+ 83A0 CD B3 83         CALL    String_GetLength  ; Get the length of the string
  51+ 83A3 47               LD      B, A            ; Set B to the number of digits
  52+ 83A4              .Loop:
  53+ 83A4                  ; Check if we are at the last digit; if so, exit.
  54+ 83A4 78               LD      A, B
  55+ 83A5 FE 01            CP      1
  56+ 83A7 C8               RET     Z
  57+ 83A8                  ; Load the current character.
  58+ 83A8 7E               LD      A, (HL)
  59+ 83A9 FE 30            CP      '0'
  60+ 83AB C0               RET     NZ  ; If the character is not '0', we've reached the first
  61+ 83AC                                        ; nonzero digit; stop replacing.
  62+ 83AC                  ; Replace the '0' with a space.
  63+ 83AC 3E 20            LD       A, ' '
  64+ 83AE 77               LD      (HL), A
  65+ 83AF 23               INC     HL              ; Advance to the next character.
  66+ 83B0 05               DEC     B               ; Decrement the digit counter.
  67+ 83B1 18 F1            JR      .Loop
  68+ 83B3
  69+ 83B3
  70+ 83B3              ;---------------------------------------------------------------------
  71+ 83B3              ; *** String_GetLength ***
  72+ 83B3              ; Get the length of a string in bytes
  73+ 83B3              ;----------------------------------------------------------------------
  74+ 83B3              ; INPUT:
  75+ 83B3              ;   HL: Pointer to the string
  76+ 83B3              ; OUTPUT: -
  77+ 83B3              ; MODIFY: HL, AF, BC
  78+ 83B3              ;---------------------------------------------------------------------
  79+ 83B3              String_GetLength:
  80+ 83B3 E5               PUSH    HL          ; save HL
  81+ 83B4 AF               XOR     A           ; A = 0
  82+ 83B5 47               LD      B, A        ; B = 0 (length counter)
  83+ 83B6
  84+ 83B6              .Loop:
  85+ 83B6 7E               LD      A, (HL)     ; load byte
  86+ 83B7 B7               OR      A           ; set Z if it’s zero
  87+ 83B8 28 04            JR      Z, .Done
  88+ 83BA 04               INC     B           ; increment length
  89+ 83BB 23               INC     HL
  90+ 83BC 18 F8            JR      .Loop
  91+ 83BE
  92+ 83BE              .Done:
  93+ 83BE E1               POP     HL          ; restore HL
  94+ 83BF 78               LD      A, B        ; return length in A
  95+ 83C0 C9               RET
  96+ 83C1
  97+ 83C1              ;================================================================
  98+ 83C1              ; MATH UTILITIES
  99+ 83C1              ;================================================================
 100+ 83C1
 101+ 83C1
 102+ 83C1              ;-----------------------------------------------------------------------
 103+ 83C1              ; *** Math_AddAToHL ***
 104+ 83C1              ; Adds the 8‑bit value in A to HL
 105+ 83C1              ;-----------------------------------------------------------------------
 106+ 83C1              ; INPUT:
 107+ 83C1              ;   A:  Value to add
 108+ 83C1              ;   HL: Pointer to the variable
 109+ 83C1              ; OUTPUT:
 110+ 83C1              ;   HL: HL + A
 111+ 83C1              ; MODIFY: A, BC
 112+ 83C1              ;-----------------------------------------------------------------------
 113+ 83C1              Math_AddAToHL:
 114+ 83C1 06 00            LD    B, 0        ; B = 0
 115+ 83C3 4F               LD    C, A     ; C = A
 116+ 83C4 09               ADD   HL, BC   ; HL = HL + BC = HL + A
 117+ 83C5 C9               RET
 118+ 83C6
 119+ 83C6              ;--------------------------------------------------------------------------
 120+ 83C6              ; *** Math_CompareHLtoBC ***
 121+ 83C6              ; Compare the 16‑bit unsigned value in HL with the 16‑bit unsigned value in BC
 122+ 83C6              ;--------------------------------------------------------------------------
 123+ 83C6              ; INPUT:
 124+ 83C6              ;   HL: first 16‑bit value
 125+ 83C6              ;   BC: second 16‑bit value
 126+ 83C6              ;
 127+ 83C6              ; OUTPUT:
 128+ 83C6              ;   A: Comparison result (1->HL>BC, 2->HL<BC, 0->HL=BC)
 129+ 83C6              ; MODIFY: AF
 130+ 83C6              ;--------------------------------------------------------------------------
 131+ 83C6              Math_CompareHLtoBC:
 132+ 83C6 7C               LD   A, H               ; A ← high byte of HL
 133+ 83C7 B8               CP   B                  ; compare with high byte of BC
 134+ 83C8 28 05            JR   Z, .CompareLow      ; if H == B, compare low bytes
 135+ 83CA 38 0C            JR   C, .SetLess         ; if H < B, HL < BC
 136+ 83CC                  ; else H > B ⇒ HL > BC
 137+ 83CC 3E 01            LD   A, 1
 138+ 83CE C9               RET
 139+ 83CF
 140+ 83CF              .CompareLow:
 141+ 83CF 7D               LD   A, L               ; A ← low byte of HL
 142+ 83D0 B9               CP   C                  ; compare with low byte of BC
 143+ 83D1 28 08            JR   Z, .SetEqual        ; if L == C, HL == BC
 144+ 83D3 38 03            JR   C, .SetLess         ; if L < C, HL < BC
 145+ 83D5                  ; else L > C ⇒ HL > BC
 146+ 83D5 3E 01            LD   A, 1
 147+ 83D7 C9               RET
 148+ 83D8
 149+ 83D8              .SetLess:
 150+ 83D8 3E 02            LD   A, 2
 151+ 83DA C9               RET
 152+ 83DB
 153+ 83DB              .SetEqual:
 154+ 83DB AF               XOR  A                  ; A = 0
 155+ 83DC C9               RET
 156+ 83DD
 157+ 83DD              ;------------------------------------------------------------------------------
 158+ 83DD              ; *** Math_DivisibleCheck ***
 159+ 83DD              ; Checks whether the 8‑bit value in B is exactly divisible by the 8‑bit value in C
 160+ 83DD              ;--------------------------------------------------------------------------------
 161+ 83DD              ; INPUT:
 162+ 83DD              ;   B = dividend
 163+ 83DD              ;   C = divisor
 164+ 83DD              ; OUTPUT:
 165+ 83DD              ;   A: 1 if B is divisible by C else 0
 166+ 83DD              ;------------------------------------------------------------------------------
 167+ 83DD              Math_DivisibleCheck:
 168+ 83DD                  ; 1) If divisor C = 0, cannot divide → return A=0
 169+ 83DD 79               LD   A, C
 170+ 83DE B7               OR   A
 171+ 83DF 28 10            JR   Z, .NotDivisible
 172+ 83E1
 173+ 83E1                  ; 2) If dividend B = 0, 0 is divisible by any nonzero C → return A=1
 174+ 83E1 78               LD   A, B
 175+ 83E2 B7               OR   A
 176+ 83E3 28 09            JR   Z, .Divisible
 177+ 83E5
 178+ 83E5                  ; 3) Main loop: subtract C repeatedly from A until A < C
 179+ 83E5              .Loop:
 180+ 83E5 B9               CP   C               ; compare A (current remainder) with C
 181+ 83E6 38 09            JR   C, .NotDivisible; if A < C then remainder ≠ 0 → not divisible
 182+ 83E8 91               SUB  C               ; A = A - C
 183+ 83E9 B7               OR   A               ; set Z if A == 0
 184+ 83EA 28 02            JR   Z, .Divisible   ; if exact zero remainder, divisible
 185+ 83EC 18 F7            JR   .Loop           ; otherwise repeat
 186+ 83EE
 187+ 83EE              .Divisible:
 188+ 83EE 3E 01            LD   A, 1
 189+ 83F0 C9               RET
 190+ 83F1
 191+ 83F1              .NotDivisible:
 192+ 83F1 AF               XOR  A               ; A = 0
 193+ 83F2 C9               RET
 194+ 83F3
# file closed: ./inc/FP_UTILS.asm
  14  83F3                      INCLUDE "GAMESUBS.asm"
# file opened: ./inc/GAMESUBS.asm
   1+ 83F3              ; ===================================================================
   2+ 83F3              ; Game subroutines
   3+ 83F3              ; ===================================================================
   4+ 83F3
   5+ 83F3              ; --------------------------------------------------
   6+ 83F3              ; Play beep
   7+ 83F3              ; INPUT:
   8+ 83F3              ;   B: Number of toggles
   9+ 83F3              ;   C: Delay loop
  10+ 83F3              ; --------------------------------------------------
  11+ 83F3              PlayBeep:
  12+ 83F3 C5               PUSH BC
  13+ 83F4 3E 10            LD   A, 16          ; 0001 0000 → beeper ON
  14+ 83F6              .BeepLoop:
  15+ 83F6 D3 FE            OUT  (254), A       ; accendi
  16+ 83F8 CD 06 84         CALL DelayHalf
  17+ 83FB AF               XOR  A              ; A=0 → beeper OFF
  18+ 83FC D3 FE            OUT  (254), A       ; spegni
  19+ 83FE CD 06 84         CALL DelayHalf
  20+ 8401 05               DEC  B
  21+ 8402 20 F2            JR   NZ, .BeepLoop
  22+ 8404 C1               POP  BC
  23+ 8405 C9               RET
  24+ 8406
  25+ 8406              DelayHalf:
  26+ 8406 51               LD   D, C
  27+ 8407              .DH:
  28+ 8407 15               DEC  D
  29+ 8408 20 FD            JR   NZ, .DH
  30+ 840A C9               RET
  31+ 840B
  32+ 840B              ; --------------------------------------------------
  33+ 840B              ; Line completed sound
  34+ 840B              ; INPUT: -
  35+ 840B              ; OUTPUT: -
  36+ 840B              ; MODIFY: AF, DE, HL, BC
  37+ 840B              ; --------------------------------------------------
  38+ 840B              GameOverSound:
  39+ 840B                  ; Primo beep grave, lungo
  40+ 840B 06 50            ld   b, 80      ; durata: 80 toggles
  41+ 840D 0E A0            ld   c, 160     ; frequenza: delay lungo → tono molto grave
  42+ 840F CD F3 83         call PlayBeep
  43+ 8412
  44+ 8412                  ; Secondo beep medio, più corto
  45+ 8412 06 3C            ld   b, 60      ; durata: 60 toggles
  46+ 8414 0E 64            ld   c, 100     ; frequenza: delay medio → tono intermedio
  47+ 8416 CD F3 83         call PlayBeep
  48+ 8419
  49+ 8419                  ; Terzo beep acuto, breve
  50+ 8419 06 28            ld   b, 40      ; durata: 40 toggles
  51+ 841B 0E 28            ld   c,  40     ; frequenza: delay breve → tono acuto
  52+ 841D CD F3 83         call PlayBeep
  53+ 8420
  54+ 8420 C9               ret
  55+ 8421              ; --------------------------------------------------
  56+ 8421              ; Line completed sound
  57+ 8421              ; INPUT: -
  58+ 8421              ; OUTPUT: -
  59+ 8421              ; MODIFY: AF, DE, HL, BC
  60+ 8421              ; --------------------------------------------------
  61+ 8421              LineCompleteSound:
  62+ 8421 06 28            LD   B,  40         ; durata: 40 toggles
  63+ 8423 0E 0F            LD   C,  15         ; frequenza: delay breve → tono acuto
  64+ 8425 CD F3 83         CALL PlayBeep
  65+ 8428 C9               RET
  66+ 8429
  67+ 8429              ; --------------------------------------------------
  68+ 8429              ; Bkloc land sound
  69+ 8429              ; --------------------------------------------------
  70+ 8429              BlockLandSound:
  71+ 8429 06 3C            LD   b,  60         ; durata: 60 toggles
  72+ 842B 0E 78            LD   c, 120         ; frequenza: delay lungo → tono grave
  73+ 842D CD F3 83         CALL PlayBeep
  74+ 8430 C9               RET
  75+ 8431              ;--------------------------------------------------
  76+ 8431              ; Play menu music
  77+ 8431              ; INPUT: -
  78+ 8431              ; OUTPUT: -
  79+ 8431              ; MODIFY: AF, DE, HL, BC
  80+ 8431              ;--------------------------------------------------
  81+ 8431              PlayInGameMusic:
  82+ 8431                      ; The next section of code plays a note of the in-game music.
  83+ 8431
  84+ 8431 3A D0 9A         LD A,(MusicNoteIndex)                    ; Increment the in-game music note index.
  85+ 8434 3C               INC A
  86+ 8435 32 D0 9A         LD (MusicNoteIndex),A
  87+ 8438 E6 7E            AND 126
  88+ 843A 0F               RRCA
  89+ 843B 5F               LD E,A
  90+ 843C 16 00            LD D,$00
  91+ 843E 21 BD 98         LD HL,InGameTuneData                     ; Point HL at the appropriate entry in the tune data table at
  92+ 8441 19               ADD HL,DE                                ; InGameTuneData.
  93+ 8442 3A 20 00         LD A,(0x20)                       ; Pick up the border colour for the current cavern.
  94+ 8445 5E               LD E,(HL)                                ; Initialise the pitch delay counter in E.
  95+ 8446 01 03 00         LD BC,$03                                ; Initialise the duration delay counters in B (0) and C (3).
  96+ 8449              PlayInGameMusic12:
  97+ 8449 D3 FE            OUT (254),A                              ; Produce a note of the in-game music.
  98+ 844B 1D               DEC E
  99+ 844C 20 03            JR NZ,PlayInGameMusic13
 100+ 844E 5E               LD E,(HL)
 101+ 844F EE 18            XOR 24
 102+ 8451              PlayInGameMusic13:
 103+ 8451 10 F6            DJNZ PlayInGameMusic12
 104+ 8453 0D               DEC C
 105+ 8454 20 F3            JR NZ,PlayInGameMusic12
 106+ 8456 C9               RET
 107+ 8457
 108+ 8457              ;---------------------------------------------------------------------
 109+ 8457              ; Fill score area
 110+ 8457              ; INPUT: -
 111+ 8457              ; OUTPUT: -
 112+ 8457              ; MODIFY: AF, DE, HL, BC
 113+ 8457              ;---------------------------------------------------------------------
 114+ 8457              FillScoreArea:
 115+ 8457 3A 71 9A         LD      A, (CurrentMatrixOrientation)
 116+ 845A FE 02            CP      ORIENT_EAST
 117+ 845C CA B3 84         JP      Z, FillScoreAreaEast
 118+ 845F FE 03            CP      ORIENT_WEST
 119+ 8461 CA 11 85         JP      Z, FillScoreAreaWest
 120+ 8464 FE 00            CP      ORIENT_NORTH
 121+ 8466 CA 6F 85         JP      Z, FillScoreAreaNorth
 122+ 8469              FillScoreAreaSouth:
 123+ 8469 21 24 97         LD      HL, TEXT_SCORE
 124+ 846C 16 02            LD      D, 2
 125+ 846E 1E 1A            LD      E, 26
 126+ 8470 CD 47 82         CALL    Screen_PrintString
 127+ 8473
 128+ 8473 21 2A 97         LD      HL, TEXT_HIGH_SCORE_1
 129+ 8476 16 06            LD      D, 6
 130+ 8478 1E 1A            LD      E, 26
 131+ 847A CD 47 82         CALL    Screen_PrintString
 132+ 847D 21 30 97         LD      HL, TEXT_HIGH_SCORE_2
 133+ 8480 16 07            LD      D, 7
 134+ 8482 1E 1A            LD      E, 26
 135+ 8484 CD 47 82         CALL    Screen_PrintString
 136+ 8487
 137+ 8487
 138+ 8487 21 5D 97         LD      HL, TEXT_BLOCKS
 139+ 848A 16 0B            LD      D, 11
 140+ 848C 1E 1A            LD      E, 26
 141+ 848E CD 47 82         CALL    Screen_PrintString
 142+ 8491
 143+ 8491 21 63 97         LD      HL, TEXT_MAX_BLOCKS
 144+ 8494 16 0F            LD      D, 15
 145+ 8496 1E 1A            LD      E, 26
 146+ 8498 CD 47 82         CALL    Screen_PrintString
 147+ 849B 21 5D 97         LD      HL, TEXT_BLOCKS
 148+ 849E 16 10            LD      D, 16
 149+ 84A0 1E 1A            LD      E, 26
 150+ 84A2 CD 47 82         CALL    Screen_PrintString
 151+ 84A5
 152+ 84A5 21 36 97         LD      HL, TEXT_LEVEL
 153+ 84A8 16 14            LD      D, 20
 154+ 84AA 1E 1A            LD      E, 26
 155+ 84AC CD 47 82         CALL    Screen_PrintString
 156+ 84AF
 157+ 84AF CD CF 87         CALL    ScoreUpdate
 158+ 84B2 C9               RET
 159+ 84B3              FillScoreAreaEast:
 160+ 84B3 21 24 97         LD      HL, TEXT_SCORE
 161+ 84B6 16 01            LD      D, 1
 162+ 84B8 1E 01            LD      E, 1
 163+ 84BA CD 47 82         CALL    Screen_PrintString
 164+ 84BD 21 1E 97         LD      HL, TEXT_EMPTY5
 165+ 84C0 16 02            LD      D, 2
 166+ 84C2 1E 01            LD      E, 1
 167+ 84C4 CD 47 82         CALL    Screen_PrintString
 168+ 84C7
 169+ 84C7
 170+ 84C7 21 2A 97         LD      HL, TEXT_HIGH_SCORE_1
 171+ 84CA 16 01            LD      D, 1
 172+ 84CC 1E 0A            LD      E, 10
 173+ 84CE CD 47 82         CALL    Screen_PrintString
 174+ 84D1 21 30 97         LD      HL, TEXT_HIGH_SCORE_2
 175+ 84D4 16 02            LD      D, 2
 176+ 84D6 1E 0A            LD      E, 10
 177+ 84D8 CD 47 82         CALL    Screen_PrintString
 178+ 84DB
 179+ 84DB
 180+ 84DB 21 5D 97         LD      HL, TEXT_BLOCKS
 181+ 84DE 16 01            LD      D, 1
 182+ 84E0 1E 12            LD      E, 18
 183+ 84E2 CD 47 82         CALL    Screen_PrintString
 184+ 84E5 21 1E 97         LD      HL, TEXT_EMPTY5
 185+ 84E8 16 02            LD      D, 2
 186+ 84EA 1E 12            LD      E, 18
 187+ 84EC CD 47 82         CALL    Screen_PrintString
 188+ 84EF
 189+ 84EF 21 63 97         LD      HL, TEXT_MAX_BLOCKS
 190+ 84F2 16 01            LD      D, 1
 191+ 84F4 1E 1A            LD      E, 26
 192+ 84F6 CD 47 82         CALL    Screen_PrintString
 193+ 84F9 21 5D 97         LD      HL, TEXT_BLOCKS
 194+ 84FC 16 02            LD      D, 2
 195+ 84FE 1E 1A            LD      E, 26
 196+ 8500 CD 47 82         CALL    Screen_PrintString
 197+ 8503
 198+ 8503 21 36 97         LD      HL, TEXT_LEVEL
 199+ 8506 16 15            LD      D, 21
 200+ 8508 1E 01            LD      E, 1
 201+ 850A CD 47 82         CALL    Screen_PrintString
 202+ 850D
 203+ 850D CD CF 87         CALL    ScoreUpdate
 204+ 8510 C9               RET
 205+ 8511              FillScoreAreaWest:
 206+ 8511 21 24 97         LD      HL, TEXT_SCORE
 207+ 8514 16 14            LD      D, 20
 208+ 8516 1E 01            LD      E, 1
 209+ 8518 CD 47 82         CALL    Screen_PrintString
 210+ 851B 21 1E 97         LD      HL, TEXT_EMPTY5
 211+ 851E 16 15            LD      D, 21
 212+ 8520 1E 01            LD      E, 1
 213+ 8522 CD 47 82         CALL    Screen_PrintString
 214+ 8525
 215+ 8525
 216+ 8525 21 2A 97         LD      HL, TEXT_HIGH_SCORE_1
 217+ 8528 16 14            LD      D, 20
 218+ 852A 1E 0A            LD      E, 10
 219+ 852C CD 47 82         CALL    Screen_PrintString
 220+ 852F 21 30 97         LD      HL, TEXT_HIGH_SCORE_2
 221+ 8532 16 15            LD      D, 21
 222+ 8534 1E 0A            LD      E, 10
 223+ 8536 CD 47 82         CALL    Screen_PrintString
 224+ 8539
 225+ 8539
 226+ 8539 21 5D 97         LD      HL, TEXT_BLOCKS
 227+ 853C 16 14            LD      D, 20
 228+ 853E 1E 12            LD      E, 18
 229+ 8540 CD 47 82         CALL    Screen_PrintString
 230+ 8543 21 1E 97         LD      HL, TEXT_EMPTY5
 231+ 8546 16 15            LD      D, 21
 232+ 8548 1E 12            LD      E, 18
 233+ 854A CD 47 82         CALL    Screen_PrintString
 234+ 854D
 235+ 854D 21 63 97         LD      HL, TEXT_MAX_BLOCKS
 236+ 8550 16 14            LD      D, 20
 237+ 8552 1E 1A            LD      E, 26
 238+ 8554 CD 47 82         CALL    Screen_PrintString
 239+ 8557 21 5D 97         LD      HL, TEXT_BLOCKS
 240+ 855A 16 15            LD      D, 21
 241+ 855C 1E 1A            LD      E, 26
 242+ 855E CD 47 82         CALL    Screen_PrintString
 243+ 8561
 244+ 8561 21 36 97         LD      HL, TEXT_LEVEL
 245+ 8564 16 01            LD      D, 1
 246+ 8566 1E 1A            LD      E, 26
 247+ 8568 CD 47 82         CALL    Screen_PrintString
 248+ 856B
 249+ 856B CD CF 87         CALL    ScoreUpdate
 250+ 856E C9               RET
 251+ 856F              FillScoreAreaNorth:
 252+ 856F 21 24 97         LD      HL, TEXT_SCORE
 253+ 8572 16 02            LD      D, 2
 254+ 8574 1E 01            LD      E, 1
 255+ 8576 CD 47 82         CALL    Screen_PrintString
 256+ 8579
 257+ 8579 21 2A 97         LD      HL, TEXT_HIGH_SCORE_1
 258+ 857C 16 06            LD      D, 6
 259+ 857E 1E 01            LD      E, 1
 260+ 8580 CD 47 82         CALL    Screen_PrintString
 261+ 8583 21 30 97         LD      HL, TEXT_HIGH_SCORE_2
 262+ 8586 16 07            LD      D, 7
 263+ 8588 1E 01            LD      E, 1
 264+ 858A CD 47 82         CALL    Screen_PrintString
 265+ 858D
 266+ 858D
 267+ 858D 21 5D 97         LD      HL, TEXT_BLOCKS
 268+ 8590 16 0B            LD      D, 11
 269+ 8592 1E 01            LD      E, 1
 270+ 8594 CD 47 82         CALL    Screen_PrintString
 271+ 8597
 272+ 8597 21 63 97         LD      HL, TEXT_MAX_BLOCKS
 273+ 859A 16 0F            LD      D, 15
 274+ 859C 1E 01            LD      E, 1
 275+ 859E CD 47 82         CALL    Screen_PrintString
 276+ 85A1 21 5D 97         LD      HL, TEXT_BLOCKS
 277+ 85A4 16 10            LD      D, 16
 278+ 85A6 1E 01            LD      E, 1
 279+ 85A8 CD 47 82         CALL    Screen_PrintString
 280+ 85AB
 281+ 85AB 21 36 97         LD      HL, TEXT_LEVEL
 282+ 85AE 16 14            LD      D, 20
 283+ 85B0 1E 01            LD      E, 1
 284+ 85B2 CD 47 82         CALL    Screen_PrintString
 285+ 85B5
 286+ 85B5 CD CF 87         CALL    ScoreUpdate
 287+ 85B8 C9               RET
 288+ 85B9
 289+ 85B9              ;---------------------------------------------------------------------
 290+ 85B9              ; Display score update
 291+ 85B9              ; INPUT: -
 292+ 85B9              ; OUTPUT: -
 293+ 85B9              ; MODIFY: AF, DE, HL, BC
 294+ 85B9              ;---------------------------------------------------------------------
 295+ 85B9              DisplayScoreUpdate:
 296+ 85B9 3A 71 9A         LD      A, (CurrentMatrixOrientation)
 297+ 85BC FE 02            CP      ORIENT_EAST
 298+ 85BE CA CD 86         JP      Z, DisplayScoreUpdateEast
 299+ 85C1 FE 03            CP      ORIENT_WEST
 300+ 85C3 CA 4E 87         JP      Z, DisplayScoreUpdateWest
 301+ 85C6 FE 00            CP      ORIENT_NORTH
 302+ 85C8 CA 4C 86         JP      Z, DisplayScoreUpdateNorth
 303+ 85CB
 304+ 85CB              DisplayScoreUpdateSouth:
 305+ 85CB 2A 92 9A         LD      HL, (Score)
 306+ 85CE 11 C3 9A         LD      DE, NumberValue
 307+ 85D1 CD 7C 83         CALL    String_NumberToASCII
 308+ 85D4 21 C3 9A         LD      HL, NumberValue
 309+ 85D7 CD A0 83         CALL    String_RemoveLeadingZeros
 310+ 85DA 21 C3 9A         LD      HL, NumberValue
 311+ 85DD 16 03            LD      D, 3
 312+ 85DF 1E 1A            LD      E, 26
 313+ 85E1 CD 47 82         CALL    Screen_PrintString
 314+ 85E4
 315+ 85E4 2A 94 9A         LD      HL, (HighScore)
 316+ 85E7 11 C3 9A         LD      DE, NumberValue
 317+ 85EA CD 7C 83         CALL    String_NumberToASCII
 318+ 85ED 21 C3 9A         LD      HL, NumberValue
 319+ 85F0 CD A0 83         CALL    String_RemoveLeadingZeros
 320+ 85F3 21 C3 9A         LD      HL, NumberValue
 321+ 85F6 16 08            LD      D, 8
 322+ 85F8 1E 1A            LD      E, 26
 323+ 85FA CD 47 82         CALL    Screen_PrintString
 324+ 85FD
 325+ 85FD
 326+ 85FD 2A BF 9A         LD      HL, (PlacedBlocks)
 327+ 8600 11 C3 9A         LD      DE, NumberValue
 328+ 8603 CD 7C 83         CALL    String_NumberToASCII
 329+ 8606 21 C3 9A         LD      HL, NumberValue
 330+ 8609 CD A0 83         CALL    String_RemoveLeadingZeros
 331+ 860C 21 C3 9A         LD      HL, NumberValue
 332+ 860F 16 0C            LD      D, 12
 333+ 8611 1E 1A            LD      E, 26
 334+ 8613 CD 47 82         CALL    Screen_PrintString
 335+ 8616
 336+ 8616 2A C1 9A         LD      HL, (MaxPlacedBlocks)
 337+ 8619 11 C3 9A         LD      DE, NumberValue
 338+ 861C CD 7C 83         CALL    String_NumberToASCII
 339+ 861F 21 C3 9A         LD      HL, NumberValue
 340+ 8622 CD A0 83         CALL    String_RemoveLeadingZeros
 341+ 8625 21 C3 9A         LD      HL, NumberValue
 342+ 8628 16 01            LD      D, 1
 343+ 862A 1E 1A            LD      E, 26
 344+ 862C CD 47 82         CALL    Screen_PrintString
 345+ 862F
 346+ 862F 3A 96 9A         LD      A, (Level)
 347+ 8632 26 00            LD      H, 0
 348+ 8634 6F               LD      L, A
 349+ 8635 11 C3 9A         LD      DE, NumberValue
 350+ 8638 CD 7C 83         CALL    String_NumberToASCII
 351+ 863B 21 C3 9A         LD      HL, NumberValue
 352+ 863E CD A0 83         CALL    String_RemoveLeadingZeros
 353+ 8641 21 C3 9A         LD      HL, NumberValue
 354+ 8644 16 15            LD      D, 21
 355+ 8646 1E 1A            LD      E, 26
 356+ 8648 CD 47 82         CALL    Screen_PrintString
 357+ 864B C9               RET
 358+ 864C              DisplayScoreUpdateNorth:
 359+ 864C 2A 92 9A         LD      HL, (Score)
 360+ 864F 11 C3 9A         LD      DE, NumberValue
 361+ 8652 CD 7C 83         CALL    String_NumberToASCII
 362+ 8655 21 C3 9A         LD      HL, NumberValue
 363+ 8658 CD A0 83         CALL    String_RemoveLeadingZeros
 364+ 865B 21 C3 9A         LD      HL, NumberValue
 365+ 865E 16 03            LD      D, 3
 366+ 8660 1E 01            LD      E, 1
 367+ 8662 CD 47 82         CALL    Screen_PrintString
 368+ 8665
 369+ 8665 2A 94 9A         LD      HL, (HighScore)
 370+ 8668 11 C3 9A         LD      DE, NumberValue
 371+ 866B CD 7C 83         CALL    String_NumberToASCII
 372+ 866E 21 C3 9A         LD      HL, NumberValue
 373+ 8671 CD A0 83         CALL    String_RemoveLeadingZeros
 374+ 8674 21 C3 9A         LD      HL, NumberValue
 375+ 8677 16 08            LD      D, 8
 376+ 8679 1E 01            LD      E, 1
 377+ 867B CD 47 82         CALL    Screen_PrintString
 378+ 867E
 379+ 867E
 380+ 867E 2A BF 9A         LD      HL, (PlacedBlocks)
 381+ 8681 11 C3 9A         LD      DE, NumberValue
 382+ 8684 CD 7C 83         CALL    String_NumberToASCII
 383+ 8687 21 C3 9A         LD      HL, NumberValue
 384+ 868A CD A0 83         CALL    String_RemoveLeadingZeros
 385+ 868D 21 C3 9A         LD      HL, NumberValue
 386+ 8690 16 0C            LD      D, 12
 387+ 8692 1E 01            LD      E, 1
 388+ 8694 CD 47 82         CALL    Screen_PrintString
 389+ 8697
 390+ 8697 2A C1 9A         LD      HL, (MaxPlacedBlocks)
 391+ 869A 11 C3 9A         LD      DE, NumberValue
 392+ 869D CD 7C 83         CALL    String_NumberToASCII
 393+ 86A0 21 C3 9A         LD      HL, NumberValue
 394+ 86A3 CD A0 83         CALL    String_RemoveLeadingZeros
 395+ 86A6 21 C3 9A         LD      HL, NumberValue
 396+ 86A9 16 11            LD      D, 17
 397+ 86AB 1E 01            LD      E, 1
 398+ 86AD CD 47 82         CALL    Screen_PrintString
 399+ 86B0
 400+ 86B0 3A 96 9A         LD      A, (Level)
 401+ 86B3 26 00            LD      H, 0
 402+ 86B5 6F               LD      L, A
 403+ 86B6 11 C3 9A         LD      DE, NumberValue
 404+ 86B9 CD 7C 83         CALL    String_NumberToASCII
 405+ 86BC 21 C3 9A         LD      HL, NumberValue
 406+ 86BF CD A0 83         CALL    String_RemoveLeadingZeros
 407+ 86C2 21 C3 9A         LD      HL, NumberValue
 408+ 86C5 16 15            LD      D, 21
 409+ 86C7 1E 01            LD      E, 1
 410+ 86C9 CD 47 82         CALL    Screen_PrintString
 411+ 86CC
 412+ 86CC C9               RET
 413+ 86CD              DisplayScoreUpdateEast:
 414+ 86CD 2A 92 9A         LD      HL, (Score)
 415+ 86D0 11 C3 9A         LD      DE, NumberValue
 416+ 86D3 CD 7C 83         CALL    String_NumberToASCII
 417+ 86D6 21 C3 9A         LD      HL, NumberValue
 418+ 86D9 CD A0 83         CALL    String_RemoveLeadingZeros
 419+ 86DC 21 C3 9A         LD      HL, NumberValue
 420+ 86DF 16 03            LD      D, 3
 421+ 86E1 1E 01            LD      E, 1
 422+ 86E3 CD 47 82         CALL    Screen_PrintString
 423+ 86E6
 424+ 86E6 2A 94 9A         LD      HL, (HighScore)
 425+ 86E9 11 C3 9A         LD      DE, NumberValue
 426+ 86EC CD 7C 83         CALL    String_NumberToASCII
 427+ 86EF 21 C3 9A         LD      HL, NumberValue
 428+ 86F2 CD A0 83         CALL    String_RemoveLeadingZeros
 429+ 86F5 21 C3 9A         LD      HL, NumberValue
 430+ 86F8 16 03            LD      D, 3
 431+ 86FA 1E 0A            LD      E, 10
 432+ 86FC CD 47 82         CALL    Screen_PrintString
 433+ 86FF
 434+ 86FF
 435+ 86FF 2A BF 9A         LD      HL, (PlacedBlocks)
 436+ 8702 11 C3 9A         LD      DE, NumberValue
 437+ 8705 CD 7C 83         CALL    String_NumberToASCII
 438+ 8708 21 C3 9A         LD      HL, NumberValue
 439+ 870B CD A0 83         CALL    String_RemoveLeadingZeros
 440+ 870E 21 C3 9A         LD      HL, NumberValue
 441+ 8711 16 03            LD      D, 3
 442+ 8713 1E 12            LD      E, 18
 443+ 8715 CD 47 82         CALL    Screen_PrintString
 444+ 8718
 445+ 8718 2A C1 9A         LD      HL, (MaxPlacedBlocks)
 446+ 871B 11 C3 9A         LD      DE, NumberValue
 447+ 871E CD 7C 83         CALL    String_NumberToASCII
 448+ 8721 21 C3 9A         LD      HL, NumberValue
 449+ 8724 CD A0 83         CALL    String_RemoveLeadingZeros
 450+ 8727 21 C3 9A         LD      HL, NumberValue
 451+ 872A 16 03            LD      D, 3
 452+ 872C 1E 1A            LD      E, 26
 453+ 872E CD 47 82         CALL    Screen_PrintString
 454+ 8731
 455+ 8731 3A 96 9A         LD      A, (Level)
 456+ 8734 26 00            LD      H, 0
 457+ 8736 6F               LD      L, A
 458+ 8737 11 C3 9A         LD      DE, NumberValue
 459+ 873A CD 7C 83         CALL    String_NumberToASCII
 460+ 873D 21 C3 9A         LD      HL, NumberValue
 461+ 8740 CD A0 83         CALL    String_RemoveLeadingZeros
 462+ 8743 21 C3 9A         LD      HL, NumberValue
 463+ 8746 16 16            LD      D, 22
 464+ 8748 1E 01            LD      E, 1
 465+ 874A CD 47 82         CALL    Screen_PrintString
 466+ 874D C9               RET
 467+ 874E              DisplayScoreUpdateWest:
 468+ 874E 2A 92 9A         LD      HL, (Score)
 469+ 8751 11 C3 9A         LD      DE, NumberValue
 470+ 8754 CD 7C 83         CALL    String_NumberToASCII
 471+ 8757 21 C3 9A         LD      HL, NumberValue
 472+ 875A CD A0 83         CALL    String_RemoveLeadingZeros
 473+ 875D 21 C3 9A         LD      HL, NumberValue
 474+ 8760 16 16            LD      D, 22
 475+ 8762 1E 01            LD      E, 1
 476+ 8764 CD 47 82         CALL    Screen_PrintString
 477+ 8767
 478+ 8767 2A 94 9A         LD      HL, (HighScore)
 479+ 876A 11 C3 9A         LD      DE, NumberValue
 480+ 876D CD 7C 83         CALL    String_NumberToASCII
 481+ 8770 21 C3 9A         LD      HL, NumberValue
 482+ 8773 CD A0 83         CALL    String_RemoveLeadingZeros
 483+ 8776 21 C3 9A         LD      HL, NumberValue
 484+ 8779 16 16            LD      D, 22
 485+ 877B 1E 0A            LD      E, 10
 486+ 877D CD 47 82         CALL    Screen_PrintString
 487+ 8780
 488+ 8780
 489+ 8780 2A BF 9A         LD      HL, (PlacedBlocks)
 490+ 8783 11 C3 9A         LD      DE, NumberValue
 491+ 8786 CD 7C 83         CALL    String_NumberToASCII
 492+ 8789 21 C3 9A         LD      HL, NumberValue
 493+ 878C CD A0 83         CALL    String_RemoveLeadingZeros
 494+ 878F 21 C3 9A         LD      HL, NumberValue
 495+ 8792 16 16            LD      D, 22
 496+ 8794 1E 12            LD      E, 18
 497+ 8796 CD 47 82         CALL    Screen_PrintString
 498+ 8799
 499+ 8799 2A C1 9A         LD      HL, (MaxPlacedBlocks)
 500+ 879C 11 C3 9A         LD      DE, NumberValue
 501+ 879F CD 7C 83         CALL    String_NumberToASCII
 502+ 87A2 21 C3 9A         LD      HL, NumberValue
 503+ 87A5 CD A0 83         CALL    String_RemoveLeadingZeros
 504+ 87A8 21 C3 9A         LD      HL, NumberValue
 505+ 87AB 16 16            LD      D, 22
 506+ 87AD 1E 1A            LD      E, 26
 507+ 87AF CD 47 82         CALL    Screen_PrintString
 508+ 87B2
 509+ 87B2 3A 96 9A         LD      A, (Level)
 510+ 87B5 26 00            LD      H, 0
 511+ 87B7 6F               LD      L, A
 512+ 87B8 11 C3 9A         LD      DE, NumberValue
 513+ 87BB CD 7C 83         CALL    String_NumberToASCII
 514+ 87BE 21 C3 9A         LD      HL, NumberValue
 515+ 87C1 CD A0 83         CALL    String_RemoveLeadingZeros
 516+ 87C4 21 C3 9A         LD      HL, NumberValue
 517+ 87C7 16 02            LD      D, 2
 518+ 87C9 1E 1A            LD      E, 26
 519+ 87CB CD 47 82         CALL    Screen_PrintString
 520+ 87CE
 521+ 87CE C9               RET
 522+ 87CF
 523+ 87CF              ;---------------------------------------------------------------------
 524+ 87CF              ; Score update
 525+ 87CF              ; INPUT:
 526+ 87CF              ;   A: Amount of completed rows
 527+ 87CF              ; OUTPUT: -
 528+ 87CF              ; MODIFY: AF, DE, HL, BC
 529+ 87CF              ;---------------------------------------------------------------------
 530+ 87CF              ScoreUpdate:
 531+ 87CF FE 00            CP      0
 532+ 87D1 C8               RET     Z
 533+ 87D2 CD 21 84         CALL    LineCompleteSound
 534+ 87D5 0E 00            LD      C, 0    ; Score to add
 535+ 87D7 47               LD      B, A    ; B = number of completed rows
 536+ 87D8 FE 01            CP      1
 537+ 87DA 20 04            JR      NZ, .Continue1
 538+ 87DC 0E 0A            LD      C, 10
 539+ 87DE 18 12            JR      .Continue4
 540+ 87E0              .Continue1:
 541+ 87E0 FE 02            CP      2
 542+ 87E2 20 04            JR      NZ, .Continue2
 543+ 87E4 0E 16            LD      C, 22
 544+ 87E6 18 0A            JR      .Continue4
 545+ 87E8              .Continue2:
 546+ 87E8 FE 03            CP      3
 547+ 87EA 20 04            JR      NZ, .Continue3
 548+ 87EC 0E 23            LD      C, 35
 549+ 87EE 18 02            JR      .Continue4
 550+ 87F0              .Continue3:
 551+ 87F0 0E 32            LD      C, 50
 552+ 87F2              .Continue4:
 553+ 87F2 2A 92 9A         LD      HL, (Score)
 554+ 87F5 79               LD      A, C
 555+ 87F6 CD C1 83         CALL    Math_AddAToHL
 556+ 87F9 22 92 9A         LD      (Score), HL
 557+ 87FC
 558+ 87FC
 559+ 87FC 2A 92 9A         LD      HL, (Score)
 560+ 87FF ED 4B 94 9A      LD      BC, (HighScore)
 561+ 8803 CD C6 83         CALL    Math_CompareHLtoBC
 562+ 8806 FE 01            CP      1
 563+ 8808 C0               RET     NZ
 564+ 8809 22 94 9A         LD      (HighScore), HL  ; Set the maximum number of blocks to the current number of blocks
 565+ 880C C9               RET
 566+ 880D
 567+ 880D              ;--------------------------------------------------------------------------
 568+ 880D              ; Compare and update DE and HL (Update HL if DE > HL)
 569+ 880D              ; INPUT:
 570+ 880D              ;   DE: First number (16-bit)
 571+ 880D              ;   HL: Second number (16-bit)
 572+ 880D              ; OUTPUT: -
 573+ 880D              ; MODIFY: AF, DE, HL, BC
 574+ 880D              ;--------------------------------------------------------------------------
 575+ 880D              CompareAndUpdateHLAndDE:
 576+ 880D 7A               LD   A, D            ; Load the high byte of DE into A.
 577+ 880E BC               CP   H               ; Compare A with the high byte of HL.
 578+ 880F 28 04            JR   Z, CompareLow   ; If equal, move to compare the low bytes.
 579+ 8811 38 08            JR   C, SkipUpdate   ; If A < H (i.e. D < H), then DE < HL; do not update.
 580+ 8813                  ; If we reach here, D > H, so DE > HL.
 581+ 8813              UpdateHL:
 582+ 8813 EB               EX   DE, HL         ; Swap DE and HL so that HL becomes DE.
 583+ 8814 C9               RET
 584+ 8815
 585+ 8815              CompareLow:
 586+ 8815 7B               LD   A, E           ; Load the low byte of DE into A.
 587+ 8816 BD               CP   L              ; Compare A with the low byte of HL.
 588+ 8817 30 02            JR   NC, SkipUpdate  ; If A <= L then DE <= HL; no update.
 589+ 8819 18 F8            JR   UpdateHL       ; Otherwise (A > L), update HL = DE.
 590+ 881B
 591+ 881B              SkipUpdate:
 592+ 881B C9               RET
 593+ 881C
 594+ 881C
 595+ 881C
 596+ 881C              ;------------------------------------------------------------------------
 597+ 881C              ; Reset next block position
 598+ 881C              ; INPUT: -
 599+ 881C              ; OUTPUT: -
 600+ 881C              ; MODIFY: AF, DE, HL, BC
 601+ 881C              ;------------------------------------------------------------------------
 602+ 881C              SetNextBoxPosition:
 603+ 881C 3A A5 9A         LD      A, (Bug)
 604+ 881F 3A 71 9A         LD      A, (CurrentMatrixOrientation)
 605+ 8822 FE 00            CP      ORIENT_NORTH
 606+ 8824 CA 54 88         JP      Z, SetNextBoxPositionNorth
 607+ 8827 FE 01            CP      ORIENT_SOUTH
 608+ 8829 CA 5F 88         JP      Z, SetNextBoxPositionSouth
 609+ 882C FE 02            CP      ORIENT_EAST
 610+ 882E CA 88 88         JP      Z, SetNextBoxPositionEast
 611+ 8831
 612+ 8831              SetNextBoxPositionWest:
 613+ 8831 3E 02            LD      A, 2
 614+ 8833 32 A4 9A         LD      (NextBlockYPosition), A
 615+ 8836 3A A2 9A         LD      A, (NextBlock)
 616+ 8839 FE 01            CP      BLOCK_O
 617+ 883B 20 05            JR      NZ, SetNextBoxPositionWestContinue1
 618+ 883D 3E 03            LD      A, 3
 619+ 883F 32 A4 9A         LD      (NextBlockYPosition), A
 620+ 8842              SetNextBoxPositionWestContinue1:
 621+ 8842 3A A2 9A         LD      A, (NextBlock)
 622+ 8845 FE 00            CP      BLOCK_I
 623+ 8847 20 05            JR      NZ, SetNextBoxPositionWestContinue2
 624+ 8849 3E 01            LD      A, 1
 625+ 884B 32 A4 9A         LD      (NextBlockYPosition), A
 626+ 884E              SetNextBoxPositionWestContinue2:
 627+ 884E 3E 07            LD      A, 7
 628+ 8850 32 A3 9A         LD      (NextBlockXPosition), A
 629+ 8853 C9               RET
 630+ 8854              SetNextBoxPositionNorth:
 631+ 8854 3E 17            LD      A, 23
 632+ 8856 32 A3 9A         LD      (NextBlockXPosition), A
 633+ 8859 3E 03            LD      A, 3
 634+ 885B 32 A4 9A         LD      (NextBlockYPosition), A
 635+ 885E C9               RET
 636+ 885F              SetNextBoxPositionSouth:
 637+ 885F 3E 06            LD      A, 6
 638+ 8861 32 A3 9A         LD      (NextBlockXPosition), A
 639+ 8864 3A A2 9A         LD      A, (NextBlock)
 640+ 8867 FE 01            CP      BLOCK_O
 641+ 8869 20 05            JR      NZ, SetNextBoxPositionSouthContinue1
 642+ 886B 3E 07            LD      A, 7
 643+ 886D 32 A3 9A         LD      (NextBlockXPosition), A
 644+ 8870              SetNextBoxPositionSouthContinue1:
 645+ 8870 3A A2 9A         LD      A, (NextBlock)
 646+ 8873 FE 00            CP      BLOCK_I
 647+ 8875 20 0B            JR      NZ, SetNextBoxPositionSouthContinue2
 648+ 8877 3E 05            LD      A, 5
 649+ 8879 32 A3 9A         LD      (NextBlockXPosition), A
 650+ 887C 3E 14            LD      A, 20
 651+ 887E 32 A4 9A         LD      (NextBlockYPosition), A
 652+ 8881 C9               RET
 653+ 8882              SetNextBoxPositionSouthContinue2:
 654+ 8882 3E 13            LD      A, 19
 655+ 8884 32 A4 9A         LD      (NextBlockYPosition), A
 656+ 8887 C9               RET
 657+ 8888              SetNextBoxPositionEast:
 658+ 8888 3E 17            LD      A, 23
 659+ 888A 32 A3 9A         LD      (NextBlockXPosition), A
 660+ 888D 3A A2 9A         LD      A, (NextBlock)
 661+ 8890 FE 00            CP      BLOCK_I
 662+ 8892 20 05            JR      NZ, SetNextBoxPositionEastContinue
 663+ 8894 3E 18            LD      A, 24
 664+ 8896 32 A3 9A         LD      (NextBlockXPosition), A
 665+ 8899              SetNextBoxPositionEastContinue:
 666+ 8899
 667+ 8899 3E 13            LD      A, 19
 668+ 889B 32 A4 9A         LD      (NextBlockYPosition), A
 669+ 889E C9               RET
 670+ 889F
 671+ 889F              ;------------------------------------------------------------------------
 672+ 889F              ; Update next block info
 673+ 889F              ; INPUT: -
 674+ 889F              ; OUTPUT: -
 675+ 889F              ; MODIFY: AF, DE, HL, BC
 676+ 889F              ;------------------------------------------------------------------------
 677+ 889F              UpdateNextBlockInfo:
 678+ 889F 3A 71 9A         LD      A, (CurrentMatrixOrientation)
 679+ 88A2 FE 00            CP      ORIENT_NORTH
 680+ 88A4 CA B6 88         JP      Z, UpdateNextBlockInfoNorth
 681+ 88A7 FE 01            CP      ORIENT_SOUTH
 682+ 88A9 CA BC 88         JP      Z, UpdateNextBlockInfoSouth
 683+ 88AC FE 02            CP      ORIENT_EAST
 684+ 88AE CA C3 88         JP      Z, UpdateNextBlockInfoEast
 685+ 88B1 FE 03            CP      ORIENT_WEST
 686+ 88B3 CA CA 88         JP      Z, UpdateNextBlockInfoWest
 687+ 88B6              UpdateNextBlockInfoNorth:
 688+ 88B6 AF               XOR     A
 689+ 88B7 32 79 9A         LD      (CurrentBlockRotation), A
 690+ 88BA 18 13            JR      UpdateNextBlockInfoContinue
 691+ 88BC              UpdateNextBlockInfoSouth:
 692+ 88BC 3E 02            LD      A, 2
 693+ 88BE 32 79 9A         LD      (CurrentBlockRotation), A
 694+ 88C1 18 0C            JR      UpdateNextBlockInfoContinue
 695+ 88C3              UpdateNextBlockInfoEast:
 696+ 88C3 3E 01            LD      A, 1
 697+ 88C5 32 79 9A         LD      (CurrentBlockRotation), A
 698+ 88C8 18 05            JR      UpdateNextBlockInfoContinue
 699+ 88CA              UpdateNextBlockInfoWest:
 700+ 88CA 3E 03            LD      A, 3
 701+ 88CC 32 79 9A         LD      (CurrentBlockRotation), A
 702+ 88CF              UpdateNextBlockInfoContinue:
 703+ 88CF 3A A2 9A         LD      A, (NextBlock)
 704+ 88D2 4F               LD      C, A
 705+ 88D3 3A 7A 9A         LD      A, (CurrentBlock)
 706+ 88D6 47               LD      B, A
 707+ 88D7 79               LD      A, C
 708+ 88D8 32 7A 9A         LD      (CurrentBlock), A
 709+ 88DB 3A 74 9A         LD      A, (ColorOfBlock)
 710+ 88DE 5F               LD      E, A
 711+ 88DF D5               PUSH    DE
 712+ 88E0 C5               PUSH    BC
 713+ 88E1
 714+ 88E1 CD A5 8E         CALL    UpdateCurrentBlockTable
 715+ 88E4
 716+ 88E4 3A 74 9A         LD      A, (ColorOfBlock)
 717+ 88E7 32 B7 9A         LD      (NextBlockColor), A
 718+ 88EA 22 B8 9A         LD      (NextBlockTable), HL
 719+ 88ED
 720+ 88ED C1               POP     BC
 721+ 88EE D1               POP     DE
 722+ 88EF 7B               LD      A, E
 723+ 88F0 32 74 9A         LD      (ColorOfBlock), A
 724+ 88F3 79               LD      A, C
 725+ 88F4 32 A2 9A         LD      (NextBlock), A
 726+ 88F7 78               LD      A, B
 727+ 88F8 32 7A 9A         LD      (CurrentBlock), A
 728+ 88FB C9               RET
 729+ 88FC              ;------------------------------------------------------------------------
 730+ 88FC              ; Show next block
 731+ 88FC              ; INPUT: -
 732+ 88FC              ; OUTPUT: -
 733+ 88FC              ; MODIFY: AF, DE, HL, BC
 734+ 88FC              ;------------------------------------------------------------------------
 735+ 88FC              ShowNextBlockOnBox:
 736+ 88FC CD C7 8C         CALL    ClearNextBlockArea
 737+ 88FF 2A B8 9A         LD      HL, (NextBlockTable)
 738+ 8902              ShowNextBlockLoop:
 739+ 8902 7E               LD      A, (HL)
 740+ 8903 FE FF            CP      0xFF
 741+ 8905 28 20            JR      Z, ShowNextBlockEnd
 742+ 8907 3A A4 9A         LD      A, (NextBlockYPosition)
 743+ 890A 47               LD      B, A
 744+ 890B 7E               LD      A, (HL)
 745+ 890C 80               ADD     B
 746+ 890D 57               LD      D, A
 747+ 890E 23               INC     HL
 748+ 890F 3A A3 9A         LD      A, (NextBlockXPosition)
 749+ 8912 47               LD      B, A
 750+ 8913 7E               LD      A, (HL)
 751+ 8914 80               ADD     B
 752+ 8915 5F               LD      E, A
 753+ 8916 E5               PUSH    HL
 754+ 8917 21 B7 9A         LD      HL, NextBlockColor
 755+ 891A 7E               LD      A, (HL)
 756+ 891B CD 28 82         CALL    SetAttributeAtDE
 757+ 891E 3E 01            LD      A, TILE_BLOCK
 758+ 8920 CD AD 82         CALL    Screen_PrintRamChar
 759+ 8923 E1               POP     HL
 760+ 8924 23               INC     HL
 761+ 8925 18 DB            JR      ShowNextBlockLoop
 762+ 8927              ShowNextBlockEnd:
 763+ 8927 C9               RET
 764+ 8928              ;------------------------------------------------------------------------
 765+ 8928              ; Draw menu title
 766+ 8928              ; INPUT: -
 767+ 8928              ; OUTPUT: -
 768+ 8928              ; MODIFY: AF, DE, HL, BC
 769+ 8928              ;------------------------------------------------------------------------
 770+ 8928              DrawMenuTitle:
 771+ 8928 21 07 98         LD   HL, ZXETRISMATRIX  ; Punto di partenza della matrice
 772+ 892B 16 01            LD   D, 1               ; Riga = 0
 773+ 892D
 774+ 892D              NextRow:
 775+ 892D 1E 03            LD   E, 3               ; Colonna = 0
 776+ 892F
 777+ 892F              NextColumn:
 778+ 892F 7E               LD   A, (HL)            ; Legge il byte corrente
 779+ 8930 FE 00            CP   0
 780+ 8932 28 05            JR   Z, SkipSet         ; Se zero, non chiamare SetAttributeAtDE
 781+ 8934
 782+ 8934                  ; Valore ≠ 0: esegue la subroutine
 783+ 8934 E5               PUSH HL                 ; Salva HL prima della chiamata
 784+ 8935 CD 28 82         CALL SetAttributeAtDE   ; A = valore, D = riga, E = colonna
 785+ 8938 E1               POP  HL                 ; Ripristina HL
 786+ 8939
 787+ 8939              SkipSet:
 788+ 8939 23               INC  HL                 ; Prossimo byte
 789+ 893A 1C               INC  E                  ; Prossima colonna
 790+ 893B 7B               LD   A, E
 791+ 893C FE 1C            CP   28
 792+ 893E 20 EF            JR   NZ, NextColumn     ; Continua finché E < 25
 793+ 8940
 794+ 8940 14               INC  D                  ; Riga successiva
 795+ 8941 7A               LD   A, D
 796+ 8942 FE 08            CP   8
 797+ 8944 20 E7            JR   NZ, NextRow        ; Continua finché D < 7
 798+ 8946
 799+ 8946 C9               RET
 800+ 8947              ;------------------------------------------------------------------------
 801+ 8947              ; Initialize matrix
 802+ 8947              ; INPUT: -
 803+ 8947              ; OUTPUT: -
 804+ 8947              ; MODIFY: AF, DE, HL, BC
 805+ 8947              ;------------------------------------------------------------------------
 806+ 8947              MatrixInit:
 807+ 8947 21 E1 98         LD      HL,Matrix       ; HL -> start of the area to fill
 808+ 894A 11 C8 00         LD      DE,200          ; number of bytes to fill
 809+ 894D              MatrixInitLoop:
 810+ 894D 36 00            LD      (HL),COLOR_BLACK          ; store A into (HL)
 811+ 894F 23               INC     HL              ; move to next byte
 812+ 8950 1B               DEC     DE              ; decrement counter
 813+ 8951 7A               LD      A,D             ; check if DE = 0
 814+ 8952 B3               OR      E
 815+ 8953 C2 4D 89         JP      NZ,MatrixInitLoop
 816+ 8956 3E 01            LD      A,1
 817+ 8958 32 9E 9A         LD      (ForcePrintMatrixRepaintAll), A
 818+ 895B C9               RET
 819+ 895C
 820+ 895C              ;------------------------------------------------------------------------
 821+ 895C              ; Show game menu
 822+ 895C              ; INPUT: -
 823+ 895C              ; OUTPUT: -
 824+ 895C              ; MODIFY: AF, DE, HL, BC
 825+ 895C              ;------------------------------------------------------------------------
 826+ 895C              ShowMenu:
 827+ 895C CD 47 89         CALL    MatrixInit
 828+ 895F AF               XOR     A
 829+ 8960 32 D1 9A         LD      (InGame), A
 830+ 8963 F3               DI                                      ; Disable interrupts
 831+ 8964 ED 5E            IM      2                               ; Set the interrupt mode
 832+ 8966 FB               EI                                      ; Enable interrupts
 833+ 8967 CD 8E 82         CALL    Screen_Clear            ; Clear screen
 834+ 896A 3E 00            LD      A, TILE_VERTICAL_WALL
 835+ 896C 32 BE 9A         LD      (CurrentWallTile), A
 836+ 896F CD 5C 8C         CALL    FillWallArea
 837+ 8972 CD CC 8B         CALL    FillOptionsArea
 838+ 8975 3E 0A            LD      A, 10
 839+ 8977 32 CD 9A         LD      (SelectedOption), A
 840+ 897A CD 9F 8A         CALL    UpdateOptions
 841+ 897D 21 B5 97         LD      HL, TEXT_COPYRIGHT
 842+ 8980 16 16            LD      D, 22
 843+ 8982 1E 07            LD      E, 7
 844+ 8984 CD 47 82         CALL    Screen_PrintString
 845+ 8987 21 C8 97         LD      HL, TEXT_COMMANDS
 846+ 898A 16 11            LD      D, 17
 847+ 898C 1E 03            LD      E, 3
 848+ 898E CD 47 82         CALL    Screen_PrintString
 849+ 8991 21 E2 97         LD      HL, TEXT_COMMANDS_SPACE
 850+ 8994 16 12            LD      D, 18
 851+ 8996 1E 08            LD      E, 8
 852+ 8998 CD 47 82         CALL    Screen_PrintString
 853+ 899B 21 F2 97         LD      HL, TEXT_COMMANDS_SPACE_TO_START
 854+ 899E 16 14            LD      D, 20
 855+ 89A0 1E 06            LD      E, 6
 856+ 89A2 CD 47 82         CALL    Screen_PrintString
 857+ 89A5 3E 06            LD      A, 6
 858+ 89A7 16 14            LD      D, 20
 859+ 89A9 06 C7            LD      B, 0xC7
 860+ 89AB              ShowMenuBlinkingLoop:
 861+ 89AB FE 1A            CP      26
 862+ 89AD 28 0A            JR      Z, ShowMenuKeyboardLoop
 863+ 89AF F5               PUSH    AF
 864+ 89B0 5F               LD      E, A
 865+ 89B1 78               LD      A, B
 866+ 89B2 CD 28 82         CALL    SetAttributeAtDE
 867+ 89B5 F1               POP     AF
 868+ 89B6 3C               INC     A
 869+ 89B7 18 F2            JR      ShowMenuBlinkingLoop
 870+ 89B9              ShowMenuKeyboardLoop:
 871+ 89B9 3A CE 9A         LD      A, (TitleTimer)
 872+ 89BC FE FA            CP      250
 873+ 89BE 20 0A            JR      NZ, ShowMenuKeyboardLoopContinue
 874+ 89C0 CD 76 93         CALL    RandomizeMatrixBlocks
 875+ 89C3 CD 28 89         CALL    DrawMenuTitle
 876+ 89C6 AF               XOR     A
 877+ 89C7 32 CE 9A         LD      (TitleTimer), A
 878+ 89CA              ShowMenuKeyboardLoopContinue:
 879+ 89CA 3A CE 9A         LD      A, (TitleTimer)
 880+ 89CD 3C               INC     A
 881+ 89CE 32 CE 9A         LD      (TitleTimer), A
 882+ 89D1 CD DE 94         CALL    ReadKeyboard
 883+ 89D4 3A 9D 9A         LD      A, (KeyPressed)
 884+ 89D7 FE 20            CP      32
 885+ 89D9 CA F9 89         JP      Z, ShowMenuExit
 886+ 89DC FE 34            CP      52
 887+ 89DE CA FE 89         JP      Z, ChangeCurrentOptionValueLeft
 888+ 89E1 FE 35            CP      53
 889+ 89E3 CA 81 8A         JP      Z, ShowMenuKeyboardChangeSelectedOption
 890+ 89E6 FE 36            CP      54
 891+ 89E8 CA 3F 8A         JP      Z, ChangeCurrentOptionValueRight
 892+ 89EB 3A 8E 9A         LD      A, (Seed)
 893+ 89EE FE FF            CP      255
 894+ 89F0 20 01            JR      NZ, ShowMenuKeyboardLoopSeed
 895+ 89F2 AF               XOR     A
 896+ 89F3              ShowMenuKeyboardLoopSeed:
 897+ 89F3 3C               INC     A
 898+ 89F4 32 8E 9A         LD      (Seed), A
 899+ 89F7 18 C0            JR      ShowMenuKeyboardLoop
 900+ 89F9              ShowMenuExit:
 901+ 89F9 F3               DI                                      ; Disable interrupts
 902+ 89FA ED 56            IM      1                               ; Set the interrupt mode
 903+ 89FC FB               EI                                      ; Enable interrupts
 904+ 89FD C9               RET
 905+ 89FE              ChangeCurrentOptionValueLeft:
 906+ 89FE AF               XOR     A
 907+ 89FF 32 9D 9A         LD      (KeyPressed), A
 908+ 8A02 3A CD 9A         LD      A, (SelectedOption)
 909+ 8A05 FE 0A            CP      10
 910+ 8A07 28 08            JR      Z, ChangeCurrentOptionValueLeftLevel
 911+ 8A09 FE 0C            CP      12
 912+ 8A0B 28 16            JR      Z, ChangeCurrentOptionValueLeftCanGrow
 913+ 8A0D FE 0E            CP      14
 914+ 8A0F 28 1C            JR      Z, ChangeCurrentOptionValueLeftOrientation
 915+ 8A11              ChangeCurrentOptionValueLeftLevel:
 916+ 8A11 3A CA 9A         LD      A, (SelectedLevel)
 917+ 8A14 3D               DEC     A
 918+ 8A15 FE 00            CP      0
 919+ 8A17 CA B9 89         JP      Z, ShowMenuKeyboardLoop
 920+ 8A1A 32 CA 9A         LD      (SelectedLevel), A
 921+ 8A1D CD 9F 8A         CALL    UpdateOptions
 922+ 8A20 C3 B9 89         JP      ShowMenuKeyboardLoop
 923+ 8A23
 924+ 8A23              ChangeCurrentOptionValueLeftCanGrow:
 925+ 8A23 AF               XOR     A
 926+ 8A24 32 CC 9A         LD      (SelectedCanGrow), A
 927+ 8A27 CD 9F 8A         CALL    UpdateOptions
 928+ 8A2A C3 B9 89         JP      ShowMenuKeyboardLoop
 929+ 8A2D              ChangeCurrentOptionValueLeftOrientation:
 930+ 8A2D 3A CB 9A         LD      A, (SelectedOrientation)
 931+ 8A30 FE 00            CP      0
 932+ 8A32 CA B9 89         JP      Z, ShowMenuKeyboardLoop
 933+ 8A35 3D               DEC     A
 934+ 8A36 32 CB 9A         LD      (SelectedOrientation), A
 935+ 8A39 CD 9F 8A         CALL    UpdateOptions
 936+ 8A3C C3 B9 89         JP      ShowMenuKeyboardLoop
 937+ 8A3F
 938+ 8A3F
 939+ 8A3F
 940+ 8A3F
 941+ 8A3F              ChangeCurrentOptionValueRight:
 942+ 8A3F AF               XOR     A
 943+ 8A40 32 9D 9A         LD      (KeyPressed), A
 944+ 8A43 3A CD 9A         LD      A, (SelectedOption)
 945+ 8A46 FE 0A            CP      10
 946+ 8A48 28 08            JR      Z, ChangeCurrentOptionValueRightLevel
 947+ 8A4A FE 0C            CP      12
 948+ 8A4C 28 16            JR      Z, ChangeCurrentOptionValueRightCanGrow
 949+ 8A4E FE 0E            CP      14
 950+ 8A50 28 1D            JR      Z, ChangeCurrentOptionValueRightOrientation
 951+ 8A52              ChangeCurrentOptionValueRightLevel:
 952+ 8A52 3A CA 9A         LD      A, (SelectedLevel)
 953+ 8A55 3C               INC     A
 954+ 8A56 FE 0B            CP      11
 955+ 8A58 CA B9 89         JP      Z, ShowMenuKeyboardLoop
 956+ 8A5B 32 CA 9A         LD      (SelectedLevel), A
 957+ 8A5E CD 9F 8A         CALL    UpdateOptions
 958+ 8A61 C3 B9 89         JP      ShowMenuKeyboardLoop
 959+ 8A64
 960+ 8A64              ChangeCurrentOptionValueRightCanGrow:
 961+ 8A64 3E 01            LD      A, 1
 962+ 8A66 32 CC 9A         LD      (SelectedCanGrow), A
 963+ 8A69 CD 9F 8A         CALL    UpdateOptions
 964+ 8A6C C3 B9 89         JP      ShowMenuKeyboardLoop
 965+ 8A6F              ChangeCurrentOptionValueRightOrientation:
 966+ 8A6F 3A CB 9A         LD      A, (SelectedOrientation)
 967+ 8A72 3C               INC     A
 968+ 8A73 FE 05            CP      5
 969+ 8A75 CA B9 89         JP      Z, ShowMenuKeyboardLoop
 970+ 8A78 32 CB 9A         LD      (SelectedOrientation), A
 971+ 8A7B CD 9F 8A         CALL    UpdateOptions
 972+ 8A7E C3 B9 89         JP      ShowMenuKeyboardLoop
 973+ 8A81
 974+ 8A81              ShowMenuKeyboardChangeSelectedOption:
 975+ 8A81 AF               XOR     A
 976+ 8A82 32 9D 9A         LD      (KeyPressed), A
 977+ 8A85 3A CD 9A         LD      A, (SelectedOption)
 978+ 8A88 3C               INC     A
 979+ 8A89 3C               INC     A
 980+ 8A8A FE 10            CP      16
 981+ 8A8C 20 02            JR      NZ, ShowMenuKeyboardChangeRefreshScreen
 982+ 8A8E 3E 0A            LD      A, 10
 983+ 8A90              ShowMenuKeyboardChangeRefreshScreen:
 984+ 8A90 32 CD 9A         LD      (SelectedOption), A
 985+ 8A93 CD 9F 8A         CALL    UpdateOptions
 986+ 8A96 C3 B9 89         JP      ShowMenuKeyboardLoop
 987+ 8A99              ShowMenuGameStart:
 988+ 8A99 3E 00            LD      A, ORIENT_NORTH  ; ****************  DIRECTION  ****************
 989+ 8A9B 32 71 9A         LD      (CurrentMatrixOrientation), A  ; Set the orientation to North
 990+ 8A9E
 991+ 8A9E C9               RET
 992+ 8A9F              ;----------------------------------------------------------------------
 993+ 8A9F              ; Update options
 994+ 8A9F              ; INPUT: -
 995+ 8A9F              ; OUTPUT: -
 996+ 8A9F              ; MODIFY: AF, DE, HL, BC
 997+ 8A9F              ;----------------------------------------------------------------------
 998+ 8A9F              UpdateOptions:
 999+ 8A9F 16 0A            LD      D, 10
1000+ 8AA1 1E 17            LD      E, 23
1001+ 8AA3 21 B3 97         LD      HL, TEXT_SPACE
1002+ 8AA6 CD 47 82         CALL    Screen_PrintString
1003+ 8AA9 3A CA 9A         LD      A, (SelectedLevel)
1004+ 8AAC 26 00            LD      H, 0
1005+ 8AAE 6F               LD      L, A
1006+ 8AAF 11 C3 9A         LD      DE, NumberValue
1007+ 8AB2 CD 7C 83         CALL    String_NumberToASCII
1008+ 8AB5 21 C3 9A         LD      HL, NumberValue
1009+ 8AB8 CD A0 83         CALL    String_RemoveLeadingZeros
1010+ 8ABB 16 0A            LD      D, 10
1011+ 8ABD 1E 18            LD      E, 24
1012+ 8ABF 06 00            LD      B, 0
1013+ 8AC1 3A CD 9A         LD      A, (SelectedOption)
1014+ 8AC4 FE 0A            CP      10
1015+ 8AC6 20 02            JR      NZ, UpdateOptionsNoYello1
1016+ 8AC8 06 01            LD      B, 1
1017+ 8ACA              UpdateOptionsNoYello1:
1018+ 8ACA
1019+ 8ACA 3A CA 9A         LD      A, (SelectedLevel)
1020+ 8ACD FE 0A            CP      10
1021+ 8ACF 20 02            JR      NZ, UpdateOptionsNoYello1_1
1022+ 8AD1 1E 17            LD      E, 23
1023+ 8AD3              UpdateOptionsNoYello1_1:
1024+ 8AD3 CD 47 82         CALL    Screen_PrintString
1025+ 8AD6 21 8D 97         LD      HL, TEXT_YES
1026+ 8AD9 3A CC 9A         LD      A, (SelectedCanGrow)
1027+ 8ADC FE 01            CP      1
1028+ 8ADE 28 03            JR      Z, UpdateOptionsContinue1
1029+ 8AE0 21 91 97         LD      HL, TEXT_NO
1030+ 8AE3
1031+ 8AE3              UpdateOptionsContinue1:
1032+ 8AE3 16 0C            LD      D, 12
1033+ 8AE5 1E 16            LD      E, 22
1034+ 8AE7 06 00            LD      B, 0
1035+ 8AE9 3A CD 9A         LD      A, (SelectedOption)
1036+ 8AEC FE 0C            CP      12
1037+ 8AEE 20 02            JR      NZ, UpdateOptionsNoYello2
1038+ 8AF0 06 01            LD      B, 1
1039+ 8AF2              UpdateOptionsNoYello2:
1040+ 8AF2 CD 47 82         CALL    Screen_PrintString
1041+ 8AF5 3A CB 9A         LD      A, (SelectedOrientation)
1042+ 8AF8 FE 00            CP      ORIENT_NORTH
1043+ 8AFA 28 11            JR      Z, UpdateOptionsContinueNorth
1044+ 8AFC FE 01            CP      ORIENT_SOUTH
1045+ 8AFE 28 12            JR      Z, UpdateOptionsContinueSouth
1046+ 8B00 FE 02            CP      ORIENT_EAST
1047+ 8B02 28 13            JR      Z, UpdateOptionsContinueEast
1048+ 8B04 FE 03            CP      ORIENT_WEST
1049+ 8B06 28 14            JR      Z, UpdateOptionsContinueWest
1050+ 8B08 21 AD 97         LD      HL, TEXT_CHAOS
1051+ 8B0B 18 14            JR      UpdateOptionsContinue2
1051+ 8B0D
1052+ 8B0D              UpdateOptionsContinueNorth:
1053+ 8B0D 21 95 97         LD      HL, TEXT_NORTH
1054+ 8B10 18 0F            JR      UpdateOptionsContinue2
1055+ 8B12              UpdateOptionsContinueSouth:
1056+ 8B12 21 9B 97         LD      HL, TEXT_SOUTH
1057+ 8B15 18 0A            JR      UpdateOptionsContinue2
1058+ 8B17              UpdateOptionsContinueEast:
1059+ 8B17 21 A1 97         LD      HL, TEXT_EAST
1060+ 8B1A 18 05            JR      UpdateOptionsContinue2
1061+ 8B1C              UpdateOptionsContinueWest:
1062+ 8B1C 21 A7 97         LD      HL, TEXT_WEST
1063+ 8B1F 18 00            JR      UpdateOptionsContinue2
1064+ 8B21              UpdateOptionsContinue2:
1065+ 8B21 16 0E            LD      D, 14
1066+ 8B23 1E 14            LD      E, 20
1067+ 8B25 06 00            LD      B, 0
1068+ 8B27 3A CD 9A         LD      A, (SelectedOption)
1069+ 8B2A FE 0E            CP      14
1070+ 8B2C 20 02            JR      NZ, UpdateOptionsNoYello3
1071+ 8B2E 06 01            LD      B, 1
1072+ 8B30              UpdateOptionsNoYello3:
1073+ 8B30 CD 47 82         CALL    Screen_PrintString
1074+ 8B33 C9               RET
1075+ 8B34              ;----------------------------------------------------------------------
1076+ 8B34              ; Wait for enter key press
1077+ 8B34              ; INPUT: -
1078+ 8B34              ; OUTPUT: -
1079+ 8B34              ; MODIFY: AF, DE, HL, BC
1080+ 8B34              ;----------------------------------------------------------------------
1081+ 8B34              WaitForSpaceKey:
1082+ 8B34 CD DE 94         CALL    ReadKeyboard
1083+ 8B37 3A 9D 9A         LD      A, (KeyPressed)
1084+ 8B3A FE 20            CP      32
1085+ 8B3C 20 F6            JR      NZ, WaitForSpaceKey
1086+ 8B3E 3E 00            LD      A, 0
1087+ 8B40 32 9D 9A         LD      (KeyPressed), A
1088+ 8B43 C9               RET
1089+ 8B44              ;------------------------------------------------------------------------
1090+ 8B44              ; Fill next block area (Bottom Right)
1091+ 8B44              ; INPUT: -
1092+ 8B44              ; OUTPUT: -
1093+ 8B44              ; MODIFY: AF, DE, HL, BC
1094+ 8B44              ;-------------------------------------------------------------------------
1095+ 8B44              FillNextBlockAreaBottomRight:
1096+ 8B44 3E 12            LD      A, 18
1097+ 8B46              FillNextBlockAreaBottomRightRowLoop:
1098+ 8B46 FE 17            CP      23
1099+ 8B48 C8               RET     Z
1100+ 8B49 F5               PUSH    AF
1101+ 8B4A 57               LD      D, A
1102+ 8B4B 3E 16            LD      A, 22
1103+ 8B4D              FillNextBlockAreaBottomRightColLoop:
1104+ 8B4D FE 1A            CP      26
1105+ 8B4F 28 10            JR      Z, FillNextBlockAreaBottomRightRowLoopContinue
1106+ 8B51 F5               PUSH    AF
1107+ 8B52 5F               LD      E, A
1108+ 8B53
1109+ 8B53 3E 00            LD      A, COLOR_BLACK
1110+ 8B55 CD 28 82         CALL    SetAttributeAtDE
1111+ 8B58 3E 03            LD      A, TILE_BLOCK_EMPTY
1112+ 8B5A CD AD 82         CALL    Screen_PrintRamChar
1113+ 8B5D
1114+ 8B5D F1               POP     AF
1115+ 8B5E 3C               INC     A
1116+ 8B5F 18 EC            JR      FillNextBlockAreaBottomRightColLoop
1117+ 8B61              FillNextBlockAreaBottomRightRowLoopContinue:
1118+ 8B61 F1               POP     AF
1119+ 8B62 3C               INC     A
1120+ 8B63 C3 46 8B         JP      FillNextBlockAreaBottomRightRowLoop
1121+ 8B66
1122+ 8B66
1123+ 8B66
1124+ 8B66
1125+ 8B66              ;------------------------------------------------------------------------
1126+ 8B66              ; Fill next block area (Top Left)
1127+ 8B66              ; INPUT: -
1128+ 8B66              ; OUTPUT: -
1129+ 8B66              ; MODIFY: AF, DE, HL, BC
1130+ 8B66              ;-------------------------------------------------------------------------
1131+ 8B66              FillNextBlockAreaTopLeft:
1132+ 8B66 3E 01            LD      A, 1
1133+ 8B68              FillNextBlockAreaTopLeftRowLoop:
1134+ 8B68 FE 06            CP      6
1135+ 8B6A C8               RET     Z
1136+ 8B6B F5               PUSH    AF
1137+ 8B6C 57               LD      D, A
1138+ 8B6D 3E 06            LD      A, 6
1139+ 8B6F              FillNextBlockAreaTopLeftColLoop:
1140+ 8B6F FE 0A            CP      10
1141+ 8B71 28 10            JR      Z, FillNextBlockAreaTopLeftRowLoopContinue
1142+ 8B73 F5               PUSH    AF
1143+ 8B74 5F               LD      E, A
1144+ 8B75
1145+ 8B75 3E 00            LD      A, COLOR_BLACK
1146+ 8B77 CD 28 82         CALL    SetAttributeAtDE
1147+ 8B7A 3E 03            LD      A, TILE_BLOCK_EMPTY
1148+ 8B7C CD AD 82         CALL    Screen_PrintRamChar
1149+ 8B7F
1150+ 8B7F F1               POP     AF
1151+ 8B80 3C               INC     A
1152+ 8B81 18 EC            JR      FillNextBlockAreaTopLeftColLoop
1153+ 8B83              FillNextBlockAreaTopLeftRowLoopContinue:
1154+ 8B83 F1               POP     AF
1155+ 8B84 3C               INC     A
1156+ 8B85 C3 68 8B         JP      FillNextBlockAreaTopLeftRowLoop
1157+ 8B88
1158+ 8B88
1159+ 8B88              ;------------------------------------------------------------------------
1160+ 8B88              ; Fill next block area (Top Right)
1161+ 8B88              ; INPUT: -
1162+ 8B88              ; OUTPUT: -
1163+ 8B88              ; MODIFY: AF, DE, HL, BC
1164+ 8B88              ;-------------------------------------------------------------------------
1165+ 8B88              FillNextBlockAreaTopRight:
1166+ 8B88 3E 02            LD      A, 2
1167+ 8B8A              FillNextBlockAreaTopRightRowLoop:
1168+ 8B8A FE 06            CP      6
1169+ 8B8C C8               RET     Z
1170+ 8B8D F5               PUSH    AF
1171+ 8B8E 57               LD      D, A
1172+ 8B8F 3E 16            LD      A, 22
1173+ 8B91              FillNextBlockAreaTopRightColLoop:
1174+ 8B91 FE 1B            CP      27
1175+ 8B93 28 10            JR      Z, FillNextBlockAreaTopRightRowLoopContinue
1176+ 8B95 F5               PUSH    AF
1177+ 8B96 5F               LD      E, A
1178+ 8B97
1179+ 8B97 3E 00            LD      A, COLOR_BLACK
1180+ 8B99 CD 28 82         CALL    SetAttributeAtDE
1181+ 8B9C 3E 03            LD      A, TILE_BLOCK_EMPTY
1182+ 8B9E CD AD 82         CALL    Screen_PrintRamChar
1183+ 8BA1
1184+ 8BA1 F1               POP     AF
1185+ 8BA2 3C               INC     A
1186+ 8BA3 18 EC            JR      FillNextBlockAreaTopRightColLoop
1187+ 8BA5              FillNextBlockAreaTopRightRowLoopContinue:
1188+ 8BA5 F1               POP     AF
1189+ 8BA6 3C               INC     A
1190+ 8BA7 C3 8A 8B         JP      FillNextBlockAreaTopRightRowLoop
1191+ 8BAA              ;------------------------------------------------------------------------
1192+ 8BAA              ; Fill next block area (Bottom Left)
1193+ 8BAA              ; INPUT: -
1194+ 8BAA              ; OUTPUT: -
1195+ 8BAA              ; MODIFY: AF, DE, HL, BC
1196+ 8BAA              ;-------------------------------------------------------------------------
1197+ 8BAA              FillNextBlockAreaBottomLeft:
1198+ 8BAA 3E 12            LD      A, 18
1199+ 8BAC              FillNextBlockAreaBottomLeftRowLoop:
1200+ 8BAC FE 16            CP      22
1201+ 8BAE C8               RET     Z
1202+ 8BAF F5               PUSH    AF
1203+ 8BB0 57               LD      D, A
1204+ 8BB1 3E 05            LD      A, 5
1205+ 8BB3              FillNextBlockAreaBottomLeftColLoop:
1206+ 8BB3 FE 0A            CP      10
1207+ 8BB5 CA C8 8B         JP      Z, FillNextBlockAreaBottomLeftRowLoopContinue
1208+ 8BB8 F5               PUSH    AF
1209+ 8BB9 5F               LD      E, A
1210+ 8BBA
1211+ 8BBA 3E 00            LD      A, COLOR_BLACK
1212+ 8BBC CD 28 82         CALL    SetAttributeAtDE
1213+ 8BBF 3E 03            LD      A, TILE_BLOCK_EMPTY
1214+ 8BC1 CD AD 82         CALL    Screen_PrintRamChar
1215+ 8BC4
1216+ 8BC4 F1               POP     AF
1217+ 8BC5 3C               INC     A
1218+ 8BC6 18 EB            JR      FillNextBlockAreaBottomLeftColLoop
1219+ 8BC8              FillNextBlockAreaBottomLeftRowLoopContinue:
1220+ 8BC8 F1               POP     AF
1221+ 8BC9 3C               INC     A
1222+ 8BCA 18 E0            JR      FillNextBlockAreaBottomLeftRowLoop
1223+ 8BCC
1224+ 8BCC
1225+ 8BCC
1226+ 8BCC
1227+ 8BCC
1228+ 8BCC              ;------------------------------------------------------------------------
1229+ 8BCC              ; Fill options area
1230+ 8BCC              ; INPUT: -
1231+ 8BCC              ; OUTPUT: -
1232+ 8BCC              ; MODIFY: AF, DE, HL, BC
1233+ 8BCC              ;-------------------------------------------------------------------------
1234+ 8BCC              FillOptionsArea:
1235+ 8BCC 1E 00            LD      E, 0
1236+ 8BCE 16 00            LD      D, 0
1237+ 8BD0 3E 09            LD      A, 9
1238+ 8BD2              FillOptionsAreaRowLoop:
1239+ 8BD2 FE 10            CP      16
1240+ 8BD4 CA F3 8B         JP      Z, FillOptionsAreaContinue
1241+ 8BD7 F5               PUSH    AF
1242+ 8BD8 57               LD      D, A
1243+ 8BD9 3E 05            LD      A, 5
1244+ 8BDB              FillOptionsAreaColLoop:
1245+ 8BDB FE 1A            CP      26
1246+ 8BDD 28 10            JR      Z, FillOptionsAreaRowLoopContinue
1247+ 8BDF F5               PUSH    AF
1248+ 8BE0 5F               LD      E, A
1249+ 8BE1
1250+ 8BE1
1251+ 8BE1 3E 00            LD      A, COLOR_BLACK
1252+ 8BE3 CD 28 82         CALL    SetAttributeAtDE
1253+ 8BE6 3E 03            LD      A, TILE_BLOCK_EMPTY
1254+ 8BE8 CD AD 82         CALL    Screen_PrintRamChar
1255+ 8BEB
1256+ 8BEB
1257+ 8BEB F1               POP     AF
1258+ 8BEC 3C               INC     A
1259+ 8BED 18 EC            JR      FillOptionsAreaColLoop
1260+ 8BEF              FillOptionsAreaRowLoopContinue:
1261+ 8BEF F1               POP     AF
1262+ 8BF0 3C               INC     A
1263+ 8BF1 18 DF            JR      FillOptionsAreaRowLoop
1264+ 8BF3              FillOptionsAreaContinue:
1265+ 8BF3 21 69 97         LD      HL, TEXT_START_LEVEL
1266+ 8BF6 16 0A            LD      D, 10
1267+ 8BF8 1E 06            LD      E, 6
1268+ 8BFA CD 47 82         CALL    Screen_PrintString
1269+ 8BFD
1270+ 8BFD 21 7F 97         LD      HL, TEXT_LEVEL_GROWING
1271+ 8C00 16 0C            LD      D, 12
1272+ 8C02 1E 06            LD      E, 6
1273+ 8C04 CD 47 82         CALL    Screen_PrintString
1274+ 8C07
1275+ 8C07 21 75 97         LD      HL, TEXT_ORIENTATION
1276+ 8C0A 16 0E            LD      D, 14
1277+ 8C0C 1E 06            LD      E, 6
1278+ 8C0E CD 47 82         CALL    Screen_PrintString
1279+ 8C11 C9               RET
1280+ 8C12
1281+ 8C12              ;------------------------------------------------------------------------
1282+ 8C12              ; Fill game area (Horizontal)
1283+ 8C12              ; INPUT: -
1284+ 8C12              ; OUTPUT: -
1285+ 8C12              ; MODIFY: AF, DE, HL, BC
1286+ 8C12              ;-------------------------------------------------------------------------
1287+ 8C12              FillGameAreaH:
1288+ 8C12 1E 00            LD      E, 0
1289+ 8C14 16 00            LD      D, 0
1290+ 8C16 3E 07            LD      A, 7
1291+ 8C18              FillGameAreaHRowLoop:
1292+ 8C18 FE 11            CP      17
1293+ 8C1A C8               RET     Z
1294+ 8C1B F5               PUSH    AF
1295+ 8C1C 57               LD      D, A
1296+ 8C1D 3E 06            LD      A, 6
1297+ 8C1F              FillGameAreaHColLoop:
1298+ 8C1F FE 1A            CP      26
1299+ 8C21 28 10            JR      Z, FillGameAreaHRowLoopContinue
1300+ 8C23 F5               PUSH    AF
1301+ 8C24 5F               LD      E, A
1302+ 8C25
1303+ 8C25
1304+ 8C25 3E 00            LD      A, COLOR_BLACK
1305+ 8C27 CD 28 82         CALL    SetAttributeAtDE
1306+ 8C2A 3E 03            LD      A, TILE_BLOCK_EMPTY
1307+ 8C2C CD AD 82         CALL    Screen_PrintRamChar
1308+ 8C2F
1309+ 8C2F
1310+ 8C2F F1               POP     AF
1311+ 8C30 3C               INC     A
1312+ 8C31 18 EC            JR      FillGameAreaHColLoop
1313+ 8C33              FillGameAreaHRowLoopContinue:
1314+ 8C33 F1               POP     AF
1315+ 8C34 3C               INC     A
1316+ 8C35 18 E1            JR      FillGameAreaHRowLoop
1317+ 8C37
1318+ 8C37              ;------------------------------------------------------------------------
1319+ 8C37              ; Fill game area (Vertical)
1320+ 8C37              ; INPUT: -
1321+ 8C37              ; OUTPUT: -
1322+ 8C37              ; MODIFY: AF, DE, HL, BC
1323+ 8C37              ;-------------------------------------------------------------------------
1324+ 8C37              FillGameAreaV:
1325+ 8C37 1E 00            LD      E, 0
1326+ 8C39 16 00            LD      D, 0
1327+ 8C3B 3E 02            LD      A, 2
1328+ 8C3D              FillGameAreaVRowLoop:
1329+ 8C3D FE 16            CP      22
1330+ 8C3F C8               RET     Z
1331+ 8C40 F5               PUSH    AF
1332+ 8C41 57               LD      D, A
1333+ 8C42 3E 0B            LD      A, 11
1334+ 8C44              FillGameAreaVColLoop:
1335+ 8C44 FE 15            CP      21
1336+ 8C46 28 10            JR      Z, FillGameAreaVRowLoopContinue
1337+ 8C48 F5               PUSH    AF
1338+ 8C49 5F               LD      E, A
1339+ 8C4A
1340+ 8C4A
1341+ 8C4A 3E 00            LD      A, COLOR_BLACK
1342+ 8C4C CD 28 82         CALL    SetAttributeAtDE
1343+ 8C4F 3E 03            LD      A, TILE_BLOCK_EMPTY
1344+ 8C51 CD AD 82         CALL    Screen_PrintRamChar
1345+ 8C54
1346+ 8C54
1347+ 8C54 F1               POP     AF
1348+ 8C55 3C               INC     A
1349+ 8C56 18 EC            JR      FillGameAreaVColLoop
1350+ 8C58              FillGameAreaVRowLoopContinue:
1351+ 8C58 F1               POP     AF
1352+ 8C59 3C               INC     A
1353+ 8C5A 18 E1            JR      FillGameAreaVRowLoop
1354+ 8C5C
1355+ 8C5C              ;------------------------------------------------------------------------
1356+ 8C5C              ; Fill an area with a tile
1357+ 8C5C              ; INPUT: -
1358+ 8C5C              ; OUTPUT: -
1359+ 8C5C              ; MODIFY: AF, DE, HL, BC
1360+ 8C5C              ;-------------------------------------------------------------------------
1361+ 8C5C              FillWallArea:
1362+ 8C5C 3A BE 9A         LD      A, (CurrentWallTile)
1363+ 8C5F 47               LD      B, A
1364+ 8C60 1E 00            LD      E, 0
1365+ 8C62 16 00            LD      D, 0
1366+ 8C64 AF               XOR     A
1367+ 8C65              FillAreaWithTileRowLoop:
1368+ 8C65 FE 18            CP      24
1369+ 8C67 C8               RET     Z
1370+ 8C68 F5               PUSH    AF
1371+ 8C69 57               LD      D, A
1372+ 8C6A AF               XOR     A
1373+ 8C6B              FillAreaWithTileColLoop:
1374+ 8C6B FE 20            CP      32
1375+ 8C6D 28 13            JR      Z, FillAreaWithTileRowLoopContinue
1376+ 8C6F F5               PUSH    AF
1377+ 8C70 5F               LD      E, A
1378+ 8C71
1379+ 8C71 D5               PUSH    DE
1380+ 8C72 3E 57            LD      A, 0x57
1381+ 8C74 CD 28 82         CALL    SetAttributeAtDE
1382+ 8C77 D1               POP     DE
1383+ 8C78 D5               PUSH    DE
1384+ 8C79 78               LD      A, B
1385+ 8C7A CD AD 82         CALL    Screen_PrintRamChar
1386+ 8C7D D1               POP     DE
1387+ 8C7E
1388+ 8C7E F1               POP     AF
1389+ 8C7F 3C               INC     A
1390+ 8C80 18 E9            JR      FillAreaWithTileColLoop
1391+ 8C82              FillAreaWithTileRowLoopContinue:
1392+ 8C82 F1               POP     AF
1393+ 8C83 3C               INC     A
1394+ 8C84 18 DF            JR      FillAreaWithTileRowLoop
1395+ 8C86
1396+ 8C86
1397+ 8C86
1398+ 8C86
1399+ 8C86
1400+ 8C86
1401+ 8C86              ;----------------------------------------------------------------------
1402+ 8C86              ;  Show game field
1403+ 8C86              ;  INPUT: -
1404+ 8C86              ;  OUTPUT: -
1405+ 8C86              ;  MODIFY: AF, BC, DE, HL
1406+ 8C86              ;----------------------------------------------------------------------
1407+ 8C86              ShowGameField:
1408+ 8C86 3A 71 9A         LD      A, (CurrentMatrixOrientation)
1409+ 8C89 08               EX      AF, AF'                 ; Save AF in AF'
1410+ 8C8A CD 8E 82         CALL    Screen_Clear            ; Clear screen
1411+ 8C8D 08               EX      AF, AF'                 ; Restore AF
1412+ 8C8E FE 02            CP      ORIENT_EAST
1413+ 8C90 CA B5 8C         JP      Z, ShowGameFieldHorizontal
1414+ 8C93 FE 03            CP      ORIENT_WEST
1415+ 8C95 CA B5 8C         JP      Z, ShowGameFieldHorizontal
1416+ 8C98 FE 00            CP      ORIENT_NORTH
1417+ 8C9A CA A3 8C         JP      Z, ShowGameFieldVertical
1418+ 8C9D FE 01            CP      ORIENT_SOUTH
1419+ 8C9F CA A3 8C         JP      Z, ShowGameFieldVertical
1420+ 8CA2 C9               RET
1421+ 8CA3              ShowGameFieldVertical:
1422+ 8CA3 3E 00            LD      A, TILE_VERTICAL_WALL
1423+ 8CA5 32 BE 9A         LD      (CurrentWallTile), A
1424+ 8CA8 CD 5C 8C         CALL    FillWallArea
1425+ 8CAB CD 37 8C         CALL    FillGameAreaV
1426+ 8CAE CD C7 8C         CALL    ClearNextBlockArea
1427+ 8CB1 CD 57 84         CALL    FillScoreArea
1428+ 8CB4 C9               RET
1429+ 8CB5              ShowGameFieldHorizontal:
1430+ 8CB5 3E 04            LD      A, TILE_HORIZONTAL_WALL
1431+ 8CB7 32 BE 9A         LD      (CurrentWallTile), A
1432+ 8CBA CD 5C 8C         CALL    FillWallArea
1433+ 8CBD CD 12 8C         CALL    FillGameAreaH
1434+ 8CC0 CD C7 8C         CALL    ClearNextBlockArea
1435+ 8CC3 CD 57 84         CALL    FillScoreArea
1436+ 8CC6 C9               RET
1437+ 8CC7
1438+ 8CC7              ;----------------------------------------------------------------------
1439+ 8CC7              ;  Clear next block area
1440+ 8CC7              ;  INPUT: -
1441+ 8CC7              ;  OUTPUT: -
1442+ 8CC7              ;  MODIFY: AF, BC, DE, HL
1443+ 8CC7              ;----------------------------------------------------------------------
1444+ 8CC7              ClearNextBlockArea:
1445+ 8CC7 3A 71 9A         LD      A, (CurrentMatrixOrientation)
1446+ 8CCA FE 02            CP      ORIENT_EAST
1447+ 8CCC CA E1 8C         JP      Z, ClearNextBlockAreaEast
1448+ 8CCF FE 03            CP      ORIENT_WEST
1449+ 8CD1 CA E5 8C         JP      Z, ClearNextBlockAreaWest
1450+ 8CD4 FE 00            CP      ORIENT_NORTH
1451+ 8CD6 CA DD 8C         JP      Z, ClearNextBlockAreaNorth
1452+ 8CD9 CD AA 8B         CALL    FillNextBlockAreaBottomLeft
1453+ 8CDC C9               RET
1454+ 8CDD              ClearNextBlockAreaNorth:
1455+ 8CDD CD 88 8B         CALL    FillNextBlockAreaTopRight
1456+ 8CE0 C9               RET
1457+ 8CE1              ClearNextBlockAreaEast:
1458+ 8CE1 CD 44 8B         CALL    FillNextBlockAreaBottomRight
1459+ 8CE4 C9               RET
1460+ 8CE5              ClearNextBlockAreaWest:
1461+ 8CE5 CD 66 8B         CALL    FillNextBlockAreaTopLeft
1462+ 8CE8 C9               RET
1463+ 8CE9              ;----------------------------------------------------------------------
1464+ 8CE9              ;  Print matrix
1465+ 8CE9              ;  INPUT:
1466+ 8CE9              ;    A: 250 Refresh all matrix
1467+ 8CE9              ;  OUTPUT: -
1468+ 8CE9              ;  MODIFY: AF, BC, DE, HL
1469+ 8CE9              ;----------------------------------------------------------------------
1470+ 8CE9              PrintMatrix:
1471+ 8CE9 3A 9E 9A         LD      A, (ForcePrintMatrixRepaintAll)
1472+ 8CEC FE 01            CP      1
1473+ 8CEE 20 0E            JR      NZ, PrintMatrixSetLimits
1474+ 8CF0 3E 00            LD      A, 0
1475+ 8CF2 32 9E 9A         LD      (ForcePrintMatrixRepaintAll), A
1476+ 8CF5 3E 14            LD      A, 20
1477+ 8CF7 32 99 9A         LD      (PrintMatrixMaxRow), A
1478+ 8CFA 06 00            LD      B, 0
1479+ 8CFC 18 1A            JR      PrintMatrixContinue2
1480+ 8CFE              PrintMatrixSetLimits:
1481+ 8CFE
1482+ 8CFE
1483+ 8CFE 3A 72 9A         LD      A, (SavedY)
1484+ 8D01 FE 00            CP      0
1485+ 8D03 28 01            JR      Z, PrintMatrixContinue
1486+ 8D05 3D               DEC     A
1487+ 8D06              PrintMatrixContinue:
1488+ 8D06 47               LD      B, A           ; C = column (0..9)
1489+ 8D07 3C               INC     A
1490+ 8D08 3C               INC     A
1491+ 8D09 3C               INC     A
1492+ 8D0A 3C               INC     A
1493+ 8D0B 3C               INC     A
1494+ 8D0C 32 99 9A         LD      (PrintMatrixMaxRow), A
1495+ 8D0F FE 15            CP      21
1496+ 8D11 38 05            JR      C, PrintMatrixContinue2
1497+ 8D13 3E 14            LD      A, 20
1498+ 8D15 32 99 9A         LD      (PrintMatrixMaxRow), A
1499+ 8D18              PrintMatrixContinue2:
1500+ 8D18 3A 71 9A         LD      A, (CurrentMatrixOrientation)
1501+ 8D1B FE 00            CP      ORIENT_NORTH
1502+ 8D1D CA 30 8D         JP      Z, PrintMatrixNorth
1503+ 8D20 FE 01            CP      ORIENT_SOUTH
1504+ 8D22 CA 76 8D         JP      Z, PrintMatrixSouth
1505+ 8D25 FE 02            CP      ORIENT_EAST
1506+ 8D27 CA C1 8D         JP      Z, PrintMatrixEast
1507+ 8D2A FE 03            CP      ORIENT_WEST
1508+ 8D2C CA 0A 8E         JP      Z, PrintMatrixWest
1509+ 8D2F C9               RET
1510+ 8D30              ;----------------------------------------------------------------------
1511+ 8D30              ;  PrintMatrixNorth
1512+ 8D30              ;  - Shows the matrix as is (20 rows, 10 columns).
1513+ 8D30              ;  - We center it: offset row = 2, offset col = 11.
1514+ 8D30              ;  - For each (r,c), we read matrix[r*10 + c].
1515+ 8D30              ;    Then we print at (2 + r, 11 + c).
1516+ 8D30              ;----------------------------------------------------------------------
1517+ 8D30              PrintMatrixNorth:
1518+ 8D30                  ;LD      B, 0           ; B = row (0..19)
1519+ 8D30              North_RowLoop:
1520+ 8D30 0E 00            LD      C, 0           ; C = column (0..9)
1521+ 8D32              North_ColLoop:
1522+ 8D32                  ; Calculate address = Matrix + (B*10 + C)
1523+ 8D32 C5               PUSH    BC
1524+ 8D33 78               LD      A, B
1525+ 8D34 26 00            LD      H, 0
1526+ 8D36 6F               LD      L, A
1527+ 8D37 11 0A 00         LD      DE, 10
1528+ 8D3A CD A5 8F         CALL    MultiplyHLbyDE     ; HL = B*10
1529+ 8D3D 79               LD      A, C
1530+ 8D3E 5F               LD      E, A
1531+ 8D3F 16 00            LD      D, 0
1532+ 8D41 19               ADD     HL, DE             ; HL = B*10 + C
1533+ 8D42 11 E1 98         LD      DE, Matrix          ; <-- Load base address of Matrix in DE
1534+ 8D45 19               ADD     HL, DE              ; HL = Matrix + (B*10 + C)
1535+ 8D46 C1               POP     BC
1536+ 8D47
1537+ 8D47                  ;LD      A, (HL)             ; A = cell value (0..8)
1538+ 8D47
1539+ 8D47                  ; Calculate screen row/column
1540+ 8D47                  ; Row (D) = 2 + B
1541+ 8D47 50               LD      D, B
1542+ 8D48 14               INC     D
1543+ 8D49 14               INC     D
1544+ 8D4A                  ; Col (E) = 11 + C
1545+ 8D4A 59               LD      E, C
1546+ 8D4B 7B               LD      A, E
1547+ 8D4C C6 0B            ADD     A, 11
1548+ 8D4E 5F               LD      E, A
1549+ 8D4F
1550+ 8D4F                  ; Restore A with the cell color
1551+ 8D4F 7E               LD      A, (HL)
1552+ 8D50 D5               PUSH    DE
1553+ 8D51 C5               PUSH    BC
1554+ 8D52
1555+ 8D52
1556+ 8D52 F5               PUSH    AF
1557+ 8D53 CD 28 82         CALL    SetAttributeAtDE
1558+ 8D56 F1               POP     AF
1559+ 8D57 FE FF            CP      0xFF
1560+ 8D59 3E 01            LD      A, TILE_BLOCK
1561+ 8D5B 20 02            JR      NZ, PrintMatrixNorthEndContinue
1562+ 8D5D 3E 02            LD      A, TILE_BLOCK_ROW_COMPETED
1563+ 8D5F              PrintMatrixNorthEndContinue:
1564+ 8D5F CD AD 82         CALL    Screen_PrintRamChar
1565+ 8D62 C1               POP     BC
1566+ 8D63 D1               POP     DE
1567+ 8D64 0C               INC     C
1568+ 8D65 79               LD      A, C
1569+ 8D66 FE 0A            CP      10
1570+ 8D68 20 C8            JR      NZ, North_ColLoop
1571+ 8D6A
1572+ 8D6A 04               INC     B
1573+ 8D6B 3A 99 9A         LD      A, (PrintMatrixMaxRow)
1574+ 8D6E D5               PUSH    DE
1575+ 8D6F 57               LD      D, A
1576+ 8D70 78               LD      A, B
1577+ 8D71 BA               CP      D
1578+ 8D72 D1               POP     DE
1579+ 8D73 20 BB            JR      NZ, North_RowLoop
1580+ 8D75 C9               RET
1581+ 8D76
1582+ 8D76              ;----------------------------------------------------------------------
1583+ 8D76              ;  PrintMatrixSouth
1584+ 8D76              ;  - Shows the matrix upside down (180°).
1585+ 8D76              ;  - We center it the same way (offset row=2, col=11).
1586+ 8D76              ;  - For (r,c), screen row = 2 + (19 - r), col = 11 + (9 - c).
1587+ 8D76              ;----------------------------------------------------------------------
1588+ 8D76              PrintMatrixSouth:
1589+ 8D76                  ;LD      B, 0
1590+ 8D76              South_RowLoop:
1591+ 8D76 0E 00            LD      C, 0
1592+ 8D78              South_ColLoop:
1593+ 8D78 C5               PUSH    BC
1594+ 8D79 78               LD      A, B
1595+ 8D7A 26 00            LD      H, 0
1596+ 8D7C 6F               LD      L, A
1597+ 8D7D 11 0A 00         LD      DE, 10
1598+ 8D80 CD A5 8F         CALL    MultiplyHLbyDE
1599+ 8D83 79               LD      A, C
1600+ 8D84 5F               LD      E, A
1601+ 8D85 16 00            LD      D, 0
1602+ 8D87 19               ADD     HL, DE
1603+ 8D88 11 E1 98         LD      DE, Matrix
1604+ 8D8B 19               ADD     HL, DE
1605+ 8D8C C1               POP     BC
1606+ 8D8D
1607+ 8D8D 7E               LD      A, (HL)
1608+ 8D8E
1609+ 8D8E                  ; R = 2 + (19 - B)
1610+ 8D8E 50               LD      D, B
1611+ 8D8F 3E 13            LD      A, 19
1612+ 8D91 92               SUB     D
1613+ 8D92 C6 02            ADD     A, 2
1614+ 8D94 57               LD      D, A
1615+ 8D95
1616+ 8D95                  ; C = 11 + (9 - C)
1617+ 8D95 59               LD      E, C
1618+ 8D96 3E 09            LD      A, 9
1619+ 8D98 93               SUB     E
1620+ 8D99 C6 0B            ADD     A, 11
1621+ 8D9B 5F               LD      E, A
1622+ 8D9C
1623+ 8D9C 7E               LD      A, (HL)
1624+ 8D9D D5               PUSH    DE
1625+ 8D9E C5               PUSH    BC
1626+ 8D9F F5               PUSH    AF
1627+ 8DA0 CD 28 82         CALL    SetAttributeAtDE
1628+ 8DA3 F1               POP     AF
1629+ 8DA4 FE FF            CP      0xFF
1630+ 8DA6 3E 01            LD      A, TILE_BLOCK
1631+ 8DA8 20 02            JR      NZ, PrintMatrixSouthEndContinue
1632+ 8DAA 3E 02            LD      A, TILE_BLOCK_ROW_COMPETED
1633+ 8DAC              PrintMatrixSouthEndContinue:
1634+ 8DAC CD AD 82         CALL    Screen_PrintRamChar
1635+ 8DAF C1               POP     BC
1636+ 8DB0 D1               POP     DE
1637+ 8DB1
1638+ 8DB1 0C               INC     C
1639+ 8DB2 79               LD      A, C
1640+ 8DB3 FE 0A            CP      10
1641+ 8DB5 20 C1            JR      NZ, South_ColLoop
1642+ 8DB7
1643+ 8DB7 04               INC     B
1644+ 8DB8 3A 99 9A         LD      A, (PrintMatrixMaxRow)
1645+ 8DBB 57               LD      D, A
1646+ 8DBC 78               LD      A, B
1647+ 8DBD BA               CP      D
1648+ 8DBE 20 B6            JR      NZ, South_RowLoop
1649+ 8DC0 C9               RET
1650+ 8DC1
1651+ 8DC1              ;----------------------------------------------------------------------
1652+ 8DC1              ;  PrintMatrixEast
1653+ 8DC1              ;  - Shows the matrix rotated 90° right.
1654+ 8DC1              ;  - Now it becomes 10 rows x 20 columns.
1655+ 8DC1              ;  - Center offsets: row=7, col=6.
1656+ 8DC1              ;  - For (r,c): new_row = c + 7, new_col = (19 - r) + 6.
1657+ 8DC1              ;----------------------------------------------------------------------
1658+ 8DC1              PrintMatrixEast:
1659+ 8DC1                  ;LD      B, 0         ; B = r
1660+ 8DC1              East_RowLoop:
1661+ 8DC1 0E 00            LD      C, 0         ; C = c
1662+ 8DC3              East_ColLoop:
1663+ 8DC3 C5               PUSH    BC
1664+ 8DC4 78               LD      A, B
1665+ 8DC5 26 00            LD      H, 0
1666+ 8DC7 6F               LD      L, A
1667+ 8DC8 11 0A 00         LD      DE, 10
1668+ 8DCB CD A5 8F         CALL    MultiplyHLbyDE
1669+ 8DCE 79               LD      A, C
1670+ 8DCF 5F               LD      E, A
1671+ 8DD0 16 00            LD      D, 0
1672+ 8DD2 19               ADD     HL, DE
1673+ 8DD3 11 E1 98         LD      DE, Matrix          ; <-- Load base address of Matrix in DE
1674+ 8DD6 19               ADD     HL, DE
1675+ 8DD7 C1               POP     BC
1676+ 8DD8
1677+ 8DD8 7E               LD      A, (HL)
1678+ 8DD9
1679+ 8DD9                  ; R = 7 + C
1680+ 8DD9 51               LD      D, C
1681+ 8DDA 7A               LD      A, D
1682+ 8DDB C6 07            ADD     A, 7
1683+ 8DDD 57               LD      D, A
1684+ 8DDE
1685+ 8DDE                  ; C = 6 + (19 - B)
1686+ 8DDE 58               LD      E, B
1687+ 8DDF 3E 13            LD      A, 19
1688+ 8DE1 93               SUB     E
1689+ 8DE2 C6 06            ADD     A, 6
1690+ 8DE4 5F               LD      E, A
1691+ 8DE5
1692+ 8DE5 7E               LD      A, (HL)
1693+ 8DE6 D5               PUSH    DE
1694+ 8DE7 C5               PUSH    BC
1695+ 8DE8 F5               PUSH    AF
1696+ 8DE9 CD 28 82         CALL    SetAttributeAtDE
1697+ 8DEC F1               POP     AF
1698+ 8DED FE FF            CP      0xFF
1699+ 8DEF 3E 01            LD      A, TILE_BLOCK
1700+ 8DF1 20 02            JR      NZ, PrintMatrixEastEndContinue
1701+ 8DF3 3E 02            LD      A, TILE_BLOCK_ROW_COMPETED
1702+ 8DF5              PrintMatrixEastEndContinue:
1703+ 8DF5 CD AD 82         CALL    Screen_PrintRamChar
1704+ 8DF8 C1               POP     BC
1705+ 8DF9 D1               POP     DE
1706+ 8DFA
1707+ 8DFA 0C               INC     C
1708+ 8DFB 79               LD      A, C
1709+ 8DFC FE 0A            CP      10
1710+ 8DFE 20 C3            JR      NZ, East_ColLoop
1711+ 8E00
1712+ 8E00 04               INC     B
1713+ 8E01 3A 99 9A         LD      A, (PrintMatrixMaxRow)
1714+ 8E04 57               LD      D, A
1715+ 8E05 78               LD      A, B
1716+ 8E06 BA               CP      D
1717+ 8E07 20 B8            JR      NZ, East_RowLoop
1718+ 8E09 C9               RET
1719+ 8E0A
1720+ 8E0A              ;----------------------------------------------------------------------
1721+ 8E0A              ;  PrintMatrixWest
1722+ 8E0A              ;  - Shows the matrix rotated 90° left.
1723+ 8E0A              ;  - Now it becomes 10 rows x 20 columns.
1724+ 8E0A              ;  - Center offsets: row=7, col=6.
1725+ 8E0A              ;  - For (r,c): new_row = (9 - c) + 7, new_col = r + 6.
1726+ 8E0A              ;----------------------------------------------------------------------
1727+ 8E0A              PrintMatrixWest:
1728+ 8E0A                  ;LD      B, 0
1729+ 8E0A              West_RowLoop:
1730+ 8E0A 0E 00            LD      C, 0
1731+ 8E0C              West_ColLoop:
1732+ 8E0C C5               PUSH    BC
1733+ 8E0D 78               LD      A, B
1734+ 8E0E 26 00            LD      H, 0
1735+ 8E10 6F               LD      L, A
1736+ 8E11 11 0A 00         LD      DE, 10
1737+ 8E14 CD A5 8F         CALL    MultiplyHLbyDE
1738+ 8E17 79               LD      A, C
1739+ 8E18 5F               LD      E, A
1740+ 8E19 16 00            LD      D, 0
1741+ 8E1B 19               ADD     HL, DE
1742+ 8E1C 11 E1 98         LD      DE, Matrix          ; <-- Load base address of Matrix in DE
1743+ 8E1F 19               ADD     HL, DE
1744+ 8E20 C1               POP     BC
1745+ 8E21
1746+ 8E21 7E               LD      A, (HL)
1747+ 8E22
1748+ 8E22                  ; R = 7 + (9 - C)
1749+ 8E22 51               LD      D, C
1750+ 8E23 3E 09            LD      A, 9
1751+ 8E25 92               SUB     D
1752+ 8E26 C6 07            ADD     A, 7
1753+ 8E28 57               LD      D, A
1754+ 8E29
1755+ 8E29                  ; C = 6 + B
1756+ 8E29 58               LD      E, B
1757+ 8E2A 7B               LD      A, E
1758+ 8E2B C6 06            ADD     A, 6
1759+ 8E2D 5F               LD      E, A
1760+ 8E2E
1761+ 8E2E 7E               LD      A, (HL)
1762+ 8E2F D5               PUSH    DE
1763+ 8E30 C5               PUSH    BC
1764+ 8E31 F5               PUSH    AF
1765+ 8E32 CD 28 82         CALL    SetAttributeAtDE
1766+ 8E35 F1               POP     AF
1767+ 8E36 FE FF            CP      0xFF
1768+ 8E38 3E 01            LD      A, TILE_BLOCK
1769+ 8E3A 20 02            JR      NZ, PrintMatrixWestEndContinue
1770+ 8E3C 3E 02            LD      A, TILE_BLOCK_ROW_COMPETED
1771+ 8E3E              PrintMatrixWestEndContinue:
1772+ 8E3E CD AD 82         CALL    Screen_PrintRamChar
1773+ 8E41 C1               POP     BC
1774+ 8E42 D1               POP     DE
1775+ 8E43
1776+ 8E43 0C               INC     C
1777+ 8E44 79               LD      A, C
1778+ 8E45 FE 0A            CP      10
1779+ 8E47 20 C3            JR      NZ, West_ColLoop
1780+ 8E49
1781+ 8E49 04               INC     B
1782+ 8E4A 3A 99 9A         LD      A, (PrintMatrixMaxRow)
1783+ 8E4D 57               LD      D, A
1784+ 8E4E 78               LD      A, B
1785+ 8E4F BA               CP      D
1786+ 8E50 20 B8            JR      NZ, West_RowLoop
1787+ 8E52 C9               RET
1788+ 8E53
1789+ 8E53              ;--------------------------------------------------
1790+ 8E53              ; Check blocks collision
1791+ 8E53              ; INPUT: -
1792+ 8E53              ; OUTPUT:
1793+ 8E53              ;   A: 1=Yes - 0=No
1794+ 8E53              ; MODIFY: AF, HL, BC, DE
1795+ 8E53              ;--------------------------------------------------
1796+ 8E53              CheckBlocksCollision:
1797+ 8E53 3A 73 9A         LD      A, (SavedX)
1798+ 8E56 32 9B 9A         LD      (TempXBlocPosition), A
1799+ 8E59 2A 75 9A         LD      HL,(CurrentBlockTable)
1800+ 8E5C 3A 9A 9A         LD      A, (BlockLeftMoving)
1801+ 8E5F FE 00            CP      0
1802+ 8E61 CA 7A 8E         JP      Z, CheckBlocksCollisionLoop
1803+ 8E64 FE 01            CP      1
1804+ 8E66 CA 73 8E         JP      Z, CheckBlocksCollisionLoopLeft
1805+ 8E69 3A 73 9A         LD      A, (SavedX)
1806+ 8E6C 3C               INC     A
1807+ 8E6D 32 9B 9A         LD      (TempXBlocPosition), A
1808+ 8E70 C3 7A 8E         JP      CheckBlocksCollisionLoop
1809+ 8E73              CheckBlocksCollisionLoopLeft:
1810+ 8E73 3A 73 9A         LD      A, (SavedX)
1811+ 8E76 3D               DEC     A
1812+ 8E77 32 9B 9A         LD      (TempXBlocPosition), A
1813+ 8E7A              CheckBlocksCollisionLoop:
1814+ 8E7A 7E               LD      A, (HL)
1815+ 8E7B FE FF            CP      0xFF
1816+ 8E7D CA A3 8E         JP      Z, CheckBlocksCollisionNo
1817+ 8E80 4F               LD      C, A        ; dy
1818+ 8E81 23               INC     HL
1819+ 8E82 7E               LD      A, (HL)     ; dx
1820+ 8E83 23               INC     HL
1821+ 8E84 47               LD      B, A
1822+ 8E85 E5               PUSH    HL
1823+ 8E86                  ; r = SavedY + dy
1824+ 8E86 3A 72 9A         LD      A, (SavedY)
1825+ 8E89 81               ADD     A, C
1826+ 8E8A 4F               LD      C, A
1827+ 8E8B
1828+ 8E8B                  ; c = SavedX + dx
1829+ 8E8B 3A 9B 9A         LD      A, (TempXBlocPosition)
1830+ 8E8E 80               ADD     A, B
1831+ 8E8F 47               LD      B, A
1832+ 8E90
1833+ 8E90                  ; offset = r*10 + c => HL
1834+ 8E90 CD 5E 93         CALL    ComputeOffset
1835+ 8E93 11 E1 98         LD      DE, Matrix
1836+ 8E96 19               ADD     HL, DE
1837+ 8E97
1838+ 8E97 7E               LD      A, (HL)
1839+ 8E98 FE 00            CP      COLOR_BLACK
1840+ 8E9A 20 03            JR      NZ, CheckBlocksCollisionYes
1841+ 8E9C E1               POP     HL
1842+ 8E9D 18 DB            JR      CheckBlocksCollisionLoop
1843+ 8E9F
1844+ 8E9F              CheckBlocksCollisionYes:
1845+ 8E9F E1               POP     HL
1846+ 8EA0 3E 01            LD      A, 1
1847+ 8EA2 C9               RET
1848+ 8EA3
1849+ 8EA3
1850+ 8EA3              CheckBlocksCollisionNo:
1851+ 8EA3 AF               XOR A
1852+ 8EA4 C9               RET
1853+ 8EA5              ;--------------------------------------------------
1854+ 8EA5              ; Update current block table
1855+ 8EA5              ; INPUT:
1856+ 8EA5              ;   D: Y position
1857+ 8EA5              ;   E: X position
1858+ 8EA5              ; OUTPUT: -
1859+ 8EA5              ; MODIFY: AF, BC, DE, HL
1860+ 8EA5              ;--------------------------------------------------
1861+ 8EA5              UpdateCurrentBlockTable:
1862+ 8EA5 3A 7A 9A         LD      A, (CurrentBlock)
1863+ 8EA8 47               LD      B, A                ; Salvo ID in B
1864+ 8EA9 6F               LD      L, A                ; L = ID
1865+ 8EAA 7A               LD      A, D
1866+ 8EAB 32 72 9A         LD      (SavedY), A
1867+ 8EAE 7B               LD      A, E
1868+ 8EAF 32 73 9A         LD      (SavedX), A
1869+ 8EB2 26 00            LD      H, 0
1870+ 8EB4 11 A6 96         LD      DE, BLOCK_COLORS
1871+ 8EB7 19               ADD     HL, DE              ; HL -> &BLOCK_COLORS[ID]
1872+ 8EB8 7E               LD      A, (HL)             ; A = colore
1873+ 8EB9 32 74 9A         LD      (ColorOfBlock), A   ; mettiamo in una variabile
1874+ 8EBC 3A 79 9A         LD      A, (CurrentBlockRotation) ; A = rotazione (0..3)
1875+ 8EBF 68               LD      L, B                       ; L = ID salvato prima
1876+ 8EC0 CB 25            SLA     L
1877+ 8EC2 CB 25            SLA     L                          ; L = ID*4
1878+ 8EC4 85               ADD     A, L                       ; A = (ID*4) + rot
1879+ 8EC5 6F               LD      L, A
1880+ 8EC6 26 00            LD      H, 0
1881+ 8EC8 29               ADD     HL, HL                     ; HL *= 2 (ogni voce della tabella = 2 byte)
1882+ 8EC9 11 E5 96         LD      DE, BLOCKS_TABLE
1883+ 8ECC 19               ADD     HL, DE                     ; HL => DW con l'indirizzo giusto
1884+ 8ECD 5E               LD      E, (HL)
1885+ 8ECE 23               INC     HL
1886+ 8ECF 56               LD      D, (HL)
1887+ 8ED0 EB               EX      DE, HL
1888+ 8ED1 22 75 9A         LD      (CurrentBlockTable), HL
1889+ 8ED4 C9               RET
1890+ 8ED5              ;------------------------------------------------------------------------
1891+ 8ED5              ; Delay
1892+ 8ED5              ; INPUT: -
1893+ 8ED5              ; OUTPUT: -
1894+ 8ED5              ; MODIFY: AF, BC
1895+ 8ED5              ;------------------------------------------------------------------------
1896+ 8ED5              Delay:
1897+ 8ED5 01 20 01         LD      BC, 0x0120              ; Set a counter
1898+ 8ED8              .DelayLoop:
1899+ 8ED8 0B               DEC     BC
1900+ 8ED9 78               LD      A, B
1901+ 8EDA B1               OR      C
1902+ 8EDB 20 FB            JR      NZ, .DelayLoop          ; Wait until BC is 0
1903+ 8EDD C9               RET
1904+ 8EDE              ; ---------------------------------------------------------------------
1905+ 8EDE              ; Remove completed rows
1906+ 8EDE              ; ---------------------------------------------------------------------
1907+ 8EDE              RemoveCompletedRows:
1908+ 8EDE 06 13            LD      B, 19               ; Partiamo dalla riga più bassa (19)
1909+ 8EE0              RemoveCompletedLoop:
1910+ 8EE0 78               LD      A, B
1911+ 8EE1 FE 00            CP      0                   ; Se siamo alla riga 0, fermati
1912+ 8EE3 28 0F            JR      Z, RemoveCompletedEnd
1913+ 8EE5
1914+ 8EE5                  ; Controlla la prima colonna della riga corrente
1915+ 8EE5 C5               PUSH    BC
1916+ 8EE6 CD FA 8E         CALL    CheckFirstColumnFF  ; Z=1 se la prima colonna è 0xFF
1917+ 8EE9 C1               POP     BC
1918+ 8EEA FE 00            CP      0
1919+ 8EEC 28 03            JR      Z, RemoveCompletedSkipRow         ; Se Z=0, passa alla riga successiva
1920+ 8EEE
1921+ 8EEE                  ; Se la prima colonna è 0xFF, sposta le righe superiori verso il basso
1922+ 8EEE CD 0F 8F         CALL    ShiftRowsDown
1923+ 8EF1
1924+ 8EF1              RemoveCompletedSkipRow:
1925+ 8EF1 05               DEC     B                   ; Passa alla riga superiore
1926+ 8EF2 18 EC            JR      RemoveCompletedLoop            ; Continua il ciclo
1927+ 8EF4
1928+ 8EF4              RemoveCompletedEnd:
1929+ 8EF4 3E 01            LD      A, 0x1
1930+ 8EF6 32 9E 9A         LD      (ForcePrintMatrixRepaintAll), A
1931+ 8EF9 C9               RET
1932+ 8EFA
1933+ 8EFA              ; ---------------------------------------------------------------------
1934+ 8EFA              ; CheckFirstColumnFF
1935+ 8EFA              ; Controlla se la prima colonna della riga specificata è 0xFF.
1936+ 8EFA              ; Input:
1937+ 8EFA              ;   B = numero della riga (0..19)
1938+ 8EFA              ; Output:
1939+ 8EFA              ;   Z=1 se la prima colonna è 0xFF, Z=0 altrimenti
1940+ 8EFA              ; ---------------------------------------------------------------------
1941+ 8EFA              CheckFirstColumnFF:
1942+ 8EFA
1943+ 8EFA 48               LD      C, B
1944+ 8EFB 06 00            LD      B, 0
1945+ 8EFD CD 5E 93         CALL    ComputeOffset
1946+ 8F00 11 E1 98         LD      DE, Matrix
1947+ 8F03 19               ADD     HL, DE
1948+ 8F04 7E               LD      A, (HL)
1949+ 8F05 FE FF            CP      0xFF                ; Confronta con 0xFF
1950+ 8F07 28 03            JR      Z, CheckFirstColumnFFContinue
1951+ 8F09 AF               XOR     A
1952+ 8F0A 18 02            JR      CheckFirstColumnFFEnd
1953+ 8F0C              CheckFirstColumnFFContinue:
1954+ 8F0C 3E 01            LD      A, 1
1955+ 8F0E              CheckFirstColumnFFEnd:
1956+ 8F0E C9               RET
1957+ 8F0F
1958+ 8F0F              ; ---------------------------------------------------------------------
1959+ 8F0F              ; ShiftRowsDown
1960+ 8F0F              ; Sposta tutte le righe superiori verso il basso, riempie la riga 0
1961+ 8F0F              ; con COLOR_BLACK.
1962+ 8F0F              ; Input:
1963+ 8F0F              ;   B = numero della riga corrente (da spostare verso il basso)
1964+ 8F0F              ; ---------------------------------------------------------------------
1965+ 8F0F              ShiftRowsDown:
1966+ 8F0F C5               PUSH    BC
1967+ 8F10 05               DEC     B                   ; Passa alla riga corrente
1968+ 8F11 48               LD      C, B
1969+ 8F12 06 00            LD      B, 0
1970+ 8F14 C5               PUSH    BC
1971+ 8F15 CD 5E 93         CALL    ComputeOffset
1972+ 8F18 C1               POP     BC
1973+ 8F19 11 E1 98         LD      DE, Matrix
1974+ 8F1C 19               ADD     HL, DE   ; HL=Start position to copy from
1975+ 8F1D E5               PUSH    HL
1976+ 8F1E AF               XOR     A
1977+ 8F1F              ShiftRowsDownLoop:
1978+ 8F1F 4F               LD      C, A
1979+ 8F20 7E               LD      A, (HL) ; Value to copy
1980+ 8F21 23               INC     HL
1981+ 8F22 23               INC     HL
1982+ 8F23 23               INC     HL
1983+ 8F24 23               INC     HL
1984+ 8F25 23               INC     HL
1985+ 8F26 23               INC     HL
1986+ 8F27 23               INC     HL
1987+ 8F28 23               INC     HL
1988+ 8F29 23               INC     HL
1989+ 8F2A 23               INC     HL
1990+ 8F2B 77               LD      (HL), A ; Copy value to the next row
1991+ 8F2C 2B               DEC     HL
1992+ 8F2D 2B               DEC     HL
1993+ 8F2E 2B               DEC     HL
1994+ 8F2F 2B               DEC     HL
1995+ 8F30 2B               DEC     HL
1996+ 8F31 2B               DEC     HL
1997+ 8F32 2B               DEC     HL
1998+ 8F33 2B               DEC     HL
1999+ 8F34 2B               DEC     HL
2000+ 8F35 79               LD      A, C
2001+ 8F36 3C               INC     A
2002+ 8F37 FE 0A            CP      10
2003+ 8F39 28 02            JR      Z, ShiftRowsDownLoopEnd
2004+ 8F3B 18 E2            JR      ShiftRowsDownLoop
2005+ 8F3D              ShiftRowsDownLoopEnd:
2006+ 8F3D E1               POP     HL
2007+ 8F3E C1               POP     BC
2008+ 8F3F 78               LD      A, B
2009+ 8F40 3D               DEC     A
2010+ 8F41 FE 00            CP      0
2011+ 8F43 C8               RET     Z
2012+ 8F44                  ;LD      B, 20
2013+ 8F44 3E FF            LD      A, 0xFF
2014+ 8F46 77               LD      (HL), A ; Fill the first row with 0xFF
2015+ 8F47 C9               RET
2016+ 8F48              FillTopRow:
2017+ 8F48                  ; Riempie la riga 0 con COLOR_BLACK
2018+ 8F48 16 00            LD      D, 0
2019+ 8F4A 1E 00            LD      E, 0
2020+ 8F4C CD 58 8F         CALL    ComputeRowAddress   ; HL = indirizzo della riga 0
2021+ 8F4F 0E 0A            LD      C, 10               ; Numero di colonne
2022+ 8F51              FillRowLoop:
2023+ 8F51 36 00            LD      (HL), COLOR_BLACK   ; Riempie con COLOR_BLACK
2024+ 8F53 23               INC     HL
2025+ 8F54 0D               DEC     C
2026+ 8F55 20 FA            JR      NZ, FillRowLoop
2027+ 8F57 C9               RET
2028+ 8F58
2029+ 8F58              ; ---------------------------------------------------------------------
2030+ 8F58              ; ComputeRowAddress
2031+ 8F58              ; Calcola l'indirizzo della riga in Matrix.
2032+ 8F58              ; Input:
2033+ 8F58              ;   D = 0
2034+ 8F58              ;   E = numero della riga (0..19)
2035+ 8F58              ; Output:
2036+ 8F58              ;   HL = indirizzo della riga in Matrix
2037+ 8F58              ; ---------------------------------------------------------------------
2038+ 8F58              ComputeRowAddress:
2039+ 8F58 21 E1 98         LD      HL, Matrix          ; Base della matrice
2040+ 8F5B 7B               LD      A, E
2041+ 8F5C CD 68 93         CALL    MulByteBy10         ; HL = E * 10
2042+ 8F5F 29               ADD     HL, HL              ; HL = Matrix + (E * 10)
2043+ 8F60 C9               RET
2044+ 8F61              ;--------------------------------------------------
2045+ 8F61              ; Place block into matrix (with collision check)
2046+ 8F61              ; INPUT:
2047+ 8F61              ;   D: Y position
2048+ 8F61              ;   E: X position
2049+ 8F61              ; OUTPUT: -
2050+ 8F61              ; MODIFY: AF, BC, HL
2051+ 8F61              ;--------------------------------------------------
2052+ 8F61              PlaceBlock:
2053+ 8F61 CD A5 8E         CALL    UpdateCurrentBlockTable
2054+ 8F64 CD 53 8E         CALL    CheckBlocksCollision
2055+ 8F67 FE 00            CP      0
2056+ 8F69 28 0F            JR      Z, CheckOk
2057+ 8F6B              Collision:
2058+ 8F6B
2059+ 8F6B 32 B6 9A         LD      (ShowNextBlock), A
2060+ 8F6E 3A 72 9A         LD      A, (SavedY)
2061+ 8F71 FE 00            CP      0
2062+ 8F73 CA 9F 8F         JP      Z, NoMoreBlocks
2063+ 8F76 3D               DEC     A
2064+ 8F77 32 72 9A         LD      (SavedY), A
2065+ 8F7A
2066+ 8F7A              CheckOk:
2067+ 8F7A                  ; => arrivati a 0xFF => nessuna collisione
2068+ 8F7A                  ;XOR     A
2069+ 8F7A                  ;ADC     A, A      ; forziamo CF=0 (modo classico: "OR A" + "Ccf" e simili)
2070+ 8F7A 2A 75 9A         LD      HL,(CurrentBlockTable)
2071+ 8F7D                  ;LD      A, (ColorOfBlock)
2072+ 8F7D              PlaceBlockLoop:
2073+ 8F7D 7E               LD      A, (HL)
2074+ 8F7E FE FF            CP      0xFF
2075+ 8F80 C8               RET     Z
2076+ 8F81 4F               LD      C, A        ; dy
2077+ 8F82 23               INC     HL
2078+ 8F83 7E               LD      A, (HL)     ; dx
2079+ 8F84 23               INC     HL
2080+ 8F85 47               LD      B, A
2081+ 8F86 E5               PUSH    HL
2082+ 8F87                  ; r = SavedY + dy
2083+ 8F87 3A 72 9A         LD      A, (SavedY)
2084+ 8F8A 81               ADD     A, C
2085+ 8F8B 4F               LD      C, A
2086+ 8F8C
2087+ 8F8C                  ; c = SavedX + dx
2088+ 8F8C 3A 73 9A         LD      A, (SavedX)
2089+ 8F8F 80               ADD     A, B
2090+ 8F90 47               LD      B, A
2091+ 8F91
2092+ 8F91                  ; offset = r*10 + c => HL
2093+ 8F91 CD 5E 93         CALL    ComputeOffset
2094+ 8F94 11 E1 98         LD      DE, Matrix
2095+ 8F97 19               ADD     HL, DE
2096+ 8F98
2097+ 8F98 3A 74 9A         LD      A, (ColorOfBlock)
2098+ 8F9B 77               LD      (HL), A
2099+ 8F9C E1               POP     HL
2100+ 8F9D 18 DE            JR      PlaceBlockLoop
2101+ 8F9F
2102+ 8F9F              NoMoreBlocks: ; GAME OVER
2103+ 8F9F 3E 01            LD      A, 1
2104+ 8FA1 32 CF 9A         LD      (GameOver), A
2105+ 8FA4 C9               RET
2106+ 8FA5
2107+ 8FA5              ;--------------------------------------------------
2108+ 8FA5              ; Multiply HL by DE
2109+ 8FA5              ; INPUT:
2110+ 8FA5              ;   DE: First value to multiply (16-bit)
2111+ 8FA5              ;   HL: Second value to multiply (16-bit)
2112+ 8FA5              ; OUTPUT:
2113+ 8FA5              ;   HL: result of multiplication
2114+ 8FA5              ; MODIFIY: DE, HL, BC
2115+ 8FA5              ;--------------------------------------------------
2116+ 8FA5              MultiplyHLbyDE:
2117+ 8FA5 C5               PUSH    BC
2118+ 8FA6 44               LD      B, H
2119+ 8FA7 4D               LD      C, L
2120+ 8FA8 AF               XOR     A
2121+ 8FA9 67               LD      H, A
2122+ 8FAA 6F               LD      L, A
2123+ 8FAB 3E 10            LD      A, 16
2124+ 8FAD              MulLoop:
2125+ 8FAD CB 41            BIT     0, C
2126+ 8FAF 28 01            JR      Z, SkipAdd
2127+ 8FB1                  ; Se e' 1 => HL = HL + DE
2128+ 8FB1 19               ADD     HL, DE
2129+ 8FB2              SkipAdd:
2130+ 8FB2 CB 39            SRL     C
2131+ 8FB4 CB 18            RR      B
2132+ 8FB6 CB 23            SLA     E
2133+ 8FB8 CB 12            RL      D
2134+ 8FBA 3D               DEC     A
2135+ 8FBB 20 F0            JR      NZ, MulLoop
2136+ 8FBD C1               POP     BC
2137+ 8FBE C9               RET
2138+ 8FBF              ;--------------------------------------------------
2139+ 8FBF              ; Game over
2140+ 8FBF              ; INPUT: -
2141+ 8FBF              ; OUTPUT: -
2142+ 8FBF              ; MODIFY: AF, BC, DE, HL
2143+ 8FBF              ;--------------------------------------------------
2144+ 8FBF              ShowGameOver:
2145+ 8FBF
2146+ 8FBF F3               DI
2147+ 8FC0 ED 56            IM 1       ; Torna alla modalità interrupt standard
2148+ 8FC2 FB               EI
2149+ 8FC3
2150+ 8FC3 21 E1 98         LD   HL, Matrix            ; HL punta all'inizio della matrice
2151+ 8FC6 06 00            LD   B,0
2152+ 8FC8 0E C8            LD   C, 200                 ; BC = contatore di byte da scorrere
2153+ 8FCA
2154+ 8FCA              ShowGameOverNextByte:
2155+ 8FCA 7E               LD   A, (HL)               ; Carica il valore corrente
2156+ 8FCB FE 00            CP   COLOR_BLACK           ; È nero?
2157+ 8FCD 28 02            JR   Z, ShowGameOverSkipReplace        ; Se sì, salta
2158+ 8FCF
2159+ 8FCF 36 38            LD   (HL), COLOR_WHITE     ; Altrimenti, imposta bianco
2160+ 8FD1
2161+ 8FD1              ShowGameOverSkipReplace:
2162+ 8FD1 23               INC  HL                    ; Passa al prossimo byte
2163+ 8FD2 0B               DEC  BC
2164+ 8FD3 78               LD   A, B
2165+ 8FD4 B1               OR   C
2166+ 8FD5 C2 CA 8F         JP   NZ, ShowGameOverNextByte          ; Finché BC ≠ 0
2167+ 8FD8
2168+ 8FD8 3E 01            LD     A, 1
2169+ 8FDA 32 9E 9A         LD     (ForcePrintMatrixRepaintAll), A
2170+ 8FDD CD E9 8C         CALL   PrintMatrix
2171+ 8FE0
2172+ 8FE0
2173+ 8FE0
2174+ 8FE0 1E 0B            LD     E, 11
2175+ 8FE2 16 0B            LD     D, 11
2176+ 8FE4 21 3C 97         LD     HL, TEXT_GAME_OVER_1
2177+ 8FE7 CD 47 82         CALL   Screen_PrintString
2178+ 8FEA
2179+ 8FEA 1E 0B            LD     E, 11
2180+ 8FEC 16 0C            LD     D, 12
2181+ 8FEE 21 47 97         LD     HL, TEXT_GAME_OVER_2
2182+ 8FF1 CD 47 82         CALL   Screen_PrintString
2183+ 8FF4
2184+ 8FF4 1E 0B            LD     E, 11
2185+ 8FF6 16 0D            LD     D, 13
2186+ 8FF8 21 52 97         LD     HL, TEXT_GAME_OVER_3
2187+ 8FFB CD 47 82         CALL   Screen_PrintString
2188+ 8FFE
2189+ 8FFE 1E 0B            LD     E, 11
2190+ 9000 16 0E            LD     D, 14
2191+ 9002 21 3C 97         LD     HL, TEXT_GAME_OVER_1
2192+ 9005 CD 47 82         CALL   Screen_PrintString
2193+ 9008 CD 0B 84         CALL   GameOverSound
2194+ 900B              ShowGameOverKeyPress:
2195+ 900B CD DE 94         CALL   ReadKeyboard
2196+ 900E 3A 9D 9A         LD     A, (KeyPressed)
2197+ 9011 FE 20            CP     32
2198+ 9013 CA EF 9A         JP     Z, InitMenu
2199+ 9016 18 F3            JR     ShowGameOverKeyPress
2200+ 9018              ;--------------------------------------------------
2201+ 9018              ; Init new game
2202+ 9018              ;--------------------------------------------------
2203+ 9018              InitNewGame:
2204+ 9018 AF               XOR     A
2205+ 9019 32 D0 9A         LD      (MusicNoteIndex),A
2206+ 901C 32 CF 9A         LD      (GameOver), A
2207+ 901F 32 9F 9A         LD      (CompletedRows), A
2208+ 9022 32 8F 9A         LD      (FrameCounter), A
2209+ 9025 32 90 9A         LD      (SecondsCounter), A
2210+ 9028 32 91 9A         LD      (MinutesCounter), A
2211+ 902B 32 92 9A         LD      (Score), A
2212+ 902E 32 B6 9A         LD      (ShowNextBlock), A
2213+ 9031 32 98 9A         LD      (BlockSpeedCounter), A
2214+ 9034 26 00            LD      H, 0
2215+ 9036 2E 00            LD      L, 0
2216+ 9038 22 BF 9A         LD      (PlacedBlocks), HL              ; Set the number of blocks to 0
2217+ 903B 22 92 9A         LD      (Score), HL                     ; Set the score to 0
2218+ 903E
2219+ 903E F3               DI                                      ; Disable interrupts
2220+ 903F ED 5E            IM      2                               ; Set the interrupt mode
2221+ 9041 FB               EI                                      ; Enable interrupts
2222+ 9042 C9               RET
2223+ 9043
2224+ 9043              ;--------------------------------------------------
2225+ 9043              ; Set M2 interrupt routine
2226+ 9043              ; INPUT: -
2227+ 9043              ; OUTPUT: -
2228+ 9043              ; MODIFY: AF, BC, DE, HL
2229+ 9043              ;--------------------------------------------------
2230+ 9043              SetM2RRoutine:
2231+ 9043 21 AE 90         LD      HL,M2Routine
2232+ 9046 DD 21 F0 FF      LD      IX,0xFFF0                       ; This code is to be written at 0xFF
2233+ 904A DD 36 04 C3      LD      (IX+04h),0xC3                   ; Opcode for JP
2234+ 904E DD 75 05         LD      (IX+05h),L                      ; Store the address of the interrupt routine in
2235+ 9051 DD 74 06         LD      (IX+06h),H
2236+ 9054 DD 36 0F 18      LD      (IX+0Fh),0x18                   ; Opcode for JR; this will do JR to FFF4h
2237+ 9058 3E 39            LD      A,0x39                          ; Interrupt table at page 0x3900 (ROM)
2238+ 905A ED 47            LD      I,A                             ; Set the interrupt register to that page
2239+ 905C C9               RET
2240+ 905D              ;----------------------------------------------------
2241+ 905D              ; Move block down
2242+ 905D              ;----------------------------------------------------
2243+ 905D              MoveBlockDown:
2244+ 905D 0E 13            LD      C, 19
2245+ 905F 3A 7A 9A         LD      A, (CurrentBlock)
2246+ 9062 FE 00            CP      0
2247+ 9064 20 02            JR      NZ, MoveBlockDownNoIBlock
2248+ 9066 0E 14            LD      C, 20
2249+ 9068              MoveBlockDownNoIBlock:
2250+ 9068 47               LD      B, A
2251+ 9069 3A 79 9A         LD      A, (CurrentBlockRotation) ; A = rotazione (0..3)
2252+ 906C 68               LD      L, B                       ; L = ID salvato prima
2253+ 906D CB 25            SLA     L
2254+ 906F CB 25            SLA     L                          ; L = ID*4
2255+ 9071 85               ADD     A, L                       ; A = (ID*4) + rot
2256+ 9072 6F               LD      L, A
2257+ 9073 26 00            LD      H, 0
2258+ 9075 11 C9 96         LD      DE, BLOCKS_HEIGHT
2259+ 9078 19               ADD     HL, DE                      ; HL => DW con l'indirizzo giusto
2260+ 9079 46               LD      B, (HL)                     ; Current block height
2261+ 907A 3A 72 9A         LD      A, (SavedY)
2262+ 907D 80               ADD     B
2263+ 907E FE 14            CP      20
2264+ 9080 20 0A            JR      NZ, MoveBlockDownCheckBottomLimit       ; Continue moving if not at the bottom
2265+ 9082 AF               XOR     A
2266+ 9083 32 98 9A         LD      (BlockSpeedCounter), A
2267+ 9086 3E 01            LD      A, 1
2268+ 9088 32 B6 9A         LD      (ShowNextBlock), A
2269+ 908B C9               RET
2270+ 908C              MoveBlockDownCheckBottomLimit:
2271+ 908C AF               XOR     A
2272+ 908D 32 98 9A         LD      (BlockSpeedCounter), A
2273+ 9090 3A 72 9A         LD      A, (SavedY)
2274+ 9093 3C               INC     A
2275+ 9094 B9               CP      C
2276+ 9095 20 06            JR      NZ, MoveBlockDownContinue       ; Continue moving if not at the bottom
2277+ 9097 3E 01            LD      A, 1
2278+ 9099 32 B6 9A         LD      (ShowNextBlock), A
2279+ 909C C9               RET
2280+ 909D              MoveBlockDownContinue:
2281+ 909D F5               PUSH    AF
2282+ 909E CD 20 93         CALL    RemoveCurrentBlock
2283+ 90A1 F1               POP     AF
2284+ 90A2 32 72 9A         LD      (SavedY), A           ; Increment the Y position
2285+ 90A5 57               LD      D, A
2286+ 90A6 3A 73 9A         LD      A, (SavedX)           ; Increment the Y position
2287+ 90A9 5F               LD      E, A           ; Get the X position
2288+ 90AA CD 61 8F         CALL    PlaceBlock
2289+ 90AD C9               RET
2290+ 90AE
2291+ 90AE              ;---------------------------------------------------
2292+ 90AE              ; M2 routine
2293+ 90AE              ;---------------------------------------------------
2294+ 90AE              M2Routine:
2295+ 90AE F3               DI                                      ; Disable interrupts
2296+ 90AF F5               PUSH    AF                                 ; Save all the registers on the stack
2297+ 90B0 C5               PUSH    BC                                 ; This is probably not necessary unless
2298+ 90B1 D5               PUSH    DE                                 ; we're looking at returning cleanly
2299+ 90B2 E5               PUSH    HL                                 ; back to BASIC at some point
2300+ 90B3 DD E5            PUSH    IX
2301+ 90B5 D9               EXX
2302+ 90B6 08               EX      AF,AF'
2303+ 90B7 F5               PUSH    AF
2304+ 90B8 C5               PUSH    BC
2305+ 90B9 D5               PUSH    DE
2306+ 90BA E5               PUSH    HL
2307+ 90BB FD E5            PUSH    IY
2308+ 90BD
2309+ 90BD                  ;
2310+ 90BD
2311+ 90BD
2312+ 90BD
2313+ 90BD 3A 8F 9A         LD      A, (FrameCounter)
2314+ 90C0 3C               INC     A
2315+ 90C1 FE 33            CP      51
2316+ 90C3 20 15            JR      NZ, M2RoutineContinue
2317+ 90C5 3A 90 9A         LD      A, (SecondsCounter)
2318+ 90C8 3C               INC     A
2319+ 90C9 FE 3D            CP      61
2320+ 90CB 20 08            JR      NZ, M2RoutineNoNewMinute
2321+ 90CD 3A 91 9A         LD      A, (MinutesCounter)
2322+ 90D0 3C               INC     A
2323+ 90D1 32 91 9A         LD      (MinutesCounter), A
2324+ 90D4 AF               XOR     A                            ; Reset the seconds counter
2325+ 90D5              M2RoutineNoNewMinute:
2326+ 90D5 32 90 9A         LD      (SecondsCounter), A
2327+ 90D8 3E 00            LD      A, 0                            ; Reset the frame counter
2328+ 90DA              M2RoutineContinue:
2329+ 90DA 32 8F 9A         LD      (FrameCounter), A
2330+ 90DD
2331+ 90DD 3A D1 9A         LD      A, (InGame)
2332+ 90E0 FE 01            CP      1
2333+ 90E2 28 43            JR      Z, M2RoutineInGame
2334+ 90E4 3A 8F 9A         LD      A, (FrameCounter)
2335+ 90E7 FE 00            CP      0
2336+ 90E9 CA 21 91         JP      Z, PlayMenuMusic
2337+ 90EC FE 00            CP      0
2338+ 90EE CA 21 91         JP      Z, PlayMenuMusic
2339+ 90F1 FE 0A            CP      10
2340+ 90F3 CA 21 91         JP      Z, PlayMenuMusic
2341+ 90F6 FE 14            CP      20
2342+ 90F8 CA 21 91         JP      Z, PlayMenuMusic
2343+ 90FB FE 1E            CP      30
2344+ 90FD CA 21 91         JP      Z, PlayMenuMusic
2345+ 9100 FE 28            CP      40
2346+ 9102 CA 21 91         JP      Z, PlayMenuMusic
2347+ 9105
2348+ 9105
2349+ 9105 FE 05            CP      5
2350+ 9107 CA 21 91         JP      Z, PlayMenuMusic
2351+ 910A FE 0F            CP      15
2352+ 910C CA 21 91         JP      Z, PlayMenuMusic
2353+ 910F FE 19            CP      25
2354+ 9111 CA 21 91         JP      Z, PlayMenuMusic
2355+ 9114 FE 23            CP      35
2356+ 9116 CA 21 91         JP      Z, PlayMenuMusic
2357+ 9119 FE 2D            CP      45
2358+ 911B CA 21 91         JP      Z, PlayMenuMusic
2359+ 911E
2360+ 911E C3 72 91         JP      M2RoutineBlockMoveExit
2361+ 9121              PlayMenuMusic:
2362+ 9121 CD 31 84         CALL    PlayInGameMusic
2363+ 9124 C3 72 91         JP      M2RoutineBlockMoveExit
2364+ 9127
2365+ 9127              M2RoutineInGame:
2366+ 9127
2367+ 9127 3A 9D 9A         LD      A, (KeyPressed)
2368+ 912A FE 20            CP      32
2369+ 912C CA F9 92         JP      Z, MoveBlockToBottom
2370+ 912F FE 33            CP      51
2371+ 9131 CA F9 92         JP      Z, MoveBlockToBottom
2372+ 9134 FE 34            CP      52
2373+ 9136 CA 9A 91         JP      Z, MoveBlockLeft
2374+ 9139 FE 35            CP      53
2375+ 913B CA 49 92         JP      Z, BlockRotation
2376+ 913E FE 36            CP      54
2377+ 9140 CA E9 91         JP      Z, MoveBlockRight
2378+ 9143 FE 00            CP      0
2379+ 9145 28 0F            JR      Z, M2RoutineBlockMoveDown
2380+ 9147 18 22            JR      M2RoutineBlockMoveEnd
2381+ 9149              M2RoutineKeyOk:
2382+ 9149 3A 72 9A         LD      A, (SavedY)
2383+ 914C 57               LD      D, A
2384+ 914D 3A 73 9A         LD      A, (SavedX)           ; Increment the Y position
2385+ 9150 5F               LD      E, A           ; Get the X position
2386+ 9151 CD 61 8F         CALL    PlaceBlock
2387+ 9154
2388+ 9154 18 15            JR      M2RoutineBlockMoveEnd
2389+ 9156              M2RoutineBlockMoveDown:
2390+ 9156 AF               XOR     A
2391+ 9157 32 9A 9A         LD      (BlockLeftMoving), A
2392+ 915A 21 97 9A         LD      HL, BlockSpeed
2393+ 915D 3A 98 9A         LD      A, (BlockSpeedCounter)
2394+ 9160 BE               CP      (HL)
2395+ 9161 CC 5D 90         CALL    Z, MoveBlockDown
2396+ 9164 3A 98 9A         LD      A, (BlockSpeedCounter)
2397+ 9167 3C               INC     A
2398+ 9168 32 98 9A         LD      (BlockSpeedCounter), A
2399+ 916B              M2RoutineBlockMoveEnd:
2400+ 916B AF               XOR     A
2401+ 916C 32 9D 9A         LD      (KeyPressed), A
2402+ 916F CD E9 8C         CALL    PrintMatrix             ; Display the initial matrix
2403+ 9172              M2RoutineBlockMoveExit:
2404+ 9172 FD E1            POP     IY                                  ; Restore all the registers
2405+ 9174 E1               POP     HL
2406+ 9175 D1               POP     DE
2407+ 9176 C1               POP     BC
2408+ 9177 F1               POP     AF
2409+ 9178 D9               EXX
2410+ 9179 08               EX      AF,AF'
2411+ 917A DD E1            POP     IX
2412+ 917C E1               POP     HL
2413+ 917D D1               POP     DE
2414+ 917E C1               POP     BC
2415+ 917F F1               POP     AF
2416+ 9180 FB               EI                                      ; Enable interrupts
2417+ 9181 C9               RET                                     ; And return
2418+ 9182              BakcupMatrix:
2419+ 9182 21 E1 98         LD      HL, Matrix
2420+ 9185 11 A9 99         LD      DE, TempMatrix
2421+ 9188 01 C8 00         LD      BC, 200
2422+ 918B ED B0            LDIR
2423+ 918D C9               RET
2424+ 918E              RestoreMatrix:
2425+ 918E 21 A9 99         LD      HL, TempMatrix
2426+ 9191 11 E1 98         LD      DE, Matrix
2427+ 9194 01 C8 00         LD      BC, 200
2428+ 9197 ED B0            LDIR
2429+ 9199 C9               RET
2430+ 919A              MoveBlockLeft:
2431+ 919A 3A 71 9A         LD      A, (CurrentMatrixOrientation)
2432+ 919D FE 03            CP      ORIENT_WEST
2433+ 919F CA AA 91         JP      Z, MoveBlockLeftContinue
2434+ 91A2 FE 00            CP      ORIENT_NORTH
2435+ 91A4 CA AA 91         JP      Z, MoveBlockLeftContinue
2436+ 91A7 C3 F9 91         JP      MoveBlockRightContinue
2437+ 91AA              MoveBlockLeftContinue:
2438+ 91AA CD 82 91         CALL    BakcupMatrix
2439+ 91AD 3E 01            LD      A, 1
2440+ 91AF 32 9A 9A         LD      (BlockLeftMoving), A
2441+ 91B2 CD 20 93         CALL    RemoveCurrentBlock
2442+ 91B5 3A 73 9A         LD      A, (SavedX)
2443+ 91B8 FE 00            CP      0
2444+ 91BA CA 49 91         JP      Z, M2RoutineKeyOk
2445+ 91BD 3D               DEC     A
2446+ 91BE 5F               LD      E, A
2447+ 91BF 3A 72 9A         LD      A, (SavedY)
2448+ 91C2 57               LD      D, A
2449+ 91C3 CD A5 8E         CALL    UpdateCurrentBlockTable
2450+ 91C6 3A 73 9A         LD      A, (SavedX)
2451+ 91C9 3C               INC     A
2452+ 91CA 32 73 9A         LD      (SavedX), A
2453+ 91CD CD 53 8E         CALL    CheckBlocksCollision
2454+ 91D0 FE 00            CP      0
2455+ 91D2 CA DB 91         JP      Z, MoveBlockLeftContinueEnd
2456+ 91D5 CD 8E 91         CALL    RestoreMatrix
2457+ 91D8 C3 56 91         JP      M2RoutineBlockMoveDown
2458+ 91DB              MoveBlockLeftContinueEnd:
2459+ 91DB
2460+ 91DB AF               XOR     A
2461+ 91DC 32 9A 9A         LD      (BlockLeftMoving), A
2462+ 91DF 3A 73 9A         LD      A, (SavedX)
2463+ 91E2 3D               DEC     A
2464+ 91E3 32 73 9A         LD      (SavedX), A
2465+ 91E6 C3 49 91         JP      M2RoutineKeyOk
2466+ 91E9              MoveBlockRight:
2467+ 91E9 3A 71 9A         LD      A, (CurrentMatrixOrientation)
2468+ 91EC FE 03            CP      ORIENT_WEST
2469+ 91EE CA F9 91         JP      Z, MoveBlockRightContinue
2470+ 91F1 FE 00            CP      ORIENT_NORTH
2471+ 91F3 CA F9 91         JP      Z, MoveBlockRightContinue
2472+ 91F6 C3 AA 91         JP      MoveBlockLeftContinue
2473+ 91F9              MoveBlockRightContinue:
2474+ 91F9 CD 82 91         CALL    BakcupMatrix
2475+ 91FC 3E 02            LD      A, 2
2476+ 91FE 32 9A 9A         LD      (BlockLeftMoving), A
2477+ 9201 CD 20 93         CALL    RemoveCurrentBlock
2478+ 9204 3A 72 9A         LD      A, (SavedY)
2479+ 9207 57               LD      D, A
2480+ 9208 3A 73 9A         LD      A, (SavedX)           ; Increment the Y position
2481+ 920B 5F               LD      E, A           ; Get the X position
2482+ 920C CD A5 8E         CALL    UpdateCurrentBlockTable
2483+ 920F CD 53 8E         CALL    CheckBlocksCollision
2484+ 9212 FE 00            CP      0
2485+ 9214 CA 1D 92         JP      Z, MoveBlockRightContinueEnd
2486+ 9217 CD 8E 91         CALL    RestoreMatrix
2487+ 921A C3 56 91         JP      M2RoutineBlockMoveDown
2488+ 921D              MoveBlockRightContinueEnd:
2489+ 921D AF               XOR     A
2490+ 921E 32 9A 9A         LD      (BlockLeftMoving), A
2491+ 9221 3A 7A 9A         LD      A, (CurrentBlock)
2492+ 9224 47               LD      B, A
2493+ 9225 3A 79 9A         LD      A, (CurrentBlockRotation) ; A = rotazione (0..3)
2494+ 9228 68               LD      L, B                       ; L = ID salvato prima
2495+ 9229 CB 25            SLA     L
2496+ 922B CB 25            SLA     L                          ; L = ID*4
2497+ 922D 85               ADD     A, L                       ; A = (ID*4) + rot
2498+ 922E 6F               LD      L, A
2499+ 922F 26 00            LD      H, 0
2500+ 9231 11 AD 96         LD      DE, BLOCKS_WIDTH
2501+ 9234 19               ADD     HL, DE                      ; HL => DW con l'indirizzo giusto
2502+ 9235 46               LD      B, (HL)                     ; Current block width
2503+ 9236 3A 73 9A         LD      A, (SavedX)
2504+ 9239 80               ADD     B
2505+ 923A FE 0A            CP      10
2506+ 923C CA 49 91         JP      Z, M2RoutineKeyOk
2507+ 923F 3A 73 9A         LD      A, (SavedX)
2508+ 9242 3C               INC     A
2509+ 9243 32 73 9A         LD      (SavedX), A
2510+ 9246 C3 49 91         JP      M2RoutineKeyOk
2511+ 9249              BlockRotation:
2512+ 9249 CD 20 93         CALL    RemoveCurrentBlock
2513+ 924C 3A 73 9A         LD      A, (SavedX)
2514+ 924F                  ;CP      0
2515+ 924F                  ;JP      Z, M2RoutineKeyOk
2516+ 924F 5F               LD      E, A
2517+ 9250 3A 72 9A         LD      A, (SavedY)
2518+ 9253 57               LD      D, A
2519+ 9254 CD A5 8E         CALL    UpdateCurrentBlockTable
2520+ 9257 CD 53 8E         CALL    CheckBlocksCollision
2521+ 925A FE 01            CP      1
2522+ 925C CA 56 91         JP      Z, M2RoutineBlockMoveDown
2523+ 925F 3A 79 9A         LD      A,  (CurrentBlockRotation)
2524+ 9262 3C               INC     A
2525+ 9263 FE 04            CP      4
2526+ 9265 20 02            JR      NZ, BlockRotationContinue
2527+ 9267 3E 00            LD      A, 0
2528+ 9269              BlockRotationContinue:
2529+ 9269
2530+ 9269 57               LD      D, A
2531+ 926A 3A 73 9A         LD      A, (SavedX)
2532+ 926D FE 07            CP      7
2533+ 926F D2 D7 92         JP      NC, BlockRotationIBlock
2534+ 9272 FE 08            CP      8
2535+ 9274 DA A3 92         JP      C, BlockRotationContinueEnd
2536+ 9277              BlockRotationContinue1:
2537+ 9277 D5               PUSH    DE
2538+ 9278 3A 7A 9A         LD      A, (CurrentBlock)
2539+ 927B 47               LD      B, A
2540+ 927C
2541+ 927C 7A               LD      A, D
2542+ 927D
2543+ 927D 68               LD      L, B                       ; L = ID salvato prima
2544+ 927E CB 25            SLA     L
2545+ 9280 CB 25            SLA     L                          ; L = ID*4
2546+ 9282 85               ADD     A, L                       ; A = (ID*4) + rot
2547+ 9283 6F               LD      L, A
2548+ 9284 26 00            LD      H, 0
2549+ 9286 11 AD 96         LD      DE, BLOCKS_WIDTH
2550+ 9289 19               ADD     HL, DE                      ; HL => DW con l'indirizzo giusto
2551+ 928A 46               LD      B, (HL)                     ; Current block width
2552+ 928B 3A 73 9A         LD      A, (SavedX)
2553+ 928E 80               ADD     B
2554+ 928F D1               POP     DE
2555+ 9290 FE 0D            CP      13
2556+ 9292 38 09            JR      C, BlockRotationContinue2
2557+ 9294 FE 0C            CP      12
2558+ 9296 38 05            JR      C, BlockRotationContinue2
2559+ 9298 FE 0C            CP      12
2560+ 929A D2 49 91         JP      NC, M2RoutineKeyOk
2561+ 929D              BlockRotationContinue2:
2562+ 929D 3E 0A            LD      A, 10
2563+ 929F 90               SUB     B
2564+ 92A0 32 73 9A         LD      (SavedX), A
2565+ 92A3              BlockRotationContinueEnd:
2566+ 92A3 3A 79 9A         LD      A, (CurrentBlockRotation)
2567+ 92A6 5F               LD      E, A
2568+ 92A7 7A               LD      A, D
2569+ 92A8 32 79 9A         LD      (CurrentBlockRotation), A
2570+ 92AB D5               PUSH    DE
2571+ 92AC 3A 73 9A         LD      A, (SavedX)
2572+ 92AF 5F               LD      E, A
2573+ 92B0 3A 72 9A         LD      A, (SavedY)
2574+ 92B3 57               LD      D, A
2575+ 92B4 21 76 95         LD      HL, BLOCK_3x3
2576+ 92B7 22 75 9A         LD      (CurrentBlockTable), HL
2577+ 92BA 3A 7A 9A         LD      A, (CurrentBlock)
2578+ 92BD FE 00            CP      BLOCK_I
2579+ 92BF 20 06            JR      NZ, BlockRotationContinueEnd1
2580+ 92C1 21 89 95         LD      HL, BLOCK_4x4
2581+ 92C4 22 75 9A         LD      (CurrentBlockTable), HL
2582+ 92C7              BlockRotationContinueEnd1:
2583+ 92C7
2584+ 92C7 CD 53 8E         CALL    CheckBlocksCollision
2585+ 92CA D1               POP     DE
2586+ 92CB FE 01            CP      1
2587+ 92CD C2 49 91         JP      NZ, M2RoutineKeyOk
2588+ 92D0 7B               LD      A, E
2589+ 92D1 32 79 9A         LD      (CurrentBlockRotation), A
2590+ 92D4 C3 49 91         JP      M2RoutineKeyOk
2591+ 92D7              BlockRotationIBlock:
2592+ 92D7 3A 7A 9A         LD      A, (CurrentBlock)
2593+ 92DA FE 00            CP      BLOCK_I
2594+ 92DC 20 99            JR      NZ, BlockRotationContinue1
2595+ 92DE 7A               LD      A, D
2596+ 92DF FE 02            CP      2
2597+ 92E1 CA 77 92         JP      Z, BlockRotationContinue1
2598+ 92E4 FE 04            CP      4
2599+ 92E6 CA 77 92         JP      Z, BlockRotationContinue1
2600+ 92E9                  ;LD      A, (SavedY)
2601+ 92E9                  ;CP      16
2602+ 92E9                  ;JP      NC, BlockRotationContinueEnd
2603+ 92E9 3A 73 9A         LD      A, (SavedX)
2604+ 92EC FE 07            CP      7
2605+ 92EE DA 77 92         JP      C, BlockRotationContinue1
2606+ 92F1 3E 06            LD      A, 6
2607+ 92F3 32 73 9A         LD      (SavedX), A
2608+ 92F6 C3 77 92         JP      BlockRotationContinue1
2609+ 92F9              MoveBlockToBottom:
2610+ 92F9 3E 01            LD      A, 1
2611+ 92FB 32 BD 9A         LD      (MoveToBottomInAction), A
2612+ 92FE 3A 72 9A         LD      A, (SavedY)
2613+ 9301              MoveBlockToBottomLoop:
2614+ 9301 FE 13            CP      19
2615+ 9303 CA 0F 93         JP      Z, MoveBlockToBottomLoopEnd
2616+ 9306 F5               PUSH    AF
2617+ 9307 CD 5D 90         CALL    MoveBlockDown
2618+ 930A F1               POP     AF
2619+ 930B 3C               INC     A
2620+ 930C C3 01 93         JP      MoveBlockToBottomLoop
2621+ 930F              MoveBlockToBottomLoopEnd:
2622+ 930F 3E 01            LD      A, 1 ; Force all matrix repaint
2623+ 9311 32 9E 9A         LD      (ForcePrintMatrixRepaintAll), A
2624+ 9314 C3 6B 91         JP      M2RoutineBlockMoveEnd
2625+ 9317              ;--------------------------------------------------
2626+ 9317              ; Fill M2 table
2627+ 9317              ; INPUT: -
2628+ 9317              ; OUTPUT: -
2629+ 9317              ; MODIFY: AF, HL, DE, BC
2630+ 9317              ;--------------------------------------------------
2631+ 9317              FillM2Table:
2632+ 9317 06 81            LD      B, 129          ; 129*2 = 258 byte, uno in piu'
2633+ 9319              FillM2TableLoop:
2634+ 9319 73               LD      (HL), E         ; low byte
2635+ 931A 23               INC     HL
2636+ 931B 72               LD      (HL), D         ; high byte
2637+ 931C 23               INC     HL
2638+ 931D
2639+ 931D 10 FA            DJNZ    FillM2TableLoop
2640+ 931F C9               RET
2641+ 9320              ;--------------------------------------------------
2642+ 9320              ; Remove block from matrix (with collision check)
2643+ 9320              ; INPUT:
2644+ 9320              ;   A: ID del pezzo (0..6)
2645+ 9320              ;   D: Y di posizionamento (0..19)
2646+ 9320              ;   E: X di posizionamento (0..9)
2647+ 9320              ; OUTPUT:
2648+ 9320              ;   A: Collision (0=NO, 1=YES);
2649+ 9320              ; MODIFY: AF, BC, HL
2650+ 9320              ;--------------------------------------------------
2651+ 9320              RemoveCurrentBlock:
2652+ 9320 3A 7A 9A         LD      A, (CurrentBlock)       ; Ottieni il colore del pezzo
2653+ 9323 47               LD      B, A                ; Salvo ID in B
2654+ 9324 6F               LD      L, A                ; L = ID
2655+ 9325 3A 79 9A         LD      A, (CurrentBlockRotation) ; A = rotazione (0..3)
2656+ 9328 68               LD      L, B                       ; L = ID salvato prima
2657+ 9329 CB 25            SLA     L
2658+ 932B CB 25            SLA     L                          ; L = ID*4
2659+ 932D 85               ADD     A, L                       ; A = (ID*4) + rot
2660+ 932E 6F               LD      L, A
2661+ 932F 26 00            LD      H, 0
2662+ 9331 29               ADD     HL, HL                     ; HL *= 2 (ogni voce della tabella = 2 byte)
2663+ 9332 11 E5 96         LD      DE, BLOCKS_TABLE
2664+ 9335 19               ADD     HL, DE                     ; HL => DW con l'indirizzo giusto
2665+ 9336 5E               LD      E, (HL)
2666+ 9337 23               INC     HL
2667+ 9338 56               LD      D, (HL)
2668+ 9339 EB               EX      DE, HL
2669+ 933A              RemoveCurrentBlockLoop:
2670+ 933A 7E               LD      A, (HL)
2671+ 933B FE FF            CP      0xFF
2672+ 933D 28 1D            JR      Z, RemoveCurrentBlockDone
2673+ 933F 4F               LD      C, A        ; dy
2674+ 9340 23               INC     HL
2675+ 9341 7E               LD      A, (HL)     ; dx
2676+ 9342 23               INC     HL
2677+ 9343 47               LD      B, A
2678+ 9344 E5               PUSH    HL
2679+ 9345                  ; r = SavedY + dy
2680+ 9345 3A 72 9A         LD      A, (SavedY)
2681+ 9348 81               ADD     A, C
2682+ 9349 4F               LD      C, A
2683+ 934A
2684+ 934A                  ; c = SavedX + dx
2685+ 934A 3A 73 9A         LD      A, (SavedX)
2686+ 934D 80               ADD     A, B
2687+ 934E 47               LD      B, A
2688+ 934F
2689+ 934F                  ; offset = r*10 + c => HL
2690+ 934F CD 5E 93         CALL    ComputeOffset
2691+ 9352 11 E1 98         LD      DE, Matrix
2692+ 9355 19               ADD     HL, DE
2693+ 9356
2694+ 9356 3E 00            LD      A, COLOR_BLACK
2695+ 9358 77               LD      (HL), A
2696+ 9359 E1               POP     HL
2697+ 935A 18 DE            JR      RemoveCurrentBlockLoop
2698+ 935C
2699+ 935C              RemoveCurrentBlockDone:
2700+ 935C                  ; => Piazzato, CF=0
2701+ 935C AF               XOR     A
2702+ 935D C9               RET
2703+ 935E              ;--------------------------------------------------
2704+ 935E              ; Compute Place block offset
2705+ 935E              ; INPUT:
2706+ 935E              ;   B: Column
2707+ 935E              ;   C: Row
2708+ 935E              ; OUTPUT:
2709+ 935E              ;   HL: Row*10 + column
2710+ 935E              ; MODIFY: AF, BC, HL
2711+ 935E              ;--------------------------------------------------
2712+ 935E              ComputeOffset:
2713+ 935E 79                   LD   A, C
2714+ 935F C5                   PUSH  BC
2715+ 9360 CD 68 93             CALL MulByteBy10  ; => HL = row*10
2716+ 9363 C1                   POP  BC
2717+ 9364 78                   LD   A, B         ; col
2718+ 9365 85                   ADD  A, L         ; L += col
2719+ 9366 6F                   LD   L, A
2720+ 9367                      ; Se si generasse carry (non dovrebbe in 20x10),
2721+ 9367                      ; potrebbe influire su H, ma in Tetris reale (r<20, c<10) siamo tranquilli.
2722+ 9367 C9                   RET
2723+ 9368
2724+ 9368              ;--------------------------------------------------
2725+ 9368              ; Multiply A by 10
2726+ 9368              ; INPUT:
2727+ 9368              ;   A: Value 0..255
2728+ 9368              ; OUTPUT:
2729+ 9368              ;   HL: A * 10 (16 bit)
2730+ 9368              ;   MODIFY: AF, BC, HL
2731+ 9368              ;--------------------------------------------------
2732+ 9368              MulByteBy10:
2733+ 9368 47               LD   B, A         ; salviamo in B
2734+ 9369 26 00            LD   H, 0
2735+ 936B 68               LD   L, B         ; HL = val
2736+ 936C 29               ADD  HL, HL       ; *2
2737+ 936D 29               ADD  HL, HL       ; *4
2738+ 936E 29               ADD  HL, HL       ; *8
2739+ 936F 78               LD   A, B
2740+ 9370 87               ADD  A, A         ; *2
2741+ 9371 47               LD   B, A
2742+ 9372 7D               LD   A, L
2743+ 9373 80               ADD  A, B         ; HL.low + r*2 => r*8 + r*2 = r*10
2744+ 9374 6F               LD   L, A
2745+ 9375                  ; Se ci fosse carry (r>25), potremmo toccare H, ma in Tetris r<20
2746+ 9375 C9               RET
2747+ 9376
2748+ 9376              ;--------------------------------------------------
2749+ 9376              ; Randomize matrix blocks
2750+ 9376              ; INPUT: -
2751+ 9376              ; OUTPUT: -
2752+ 9376              ; MODIFY: HL, AF, BC
2753+ 9376              ;--------------------------------------------------
2754+ 9376              RandomizeMatrixBlocks:
2755+ 9376 21 07 98         LD   HL, ZXETRISMATRIX      ; Punto iniziale della matrice
2756+ 9379 01 AF 00         LD   BC, 175        ; Contatore di byte
2757+ 937C
2758+ 937C              NextByte:
2759+ 937C 7E               LD   A, (HL)                ; Legge il valore attuale
2760+ 937D B7               OR   A
2761+ 937E 28 10            JR   Z, SkipReplace         ; Salta se è zero
2762+ 9380
2763+ 9380                  ; Chiamata alla routine random
2764+ 9380 CD 98 93         CALL ChooseRandomBlock      ; A = 0-6
2765+ 9383 5F               LD   E, A
2766+ 9384 16 00            LD   D, 0
2767+ 9386 DD 21 B6 98      LD   IX, COLORS_TABLE
2768+ 938A DD 19            ADD  IX, DE
2769+ 938C DD 7E 00         LD   A, (IX)                ; A = attributo colore
2770+ 938F 77               LD   (HL), A                ; Scrive il nuovo valore nella matrice
2771+ 9390
2772+ 9390              SkipReplace:
2773+ 9390 23               INC  HL                     ; Prossimo byte
2774+ 9391 0B               DEC  BC
2775+ 9392 78               LD   A, B
2776+ 9393 B1               OR   C
2777+ 9394 C2 7C 93         JP   NZ, NextByte           ; Finché BC ≠ 0, continua
2778+ 9397
2779+ 9397 C9               RET
2780+ 9398
2781+ 9398              ;------------------------------------------------------------------------
2782+ 9398              ; Choose random block
2783+ 9398              ; INPUT: -
2784+ 9398              ; OUTPUT:
2785+ 9398              ;   A: Block ID (0..6)
2786+ 9398              ; MODIFY: -
2787+ 9398              ;------------------------------------------------------------------------
2788+ 9398              ChooseRandomBlock:
2789+ 9398 3A 8E 9A         LD      A, (Seed)
2790+ 939B C6 11            ADD     A, 17
2791+ 939D 32 8E 9A         LD      (Seed), A
2792+ 93A0              ChooseRandomBlockLoop:
2793+ 93A0 FE 07            CP      7                           ; confronta A con 7
2794+ 93A2 38 04            JR      C, ChooseRandomBlockDone    ; se A < 7, abbiamo finito
2795+ 93A4 D6 07            SUB     7                           ; altrimenti sottrai 7
2796+ 93A6 18 F8            JR      ChooseRandomBlockLoop       ; e ripeti
2797+ 93A8
2798+ 93A8              ChooseRandomBlockDone:
2799+ 93A8                  ;LD      A, 0 ; RIMUOVI DOPO TEST    FP_USER
2800+ 93A8                      ; Al termine A è compreso tra 0 e 6
2801+ 93A8 32 A2 9A         LD      (NextBlock), A       ; Salva il pezzo scelto (ora è il colore)
2802+ 93AB C9               RET
2803+ 93AC              ;------------------------------------------------------------------------
2804+ 93AC              ; Choose random orientation
2805+ 93AC              ; INPUT:
2806+ 93AC              ;   B: Max value
2807+ 93AC              ; OUTPUT:
2808+ 93AC              ;   A: Result
2809+ 93AC              ; MODIFY: -
2810+ 93AC              ;------------------------------------------------------------------------
2811+ 93AC              GetRandomValue:
2812+ 93AC 3A 8E 9A         LD      A, (Seed)
2813+ 93AF C6 11            ADD     A, 17
2814+ 93B1 32 8E 9A         LD      (Seed), A
2815+ 93B4              GetRandomValueLoop:
2816+ 93B4 B8               CP      B
2817+ 93B5 38 03            JR      C, GetRandomValueDone
2818+ 93B7 90               SUB     B
2819+ 93B8 18 FA            JR      GetRandomValueLoop
2820+ 93BA
2821+ 93BA              GetRandomValueDone:
2822+ 93BA C9               RET
2823+ 93BB              ;------------------------------------------------------------------------
2824+ 93BB              ; Get block color
2825+ 93BB              ; INPUT:
2826+ 93BB              ;   A: Block ID (0..6)
2827+ 93BB              ; OUTPUT:
2828+ 93BB              ;   A: Block color
2829+ 93BB              ; MODIFY: -
2830+ 93BB              ;------------------------------------------------------------------------
2831+ 93BB              GetBlockColor:
2832+ 93BB FE 00            CP      0
2833+ 93BD 28 19            JR      Z, .SetBlue
2834+ 93BF FE 01            CP      1
2835+ 93C1 28 18            JR      Z, .SetYellow
2836+ 93C3 FE 02            CP      2
2837+ 93C5 28 17            JR      Z, .SetRed
2838+ 93C7 FE 03            CP      3
2839+ 93C9 28 16            JR      Z, .SetCyan
2840+ 93CB FE 04            CP      4
2841+ 93CD 28 15            JR      Z, .SetMagenta
2842+ 93CF FE 05            CP      5
2843+ 93D1 28 14            JR      Z, .SetWhite
2844+ 93D3 FE 06            CP      6
2845+ 93D5 28 13            JR      Z, .SetGreen
2846+ 93D7 C9               RET
2847+ 93D8
2848+ 93D8              .SetBlue:
2849+ 93D8 3E 08            LD      A, COLOR_BLUE
2850+ 93DA C9               RET
2851+ 93DB              .SetYellow:
2852+ 93DB 3E 30            LD      A, COLOR_YELLOW
2853+ 93DD C9               RET
2854+ 93DE              .SetRed:
2855+ 93DE 3E 10            LD      A, COLOR_RED
2856+ 93E0 C9               RET
2857+ 93E1              .SetCyan:
2858+ 93E1 3E 28            LD      A, COLOR_CYAN
2859+ 93E3 C9               RET
2860+ 93E4              .SetMagenta:
2861+ 93E4 3E 18            LD      A, COLOR_MAGENTA
2862+ 93E6 C9               RET
2863+ 93E7              .SetWhite:
2864+ 93E7 3E 38            LD      A, COLOR_WHITE
2865+ 93E9 C9               RET
2866+ 93EA              .SetGreen:
2867+ 93EA 3E 20            LD      A, COLOR_GREEN
2868+ 93EC C9               RET
2869+ 93ED
2870+ 93ED              ;------------------------------------------------------------------------
2871+ 93ED              ; Set speed by level
2872+ 93ED              ; INPUT: -
2873+ 93ED              ; OUTPUT: -
2874+ 93ED              ; MODIFY: HL, AF
2875+ 93ED              ;------------------------------------------------------------------------
2876+ 93ED              SetSpeedByLevel:
2877+ 93ED 3A 96 9A         LD      A, (Level)
2878+ 93F0 FE 0A            CP      10
2879+ 93F2 C8               RET     Z
2880+ 93F3 47               LD      B, A
2881+ 93F4 3E 0A            LD      A, 10
2882+ 93F6 90               SUB     B
2883+ 93F7 32 97 9A         LD      (BlockSpeed), A
2884+ 93FA AF               XOR     A
2885+ 93FB 32 C9 9A         LD      (LevelBlocksCounter), A
2886+ 93FE C9               RET
2887+ 93FF              ;------------------------------------------------------------------------
2888+ 93FF              ; Change matrix the orientation
2889+ 93FF              ; INPUT: -
2890+ 93FF              ; OUTPUT: -
2891+ 93FF              ; MODIFY: HL, AF
2892+ 93FF              ;------------------------------------------------------------------------
2893+ 93FF              ChangeOrientation:
2894+ 93FF 06 03            LD      B, 3
2895+ 9401 CD AC 93         CALL    GetRandomValue
2896+ 9404 47               LD      B, A
2897+ 9405 3A 71 9A         LD      A, (CurrentMatrixOrientation)
2898+ 9408 B8               CP      B
2899+ 9409 C8               RET     Z
2900+ 940A 78               LD      A, B
2901+ 940B 32 71 9A         LD      (CurrentMatrixOrientation), A
2902+ 940E CD 86 8C         CALL    ShowGameField
2903+ 9411 3E 01            LD      A, 1
2904+ 9413 32 9E 9A         LD      (ForcePrintMatrixRepaintAll), A
2905+ 9416 CD E9 8C         CALL    PrintMatrix
2906+ 9419 CD B9 85         CALL    DisplayScoreUpdate
2907+ 941C 3A A2 9A         LD      A, (NextBlock)
2908+ 941F CD 9F 88         CALL    UpdateNextBlockInfo
2909+ 9422 CD 1C 88         CALL    SetNextBoxPosition
2910+ 9425 CD FC 88         CALL    ShowNextBlockOnBox
2911+ 9428 C9               RET
2912+ 9429              ;------------------------------------------------------------------------
2913+ 9429              ; Place block at top
2914+ 9429              ; INPUT: -
2915+ 9429              ; OUTPUT: -
2916+ 9429              ; MODIFY: DE, HL, AF
2917+ 9429              ;------------------------------------------------------------------------
2918+ 9429              PlaceBlockAtTop:
2919+ 9429
2920+ 9429 3A C9 9A         LD      A, (LevelBlocksCounter)
2921+ 942C FE 05            CP      5
2922+ 942E CC FF 93         CALL    Z, ChangeOrientation
2923+ 9431 FE 0F            CP      15
2924+ 9433 CC FF 93         CALL    Z, ChangeOrientation
2925+ 9436 FE 19            CP      25
2926+ 9438 CC FF 93         CALL    Z, ChangeOrientation
2927+ 943B FE 23            CP      35
2928+ 943D CC FF 93         CALL    Z, ChangeOrientation
2929+ 9440 FE 2D            CP      45
2930+ 9442 CC FF 93         CALL    Z, ChangeOrientation
2931+ 9445 FE 37            CP      55
2932+ 9447 CC FF 93         CALL    Z, ChangeOrientation
2933+ 944A FE 41            CP      65
2934+ 944C CC FF 93         CALL    Z, ChangeOrientation
2935+ 944F FE 4B            CP      75
2936+ 9451 CC FF 93         CALL    Z, ChangeOrientation
2937+ 9454 FE 55            CP      85
2938+ 9456 CC FF 93         CALL    Z, ChangeOrientation
2939+ 9459 FE 5F            CP      95
2940+ 945B CC FF 93         CALL    Z, ChangeOrientation
2941+ 945E AF               XOR     A
2942+ 945F 32 79 9A         LD      (CurrentBlockRotation), A
2943+ 9462 32 BD 9A         LD      (MoveToBottomInAction), A
2944+ 9465 21 E1 98         LD      HL, Matrix              ; Inizia dalla cima della matrice
2945+ 9468 CD A5 94         CALL    GetBlockXStartPosition  ; Ottieni la posizione iniziale del pezzo
2946+ 946B 5F               LD      E, A                    ; Riga iniziale
2947+ 946C 16 00            LD      D, 0                    ; First row
2948+ 946E FB               EI
2949+ 946F CD 61 8F         CALL    PlaceBlock              ; Disegna il pezzo nella matrice
2950+ 9472 F3               DI
2951+ 9473                  ;CALL    PrintMatrix             ; Mostra la matrice
2952+ 9473 AF               XOR     A                       ; A = 0
2953+ 9474 32 B6 9A         LD      (ShowNextBlock), A      ; Mostra il pezzo successivo
2954+ 9477 3A C9 9A         LD      A, (LevelBlocksCounter)
2955+ 947A 3C               INC     A
2956+ 947B FE 64            CP      100                     ; Check for level up
2957+ 947D 20 16            JR      NZ, PlaceBlockAtTopEnd
2958+ 947F 3A CC 9A         LD      A, (SelectedCanGrow)
2959+ 9482 FE 01            CP      1
2960+ 9484 20 0E            JR      NZ, PlaceBlockAtTopContinue
2961+ 9486 3A 96 9A         LD      A, (Level)
2962+ 9489 FE 0A            CP      10
2963+ 948B 28 07            JR      Z, PlaceBlockAtTopContinue
2964+ 948D 3C               INC     A
2965+ 948E 32 96 9A         LD      (Level), A
2966+ 9491 CD ED 93         CALL    SetSpeedByLevel
2967+ 9494              PlaceBlockAtTopContinue:
2968+ 9494 AF               XOR     A
2969+ 9495              PlaceBlockAtTopEnd:
2970+ 9495 32 C9 9A         LD      (LevelBlocksCounter), A  ; Incrementa il contatore dei pezzi
2971+ 9498 CD B9 85         CALL    DisplayScoreUpdate
2972+ 949B 3A BF 9A         LD      A, (PlacedBlocks)
2973+ 949E FE 00            CP      0
2974+ 94A0 C8               RET     Z
2975+ 94A1 CD 29 84         CALL    BlockLandSound
2976+ 94A4 C9               RET
2977+ 94A5              ;------------------------------------------------------------------------
2978+ 94A5              ; Get new block start position
2979+ 94A5              ; INPUT:
2980+ 94A5              ;   A: Block ID
2981+ 94A5              ; OUTPUT:
2982+ 94A5              ;   A: Block start position in the matrix
2983+ 94A5              ; MODIFY: -
2984+ 94A5              ;------------------------------------------------------------------------
2985+ 94A5              GetBlockXStartPosition:
2986+ 94A5 FE 00            CP      BLOCK_I
2987+ 94A7 CA C9 94         JP      Z, .PosI
2988+ 94AA FE 01            CP      BLOCK_O
2989+ 94AC CA CC 94         JP      Z, .PosO
2990+ 94AF FE 03            CP      BLOCK_S
2991+ 94B1 CA D2 94         JP      Z, .PosS
2992+ 94B4 FE 02            CP      BLOCK_T
2993+ 94B6 CA CF 94         JP      Z, .PosT
2994+ 94B9 FE 04            CP      BLOCK_Z
2995+ 94BB CA D5 94         JP      Z, .PosZ
2996+ 94BE FE 06            CP      BLOCK_J
2997+ 94C0 CA D8 94         JP      Z, .PosJ
2998+ 94C3 FE 05            CP      BLOCK_L
2999+ 94C5 CA DB 94         JP      Z, .PosL
3000+ 94C8 C9               RET
3001+ 94C9
3002+ 94C9              .PosI:
3003+ 94C9 3E 03            LD      A, 3
3004+ 94CB C9               RET
3005+ 94CC
3006+ 94CC              .PosO:
3007+ 94CC 3E 04            LD      A, 4
3008+ 94CE C9               RET
3009+ 94CF
3010+ 94CF              .PosT:
3011+ 94CF 3E 00            LD      A, 0
3012+ 94D1 C9               RET
3013+ 94D2              .PosS:
3014+ 94D2 3E 03            LD      A, 3
3015+ 94D4 C9               RET
3016+ 94D5              .PosZ:
3017+ 94D5 3E 03            LD      A, 3
3018+ 94D7 C9               RET
3019+ 94D8
3020+ 94D8              .PosJ:
3021+ 94D8 3E 04            LD      A, 4
3022+ 94DA C9               RET
3023+ 94DB
3024+ 94DB              .PosL:
3025+ 94DB 3E 04            LD      A, 4
3026+ 94DD C9               RET
3027+ 94DE              ;------------------------------------------------------------------------
3028+ 94DE              ; Read the keyboard
3029+ 94DE              ; INPUT: -
3030+ 94DE              ; OUTPUT:
3031+ 94DE              ;   A: ASCII code of key pressed
3032+ 94DE              ; MODIFY: HL, BC, AF
3033+ 94DE              ;------------------------------------------------------------------------
3034+ 94DE              ReadKeyboard:
3035+ 94DE 21 46 95         LD  HL,KEYBOARD_MAP     ; Point HL at the keyboard list
3036+ 94E1 16 08            LD  D, 8                ; This is the number of ports (rows) to check
3037+ 94E3 0E FE            LD  C, #FE              ; C is always FEh for reading keyboard ports
3038+ 94E5              ReadKeyboard0:
3039+ 94E5 46               LD  B, (HL)             ; Get the keyboard port address from table
3040+ 94E6 23               INC HL                  ; Increment to list of keys
3041+ 94E7 ED 78            IN  A, (C)              ; Read the row of keys in
3042+ 94E9 E6 1F            AND #1F                 ; We are only interested in the first five bits
3043+ 94EB 1E 05            LD  E, 5                ; This is the number of keys in the row
3044+ 94ED              ReadKeyboard1:
3045+ 94ED CB 3F            SRL A                   ; Shift A right; bit 0 sets carry bit
3046+ 94EF 30 0C            JR  NC, ReadKeyboard2   ; If the bit is 0, we've found our key
3047+ 94F1 23               INC HL                  ; Go to next table address
3048+ 94F2 1D               DEC E                   ; Decrement key loop counter
3049+ 94F3 20 F8            JR  NZ, ReadKeyboard1   ; Loop around until this row finished
3050+ 94F5 15               DEC D                   ; Decrement row loop counter
3051+ 94F6 20 ED            JR  NZ, ReadKeyboard0   ; Loop around until we are done
3052+ 94F8 A7               AND A                   ; Clear A (no key found)
3053+ 94F9 32 9C 9A         LD  (LastKeyPressed), A
3054+ 94FC C9               RET
3055+ 94FD              ReadKeyboard2:
3056+ 94FD 7E               LD  A, (HL)             ; We've found a key at this point; fetch the character code!
3057+ 94FE 47               LD  B, A
3058+ 94FF 3A 9C 9A         LD  A,(LastKeyPressed)
3059+ 9502 FE 00            CP  0
3060+ 9504 28 05            JR  Z, ReadKeyboard3    ; If no key pressed before, skip the check
3061+ 9506 B8               CP  B                   ; Check if the key is the same as the last one pressed
3062+ 9507 20 02            JR  NZ, ReadKeyboard3    ; If it is, skip the rest of this routine
3063+ 9509 AF               XOR A               ; If it is the same, clear A (no key found)
3064+ 950A C9               RET
3065+ 950B              ReadKeyboard3:
3066+ 950B 78               LD  A, B
3067+ 950C 32 9C 9A         LD  (LastKeyPressed), A
3068+ 950F 32 9D 9A         LD  (KeyPressed), A
3069+ 9512 C9               RET
3070+ 9513              ;--------------------------------------------------
3071+ 9513              ; Check and mark completed rows
3072+ 9513              ; INPUT: -
3073+ 9513              ; OUTPUT: -
3074+ 9513              ; MODIFY: AF, BC, DE, HL
3075+ 9513              ;--------------------------------------------------
3076+ 9513              CheckAndMarkCompletedRows:
3077+ 9513 AF               XOR     A                ; A = 0 (nessuna riga completata)
3078+ 9514 32 9F 9A         LD      (CompletedRows), A
3079+ 9517 21 E1 98         LD      HL, Matrix          ; HL punta all'inizio della matrice
3080+ 951A 06 14            LD      B, 20               ; Contatore righe (20 righe)
3081+ 951C              CheckRowLoop:
3082+ 951C E5               PUSH    HL                  ; Salva HL per ripristinarlo dopo
3083+ 951D 0E 0A            LD      C, 10               ; Contatore colonne (10 colonne)
3084+ 951F 3E 00            LD      A, 0                ; Flag per riga completata (A=0: completata, A!=0: non completata)
3085+ 9521              CheckColumnLoop:
3086+ 9521 56               LD      D, (HL)             ; Legge il byte corrente
3087+ 9522 BA               CP      D                   ; Confronta con 0
3088+ 9523 28 18            JR      Z, RowNotCompleted  ; Se un byte è 0, la riga non è completata
3089+ 9525 23               INC     HL                  ; Passa al prossimo byte
3090+ 9526 0D               DEC     C                   ; Decrementa il contatore colonne
3091+ 9527 20 F8            JR      NZ, CheckColumnLoop ; Continua a controllare la riga
3092+ 9529                  ; Se tutte le colonne sono diverse da 0, marca la riga come completata
3093+ 9529 E1               POP     HL                  ; Ripristina HL all'inizio della riga
3094+ 952A 0E 0A            LD      C, 10               ; Reset contatore colonne
3095+ 952C 3E FF            LD      A, 0XFF ; Valore per riga completata
3096+ 952E              MarkRowCompleted:
3097+ 952E 77               LD      (HL), A             ; Imposta il byte corrente a CHAR_ROW_COMPLETED
3098+ 952F 23               INC     HL                  ; Passa al prossimo byte
3099+ 9530 0D               DEC     C                   ; Decrementa il contatore colonne
3100+ 9531 20 FB            JR      NZ, MarkRowCompleted ; Continua a marcare la riga
3101+ 9533 3A 9F 9A         LD      A, (CompletedRows)     ; A = valore corrente di CompletedRows
3102+ 9536 C6 01            ADD     1                   ; Incrementa il contatore righe completate
3103+ 9538 32 9F 9A         LD      (CompletedRows), A  ; Marca la riga come completata
3104+ 953B 18 05            JR      NextTitleRow             ; Passa alla riga successiva
3105+ 953D              RowNotCompleted:
3106+ 953D E1               POP     HL                  ; Ripristina HL all'inizio della riga
3107+ 953E 11 0A 00         LD      DE, 10              ; DE = 10 (numero di colonne per riga)
3108+ 9541 19               ADD     HL, DE              ; HL = HL + DE (salta alla prossima riga)
3109+ 9542              NextTitleRow:
3110+ 9542 05               DEC     B                   ; Decrementa il contatore righe
3111+ 9543 20 D7            JR      NZ, CheckRowLoop    ; Continua a controllare le righe
3112+ 9545 C9               RET                         ; Fine della subroutine
3113+ 9546              ;----------------------------------------------------------------------
3114+ 9546              ;  Constants
3115+ 9546              ;----------------------------------------------------------------------
3116+ 9546              MATRIX       EQU 8000h         ; Indirizzo base dell’area 20x10 (200 bytes)
3117+ 9546              ROWS         EQU 20
3118+ 9546              COLS         EQU 10
3119+ 9546              SIZE         EQU ROWS * COLS    ; 200
3120+ 9546 FE 23 5A 58  KEYBOARD_MAP:                   db #FE,"#","Z","X","C","V"
3120+ 954A 43 56
3121+ 954C FD 41 53 44                                  db #FD,"A","S","D","F","G"
3121+ 9550 46 47
3122+ 9552 FB 51 57 45                                  db #FB,"Q","W","E","R","T"
3122+ 9556 52 54
3123+ 9558 F7 31 32 33                                  db #F7,"1","2","3","4","5"
3123+ 955C 34 35
3124+ 955E EF 30 39 38                                  db #EF,"0","9","8","7","6"
3124+ 9562 37 36
3125+ 9564 DF 50 4F 49                                  db #DF,"P","O","I","U","Y"
3125+ 9568 55 59
3126+ 956A BF 23 4C 4B                                  db #BF,"#","L","K","J","H"
3126+ 956E 4A 48
3127+ 9570 7F 20 23 4D                                  db #7F," ","#","M","N","B"
3127+ 9574 4E 42
3128+ 9576              BLOCK_T:        EQU 2
3129+ 9576              BLOCK_I:        EQU 0
3130+ 9576              BLOCK_O:        EQU 1
3131+ 9576              BLOCK_S:        EQU 3
3132+ 9576              BLOCK_Z:        EQU 4
3133+ 9576              BLOCK_L:        EQU 5
3134+ 9576              BLOCK_J:        EQU 6
3135+ 9576
3136+ 9576              ORIENT_NORTH:   EQU 0   ; Matrix as is (20 high, 10 wide)
3137+ 9576              ORIENT_SOUTH:   EQU 1   ; Upside down (20 high, 10 wide)
3138+ 9576              ORIENT_EAST:    EQU 2   ; Rotated 90° right (10 high, 20 wide)
3139+ 9576              ORIENT_WEST:    EQU 3   ; Rotated 90° left  (10 high, 20 wide)
3140+ 9576              BLOCK_3x3:
3141+ 9576 00 00            DEFB    0,0
3142+ 9578 00 01            DEFB    0,1
3143+ 957A 00 02            DEFB    0,2
3144+ 957C 01 00            DEFB    1,0
3145+ 957E 01 01            DEFB    1,1
3146+ 9580 01 02            DEFB    1,2
3147+ 9582 02 00            DEFB    2,0
3148+ 9584 02 01            DEFB    2,1
3149+ 9586 02 02            DEFB    2,2
3150+ 9588 FF               DEFB    0xFF
3151+ 9589              BLOCK_4x4:
3152+ 9589 00 00            DEFB    0,0
3153+ 958B 00 01            DEFB    0,1
3154+ 958D 00 02            DEFB    0,2
3155+ 958F 00 03            DEFB    0,3
3156+ 9591 01 00            DEFB    1,0
3157+ 9593 01 01            DEFB    1,1
3158+ 9595 01 02            DEFB    1,2
3159+ 9597 01 03            DEFB    1,3
3160+ 9599 02 00            DEFB    2,0
3161+ 959B 02 01            DEFB    2,1
3162+ 959D 02 02            DEFB    2,2
3163+ 959F 02 03            DEFB    2,3
3164+ 95A1 03 00            DEFB    3,0
3165+ 95A3 03 01            DEFB    3,1
3166+ 95A5 03 02            DEFB    3,2
3167+ 95A7 03 03            DEFB    3,3
3168+ 95A9 FF               DEFB    0xFF
3169+ 95AA              BLOCK_I_DEF_0:
3170+ 95AA 00 00            DEFB    0, 0
3171+ 95AC 00 01            DEFB    0, 1
3172+ 95AE 00 02            DEFB    0, 2
3173+ 95B0 00 03            DEFB    0, 3
3174+ 95B2 FF               DEFB    0xFF
3175+ 95B3              BLOCK_I_DEF_90:
3176+ 95B3 00 00            DEFB    0,0
3177+ 95B5 01 00            DEFB    1,0
3178+ 95B7 02 00            DEFB    2,0
3179+ 95B9 03 00            DEFB    3,0
3180+ 95BB FF               DEFB    0xFF
3181+ 95BC              BLOCK_I_DEF_180:
3182+ 95BC 00 00            DEFB    0,0
3183+ 95BE 00 01            DEFB    0,1
3184+ 95C0 00 02            DEFB    0,2
3185+ 95C2 00 03            DEFB    0,3
3186+ 95C4 FF               DEFB    0xFF
3187+ 95C5              BLOCK_I_DEF_270:
3188+ 95C5 00 00            DEFB    0,0
3189+ 95C7 01 00            DEFB    1,0
3190+ 95C9 02 00            DEFB    2,0
3191+ 95CB 03 00            DEFB    3,0
3192+ 95CD FF               DEFB    0xFF
3193+ 95CE              BLOCK_O_DEF_0:
3194+ 95CE 00 00            DEFB    0,0
3195+ 95D0 00 01            DEFB    0,1
3196+ 95D2 01 00            DEFB    1,0
3197+ 95D4 01 01            DEFB    1,1
3198+ 95D6 FF               DEFB    0xFF
3199+ 95D7              BLOCK_O_DEF_90:
3200+ 95D7 00 00            DEFB    0,0
3201+ 95D9 00 01            DEFB    0,1
3202+ 95DB 01 00            DEFB    1,0
3203+ 95DD 01 01            DEFB    1,1
3204+ 95DF FF               DEFB    0xFF
3205+ 95E0              BLOCK_O_DEF_180:
3206+ 95E0 00 00            DEFB    0,0
3207+ 95E2 00 01            DEFB    0,1
3208+ 95E4 01 00            DEFB    1,0
3209+ 95E6 01 01            DEFB    1,1
3210+ 95E8 FF               DEFB    0xFF
3211+ 95E9              BLOCK_O_DEF_270:
3212+ 95E9 00 00            DEFB    0,0
3213+ 95EB 00 01            DEFB    0,1
3214+ 95ED 01 00            DEFB    1,0
3215+ 95EF 01 01            DEFB    1,1
3216+ 95F1 FF               DEFB    0xFF
3217+ 95F2              BLOCK_T_DEF_0:
3218+ 95F2 00 00            DEFB    0, 0
3219+ 95F4 00 01            DEFB    0, 1
3220+ 95F6 00 02            DEFB    0, 2
3221+ 95F8 01 01            DEFB    1, 1
3222+ 95FA FF               DEFB    0xFF
3223+ 95FB              BLOCK_T_DEF_90:
3224+ 95FB 00 01            DEFB    0,1
3225+ 95FD 01 00            DEFB    1,0
3226+ 95FF 01 01            DEFB    1,1
3227+ 9601 02 01            DEFB    2,1
3228+ 9603 FF               DEFB    0xFF
3229+ 9604              BLOCK_T_DEF_180:
3230+ 9604 00 01            DEFB    0,1
3231+ 9606 01 00            DEFB    1,0
3232+ 9608 01 01            DEFB    1,1
3233+ 960A 01 02            DEFB    1,2
3234+ 960C FF               DEFB    0xFF
3235+ 960D              BLOCK_T_DEF_270:
3236+ 960D 00 00            DEFB    0,0
3237+ 960F 01 00            DEFB    1,0
3238+ 9611 01 01            DEFB    1,1
3239+ 9613 02 00            DEFB    2,0
3240+ 9615 FF               DEFB    0xFF
3241+ 9616              BLOCK_S_DEF_0:
3242+ 9616 00 01            DEFB    0, 1
3243+ 9618 00 02            DEFB    0, 2
3244+ 961A 01 00            DEFB    1, 0
3245+ 961C 01 01            DEFB    1, 1
3246+ 961E FF               DEFB    0xFF
3247+ 961F              BLOCK_S_DEF_90:
3248+ 961F 00 00            DEFB    0,0
3249+ 9621 01 00            DEFB    1,0
3250+ 9623 01 01            DEFB    1,1
3251+ 9625 02 01            DEFB    2,1
3252+ 9627 FF               DEFB    0xFF
3253+ 9628              BLOCK_S_DEF_180:
3254+ 9628 00 01            DEFB    0,1
3255+ 962A 00 02            DEFB    0,2
3256+ 962C 01 00            DEFB    1,0
3257+ 962E 01 01            DEFB    1,1
3258+ 9630 FF               DEFB    0xFF
3259+ 9631              BLOCK_S_DEF_270:
3260+ 9631 00 00            DEFB    0,0
3261+ 9633 01 00            DEFB    1,0
3262+ 9635 01 01            DEFB    1,1
3263+ 9637 02 01            DEFB    2,1
3264+ 9639 FF               DEFB    0xFF
3265+ 963A              BLOCK_Z_DEF_0:
3266+ 963A 00 00            DEFB    0, 0
3267+ 963C 00 01            DEFB    0, 1
3268+ 963E 01 01            DEFB    1, 1
3269+ 9640 01 02            DEFB    1, 2
3270+ 9642 FF               DEFB    0xFF
3271+ 9643              BLOCK_Z_DEF_90:
3272+ 9643 00 01            DEFB    0,1
3273+ 9645 01 00            DEFB    1,0
3274+ 9647 01 01            DEFB    1,1
3275+ 9649 02 00            DEFB    2,0
3276+ 964B FF               DEFB    0xFF
3277+ 964C              BLOCK_Z_DEF_180:
3278+ 964C 00 00            DEFB    0,0
3279+ 964E 00 01            DEFB    0,1
3280+ 9650 01 01            DEFB    1,1
3281+ 9652 01 02            DEFB    1,2
3282+ 9654 FF               DEFB    0xFF
3283+ 9655              BLOCK_Z_DEF_270:
3284+ 9655 00 01            DEFB    0,1
3285+ 9657 01 00            DEFB    1,0
3286+ 9659 01 01            DEFB    1,1
3287+ 965B 02 00            DEFB    2,0
3288+ 965D FF               DEFB    0xFF
3289+ 965E              BLOCK_J_DEF_0:
3290+ 965E 00 00            DEFB    0, 0
3291+ 9660 00 01            DEFB    0, 1
3292+ 9662 00 02            DEFB    0, 2
3293+ 9664 01 00            DEFB    1, 0
3294+ 9666 FF               DEFB    0xFF
3295+ 9667              BLOCK_J_DEF_90:
3296+ 9667 00 00            DEFB    0,0
3297+ 9669 00 01            DEFB    0,1
3298+ 966B 01 01            DEFB    1,1
3299+ 966D 02 01            DEFB    2,1
3300+ 966F FF               DEFB    0xFF
3301+ 9670              BLOCK_J_DEF_180:
3302+ 9670 00 02            DEFB    0,2
3303+ 9672 01 00            DEFB    1,0
3304+ 9674 01 01            DEFB    1,1
3305+ 9676 01 02            DEFB    1,2
3306+ 9678 FF               DEFB    0xFF
3307+ 9679              BLOCK_J_DEF_270:
3308+ 9679 00 00            DEFB    0,0
3309+ 967B 01 00            DEFB    1,0
3310+ 967D 02 00            DEFB    2,0
3311+ 967F 02 01            DEFB    2,1
3312+ 9681 FF               DEFB    0xFF
3313+ 9682              BLOCK_L_DEF_0:
3314+ 9682 00 00            DEFB    0, 0
3315+ 9684 00 01            DEFB    0, 1
3316+ 9686 00 02            DEFB    0, 2
3317+ 9688 01 02            DEFB    1, 2
3318+ 968A FF               DEFB    0xFF
3319+ 968B              BLOCK_L_DEF_90:
3320+ 968B 00 01            DEFB    0,1
3321+ 968D 01 01            DEFB    1,1
3322+ 968F 02 00            DEFB    2,0
3323+ 9691 02 01            DEFB    2,1
3324+ 9693 FF               DEFB    0xFF
3325+ 9694              BLOCK_L_DEF_180:
3326+ 9694 00 00            DEFB    0,0
3327+ 9696 01 00            DEFB    1,0
3328+ 9698 01 01            DEFB    1,1
3329+ 969A 01 02            DEFB    1,2
3330+ 969C FF               DEFB    0xFF
3331+ 969D              BLOCK_L_DEF_270:
3332+ 969D 00 00            DEFB    0,0
3333+ 969F 00 01            DEFB    0,1
3334+ 96A1 01 00            DEFB    1,0
3335+ 96A3 02 00            DEFB    2,0
3336+ 96A5 FF               DEFB    0xFF
3337+ 96A6              BLOCK_COLORS:
3338+ 96A6 08               DEFB    COLOR_BLUE      ; ID=0
3339+ 96A7 30               DEFB    COLOR_YELLOW    ; ID=1
3340+ 96A8 28               DEFB    COLOR_CYAN      ; ID=2
3341+ 96A9 20               DEFB    COLOR_GREEN     ; ID=3
3342+ 96AA 10               DEFB    COLOR_RED       ; ID=4
3343+ 96AB 18               DEFB    COLOR_MAGENTA   ; ID=5
3344+ 96AC 38               DEFB    COLOR_WHITE     ; ID=6
3345+ 96AD
3346+ 96AD              BLOCKS_WIDTH:
3347+ 96AD 04               DB  4           ; Block I - 0 Degrees
3348+ 96AE 01               DB  1           ; Block I - 90 Degrees
3349+ 96AF 04               DB  4           ; Block I - 180 Degrees
3350+ 96B0 01               DB  1           ; Block I - 270 Degrees
3351+ 96B1 02               DB  2           ; Block O - 0 Degrees
3352+ 96B2 02               DB  2           ; Block O - 90 Degrees
3353+ 96B3 02               DB  2           ; Block O - 180 Degrees
3354+ 96B4 02               DB  2           ; Block O - 270 Degrees
3355+ 96B5 03               DB  3           ; Block T - 0 Degrees
3356+ 96B6 02               DB  2           ; Block T - 90 Degrees
3357+ 96B7 03               DB  3           ; Block T - 180 Degrees
3358+ 96B8 02               DB  2           ; Block T - 270 Degrees
3359+ 96B9 03               DB  3           ; Block S - 0 Degrees
3360+ 96BA 02               DB  2           ; Block S - 90 Degrees
3361+ 96BB 03               DB  3           ; Block S - 180 Degrees
3362+ 96BC 02               DB  2           ; Block S - 270 Degrees
3363+ 96BD 03               DB  3           ; Block Z - 0 Degrees
3364+ 96BE 02               DB  2           ; Block Z - 90 Degrees
3365+ 96BF 03               DB  3           ; Block Z - 180 Degrees
3366+ 96C0 02               DB  2           ; Block Z - 270 Degrees
3367+ 96C1 03               DB  3           ; Block J - 0 Degrees
3368+ 96C2 02               DB  2           ; Block J - 90 Degrees
3369+ 96C3 03               DB  3           ; Block J - 180 Degrees
3370+ 96C4 02               DB  2           ; Block J - 270 Degrees
3371+ 96C5 03               DB  3           ; Block L - 0 Degrees
3372+ 96C6 02               DB  2           ; Block L - 90 Degrees
3373+ 96C7 03               DB  3           ; Block L - 180 Degrees
3374+ 96C8 02               DB  2           ; Block L - 270 Degrees
3375+ 96C9              BLOCKS_HEIGHT:
3376+ 96C9 01               DB  1           ; Block I - 0 Degrees
3377+ 96CA 04               DB  4           ; Block I - 90 Degrees
3378+ 96CB 01               DB  1           ; Block I - 180 Degrees
3379+ 96CC 04               DB  4           ; Block I - 270 Degrees
3380+ 96CD 02               DB  2           ; Block O - 0 Degrees
3381+ 96CE 02               DB  2           ; Block O - 90 Degrees
3382+ 96CF 02               DB  2           ; Block O - 180 Degrees
3383+ 96D0 02               DB  2           ; Block O - 270 Degrees
3384+ 96D1 02               DB  2           ; Block T - 0 Degrees
3385+ 96D2 03               DB  3           ; Block T - 90 Degrees
3386+ 96D3 02               DB  2           ; Block T - 180 Degrees
3387+ 96D4 03               DB  3           ; Block T - 270 Degrees
3388+ 96D5 02               DB  2           ; Block S - 0 Degrees
3389+ 96D6 03               DB  3           ; Block S - 90 Degrees
3390+ 96D7 02               DB  2           ; Block S - 180 Degrees
3391+ 96D8 03               DB  3           ; Block S - 270 Degrees
3392+ 96D9 02               DB  2           ; Block Z - 0 Degrees
3393+ 96DA 03               DB  3           ; Block Z - 90 Degrees
3394+ 96DB 02               DB  2           ; Block Z - 180 Degrees
3395+ 96DC 03               DB  3           ; Block Z - 270 Degrees
3396+ 96DD 02               DB  2           ; Block J - 0 Degrees
3397+ 96DE 03               DB  3           ; Block J - 90 Degrees
3398+ 96DF 02               DB  2           ; Block J - 180 Degrees
3399+ 96E0 03               DB  3           ; Block J - 270 Degrees
3400+ 96E1 02               DB  2           ; Block L - 0 Degrees
3401+ 96E2 03               DB  3           ; Block L - 90 Degrees
3402+ 96E3 02               DB  2           ; Block L - 180 Degrees
3403+ 96E4 03               DB  3           ; Block L - 270 Degrees
3404+ 96E5              BLOCKS_TABLE:
3405+ 96E5                      ; ID=0 => pezzo I
3406+ 96E5 AA 95            DW      BLOCK_I_DEF_0
3407+ 96E7 B3 95            DW      BLOCK_I_DEF_90
3408+ 96E9 BC 95            DW      BLOCK_I_DEF_180
3409+ 96EB C5 95            DW      BLOCK_I_DEF_270
3410+ 96ED
3411+ 96ED                  ; ID=1 => pezzo O
3412+ 96ED CE 95            DW      BLOCK_O_DEF_0
3413+ 96EF D7 95            DW      BLOCK_O_DEF_90
3414+ 96F1 E0 95            DW      BLOCK_O_DEF_180
3415+ 96F3 E9 95            DW      BLOCK_O_DEF_270
3416+ 96F5
3417+ 96F5                  ; ID=2 => pezzo T
3418+ 96F5 F2 95            DW      BLOCK_T_DEF_0
3419+ 96F7 FB 95            DW      BLOCK_T_DEF_90
3420+ 96F9 04 96            DW      BLOCK_T_DEF_180
3421+ 96FB 0D 96            DW      BLOCK_T_DEF_270
3422+ 96FD
3423+ 96FD                  ; ID=3 => pezzo S
3424+ 96FD 16 96            DW      BLOCK_S_DEF_0
3425+ 96FF 1F 96            DW      BLOCK_S_DEF_90
3426+ 9701 28 96            DW      BLOCK_S_DEF_180
3427+ 9703 31 96            DW      BLOCK_S_DEF_270
3428+ 9705
3429+ 9705                  ; ID=4 => pezzo Z
3430+ 9705 3A 96            DW      BLOCK_Z_DEF_0
3431+ 9707 43 96            DW      BLOCK_Z_DEF_90
3432+ 9709 4C 96            DW      BLOCK_Z_DEF_180
3433+ 970B 55 96            DW      BLOCK_Z_DEF_270
3434+ 970D
3435+ 970D                  ; ID=5 => pezzo J
3436+ 970D 5E 96            DW      BLOCK_J_DEF_0
3437+ 970F 67 96            DW      BLOCK_J_DEF_90
3438+ 9711 70 96            DW      BLOCK_J_DEF_180
3439+ 9713 79 96            DW      BLOCK_J_DEF_270
3440+ 9715
3441+ 9715                  ; ID=6 => pezzo L
3442+ 9715 82 96            DW      BLOCK_L_DEF_0
3443+ 9717 8B 96            DW      BLOCK_L_DEF_90
3444+ 9719 94 96            DW      BLOCK_L_DEF_180
3445+ 971B 9D 96            DW      BLOCK_L_DEF_270
3446+ 971D              CHAR_ROW_COMPLETED:
3447+ 971D FF               DB 0xFF
3448+ 971E              TEXT_EMPTY5:
3449+ 971E 20 20 20 20      DB "     ",0
3449+ 9722 20 00
3450+ 9724              TEXT_SCORE:
3451+ 9724 53 43 4F 52      DB "SCORE",0
3451+ 9728 45 00
3452+ 972A              TEXT_HIGH_SCORE_1:
3453+ 972A 48 49 47 48      DB "HIGH ",0
3453+ 972E 20 00
3454+ 9730              TEXT_HIGH_SCORE_2:
3455+ 9730 53 43 4F 52      DB "SCORE",0
3455+ 9734 45 00
3456+ 9736              TEXT_LEVEL:
3457+ 9736 4C 45 56 45      DB "LEVEL",0
3457+ 973A 4C 00
3458+ 973C              TEXT_GAME_OVER_1:
3459+ 973C 20 20 20 20      DB "          ",0
3459+ 9740 20 20 20 20
3459+ 9744 20 20 00
3460+ 9747              TEXT_GAME_OVER_2:
3461+ 9747 20 20 20 47      DB "   GAME   ",0
3461+ 974B 41 4D 45 20
3461+ 974F 20 20 00
3462+ 9752
3463+ 9752              TEXT_GAME_OVER_3:
3464+ 9752 20 20 20 4F      DB "   OVER   ",0
3464+ 9756 56 45 52 20
3464+ 975A 20 20 00
3465+ 975D
3466+ 975D              TEXT_BLOCKS:
3467+ 975D 42 4C 4B 53      DB "BLKS ",0
3467+ 9761 20 00
3468+ 9763              TEXT_MAX_BLOCKS:
3469+ 9763 4D 41 58 20      DB "MAX  ",0
3469+ 9767 20 00
3470+ 9769              TEXT_START_LEVEL:
3471+ 9769 53 54 41 52      DB "START LEVEL",0
3471+ 976D 54 20 4C 45
3471+ 9771 56 45 4C 00
3472+ 9775              TEXT_ORIENTATION:
3473+ 9775 44 49 52 45      DB "DIRECTION",0
3473+ 9779 43 54 49 4F
3473+ 977D 4E 00
3474+ 977F              TEXT_LEVEL_GROWING:
3475+ 977F 4C 45 56 45      DB "LEVEL GROWING",0
3475+ 9783 4C 20 47 52
3475+ 9787 4F 57 49 4E
3475+ 978B 47 00
3476+ 978D              TEXT_YES:
3477+ 978D 59 45 53 00      DB "YES",0
3478+ 9791              TEXT_NO:
3479+ 9791 20 4E 4F 00      DB " NO",0
3480+ 9795              TEXT_NORTH:
3481+ 9795 4E 4F 52 54      DB "NORTH",0
3481+ 9799 48 00
3482+ 979B              TEXT_SOUTH:
3483+ 979B 53 4F 55 54      DB "SOUTH",0
3483+ 979F 48 00
3484+ 97A1              TEXT_EAST:
3485+ 97A1 20 45 41 53      DB " EAST",0
3485+ 97A5 54 00
3486+ 97A7              TEXT_WEST:
3487+ 97A7 20 57 45 53      DB " WEST",0
3487+ 97AB 54 00
3488+ 97AD              TEXT_CHAOS:
3489+ 97AD 43 48 41 4F       DB "CHAOS",0
3489+ 97B1 53 00
3490+ 97B3              TEXT_SPACE:
3491+ 97B3 20 00             DB " ",0
3492+ 97B5              TEXT_COPYRIGHT:
3493+ 97B5 32 30 32 35      DB "2025 FAUSTO PRACEK",0
3493+ 97B9 20 46 41 55
3493+ 97BD 53 54 4F 20
3493+ 97C1 50 52 41 43
3493+ 97C5 45 4B 00
3494+ 97C8              TEXT_COMMANDS:
3495+ 97C8 34 3D 4C 45      DB "4=LEFT  5=ROTATE  6=RIGHT",0
3495+ 97CC 46 54 20 20
3495+ 97D0 35 3D 52 4F
3495+ 97D4 54 41 54 45
3495+ 97D8 20 20 36 3D
3495+ 97DC 52 49 47 48
3495+ 97E0 54 00
3496+ 97E2              TEXT_COMMANDS_SPACE:
3497+ 97E2 53 50 41 43      DB "SPACE=PULL DOWN",0
3497+ 97E6 45 3D 50 55
3497+ 97EA 4C 4C 20 44
3497+ 97EE 4F 57 4E 00
3498+ 97F2              TEXT_COMMANDS_SPACE_TO_START:
3499+ 97F2 50 52 45 53      DB "PRESS SPACE TO START",0
3499+ 97F6 53 20 53 50
3499+ 97FA 41 43 45 20
3499+ 97FE 54 4F 20 53
3499+ 9802 54 41 52 54
3499+ 9806 00
3500+ 9807              ZXETRISMATRIX:
3501+ 9807 FF FF FF 00      DEFB 255, 255, 255, 0,   255, 0,   255, 0,   255, 255, 255, 0,   255, 255, 255, 0,   255, 255, 255, 0,   255, 0,   255, 255, 255
3501+ 980B FF 00 FF 00
3501+ 980F FF FF FF 00
3501+ 9813 FF FF FF 00
3501+ 9817 FF FF FF 00
3501+ 981B FF 00 FF FF
3501+ 981F FF
3502+ 9820 00 00 FF 00      DEFB   0,   0, 255, 0,   255, 0,   255, 0,   255,   0,   0,   0,     0, 255,   0,   0,   255,   0,   255,   0,   255,   0,   255,   0,   0
3502+ 9824 FF 00 FF 00
3502+ 9828 FF 00 00 00
3502+ 982C 00 FF 00 00
3502+ 9830 FF 00 FF 00
3502+ 9834 FF 00 FF 00
3502+ 9838 00
3503+ 9839 00 00 FF 00      DEFB   0,   0, 255, 0,   255, 0,   255, 0,   255,   0,   0,   0,     0, 255,   0,   0,   255,   0,   255,   0,   255,   0,   255,   0,   0
3503+ 983D FF 00 FF 00
3503+ 9841 FF 00 00 00
3503+ 9845 00 FF 00 00
3503+ 9849 FF 00 FF 00
3503+ 984D FF 00 FF 00
3503+ 9851 00
3504+ 9852 00 FF 00 00      DEFB   0, 255,   0,   0,   0, 255,   0,   0,   255, 255,   0,   0,     0, 255,   0,   0,   255, 255, 255,   0,   255,   0,   0,   255,   0
3504+ 9856 00 FF 00 00
3504+ 985A FF FF 00 00
3504+ 985E 00 FF 00 00
3504+ 9862 FF FF FF 00
3504+ 9866 FF 00 00 FF
3504+ 986A 00
3505+ 986B FF 00 00 00      DEFB 255,   0,   0,   0, 255,   0, 255,   0,   255,   0,   0,   0,     0, 255,   0,   0,   255, 255,   0,   0,   255,   0,   0,   0, 255
3505+ 986F FF 00 FF 00
3505+ 9873 FF 00 00 00
3505+ 9877 00 FF 00 00
3505+ 987B FF FF 00 00
3505+ 987F FF 00 00 00
3505+ 9883 FF
3506+ 9884 FF 00 00 00      DEFB 255,   0,   0,   0, 255,   0, 255,   0,   255,   0,   0,   0,     0, 255,   0,   0,   255,   0,   255,   0,   255,   0,   0,   0, 255
3506+ 9888 FF 00 FF 00
3506+ 988C FF 00 00 00
3506+ 9890 00 FF 00 00
3506+ 9894 FF 00 FF 00
3506+ 9898 FF 00 00 00
3506+ 989C FF
3507+ 989D FF FF FF 00      DEFB 255, 255, 255, 0,   255, 0,   255, 0,   255, 255, 255, 0,     0, 255,   0,   0,   255,   0,   255,   0,   255,   0,   255, 255, 255
3507+ 98A1 FF 00 FF 00
3507+ 98A5 FF FF FF 00
3507+ 98A9 00 FF 00 00
3507+ 98AD FF 00 FF 00
3507+ 98B1 FF 00 FF FF
3507+ 98B5 FF
3508+ 98B6              COLORS_TABLE:
3509+ 98B6 08               DEFB COLOR_BLUE
3510+ 98B7 30               DEFB COLOR_YELLOW
3511+ 98B8 28               DEFB COLOR_CYAN
3512+ 98B9 20               DEFB COLOR_GREEN
3513+ 98BA 10               DEFB COLOR_RED
3514+ 98BB 18               DEFB COLOR_MAGENTA
3515+ 98BC 38               DEFB COLOR_WHITE
3516+ 98BD              InGameTuneData:
3517+ 98BD 1B 24 22 1E      DB 0x1B,0x24,0x22,0x1E,0x22,0x24,0x28,0x28    ; E5, B4, C5, D5, C5, B4, A4, A4
3517+ 98C1 22 24 28 28
3518+ 98C5 22 1B 1E 22      DB 0x22,0x1B,0x1E,0x22,0x24,0x22,0x1E,0x1B    ; C5, E5, D5, C5, B4, C5, D5, E5
3518+ 98C9 24 22 1E 1B
3519+ 98CD 1B 22 28 24      DB 0x1B,0x22,0x28,0x24,0x22,0x24,0x22,0x1E    ; E5, C5, A4, A4, C5, E5, D5, C5
3519+ 98D1 22 24 22 1E
3520+ 98D5 24 22 1B 1B      DB 0x24,0x22,0x1B,0x1B,0x22,0x1B,0x22,0x24    ; B4, C5, D5, E5, C5, A4, A4, C5
3520+ 98D9 22 1B 22 24
3521+ 98DD 22 1E 1B 1B      DB 0x22,0x1E,0x1B,0x1B                        ; E5, C5, A4, A4  (chiusura/frase finale)
3522+ 98E1
3523+ 98E1              ;----------------------------------------------------------------------
3524+ 98E1              ;  Variabili
3525+ 98E1              ;----------------------------------------------------------------------
3526+ 98E1              Matrix:
3527+ 98E1 00 00 00...      DEFS 200 ; 200 bytes for the game matrix (20x10)
3528+ 99A9              TempMatrix:
3529+ 99A9 00 00 00...      DEFS 200
3530+ 9A71              CurrentMatrixOrientation:
3531+ 9A71 00               DEFB ORIENT_NORTH
3532+ 9A72              SavedY:
3533+ 9A72 00               DEFB 0
3534+ 9A73              SavedX:
3535+ 9A73 00               DEFB 0
3536+ 9A74              ColorOfBlock:
3537+ 9A74 00               DEFB  0   ; usato per salvare il colore del blocco
3538+ 9A75              CurrentBlockTable:
3539+ 9A75 00 00 00 00      DW 0,0
3540+ 9A79              CurrentBlockRotation:
3541+ 9A79 00               DEFB    0                           ; Rotazione corrente del pezzo (0-3)
3542+ 9A7A              CurrentBlock:
3543+ 9A7A 00               DEFB    0                           ; Pezzo corrente
3544+ 9A7B              BlockCoordinates:
3545+ 9A7B 00 00 00...      DEFS    16                          ; Coordinate dei byte occupati dal pezzo
3546+ 9A8B FF               DEFB    0xFF                        ; Fine delle coordinate
3547+ 9A8C              CurrentPosition:
3548+ 9A8C 00               DEFB    0                           ; Offset corrente nella matrice
3549+ 9A8D              PreviousPosition:
3550+ 9A8D 00               DEFB    0                           ; Offset precedente nella matrice
3551+ 9A8E              Seed:
3552+ 9A8E 5A               DB      0x5A                        ; Seed for random number generation
3553+ 9A8F              FrameCounter:
3554+ 9A8F 00               DB      0                           ; Contatore di frame per il movimento del pezzo
3555+ 9A90              SecondsCounter:
3556+ 9A90 00               DB      0                           ; Contatore di secondi per il movimento del pezzo
3557+ 9A91              MinutesCounter:
3558+ 9A91 00               DB      0                           ; Contatore di minuti per il movimento del pezzo
3559+ 9A92              Score:
3560+ 9A92 00 00            DW      0                           ; Current score
3561+ 9A94              HighScore:
3562+ 9A94 00 00            DW      0                           ; High score
3563+ 9A96              Level:
3564+ 9A96 00               DB      0                           ; Livello corrente
3565+ 9A97              BlockSpeed:
3566+ 9A97 00               DB      0                           ; Velocità del pezzo corrente
3567+ 9A98              BlockSpeedCounter:
3568+ 9A98 00               DB      0                           ; Contatore di velocità del pezzo corrente
3569+ 9A99              PrintMatrixMaxRow:
3570+ 9A99 00               DB      0                          ; Massimo numero di righe nella matrice
3571+ 9A9A              BlockLeftMoving:
3572+ 9A9A 00               DB      0                          ; Flag per il movimento a sinistra del pezzo corrente, se 1 vuol dire verso sinistra, se 2 verso destra (viene usato solo i movimenti laterali)
3573+ 9A9B              TempXBlocPosition:
3574+ 9A9B 00               DB      0                          ; Posizione temporanea del pezzo corrente (per verfica spostamenti laterali)
3575+ 9A9C              LastKeyPressed:
3576+ 9A9C 00               DB      0                          ; Ultimo tasto premuto
3577+ 9A9D              KeyPressed:
3578+ 9A9D 00               DB      0                          ; Tasto premuto (0=NO, 1=SI)
3579+ 9A9E              ForcePrintMatrixRepaintAll:
3580+ 9A9E 00               DB      0                          ; Forza il ridisegno della matrice (0=NO, 1=SI)
3581+ 9A9F              CompletedRows:
3582+ 9A9F 00               DB      0                          ; Righe completate (0=NO, 1=SI)
3583+ 9AA0              Changes:
3584+ 9AA0 00               DEFB 0
3585+ 9AA1              ChangesOnce:
3586+ 9AA1 00               DEFB 0
3587+ 9AA2              NextBlock:
3588+ 9AA2 00               DEFB    0                           ; Pezzo successivo
3589+ 9AA3              NextBlockXPosition:
3590+ 9AA3 00               DEFB 0
3591+ 9AA4              NextBlockYPosition
3592+ 9AA4 00               DEFB 0
3593+ 9AA5              Bug:
3594+ 9AA5 00               DB 0x00                              ; Used for bug workaround only
3595+ 9AA6              TempBlock:
3596+ 9AA6 00 00 00...      DEFS 16
3597+ 9AB6              ShowNextBlock:
3598+ 9AB6 00               DB 0                              ; Flag to show next block (0=NO, 1=YES)
3599+ 9AB7              NextBlockColor:
3600+ 9AB7 00               DB 0                              ; Color of the next block
3601+ 9AB8              NextBlockTable:
3602+ 9AB8 00 00 00 00      DW 0,0
3603+ 9ABC              LastSamprSprite:
3604+ 9ABC 00               DB 0                              ; Last sprite used for Sampr
3605+ 9ABD              MoveToBottomInAction:
3606+ 9ABD 00               DB 0                              ; Flag to indicate if the block is moving to the bottom (0=NO, 1=YES)
3607+ 9ABE              CurrentWallTile:
3608+ 9ABE 00               DB 0                              ; Current wall orientation (0=left, 1=right)
3609+ 9ABF              PlacedBlocks:
3610+ 9ABF 00 00            DW 0                              ; Number of blocks placed
3611+ 9AC1              MaxPlacedBlocks:
3612+ 9AC1 00 00            DW 0                              ; Amx number of blocks placedù
3613+ 9AC3 31 32 33 34  NumberValue:  DB "12345",0   ;  characters plus null terminator
3613+ 9AC7 35 00
3614+ 9AC9              LevelBlocksCounter:
3615+ 9AC9 00               DB 0                              ; Number of blocks placed in the current level
3616+ 9ACA              SelectedLevel:
3617+ 9ACA 00               DB 0                              ; Selected level (0-9)
3618+ 9ACB              SelectedOrientation:
3619+ 9ACB 00               DB 0                              ; Selected orientation (0-3)
3620+ 9ACC              SelectedCanGrow:
3621+ 9ACC 00               DB 0                              ; Selected can grow (0=NO, 1=YES)
3622+ 9ACD              SelectedOption:
3623+ 9ACD 00               DB 0                              ; Selected option (0=NO, 1=YES)
3624+ 9ACE              TitleTimer:
3625+ 9ACE 00               DB 0                              ; Timer for title screen
3626+ 9ACF              GameOver:
3627+ 9ACF 00               DB 0                              ; Game over flag (0=NO, 1=YES)
3628+ 9AD0              MusicNoteIndex:
3629+ 9AD0 00               DB 0                              ; Index for music note
3630+ 9AD1              InGame:
3631+ 9AD1 00               DB 0                              ; In game flag (0=NO, 1=YES)
# file closed: ./inc/GAMESUBS.asm
  15  9AD2
  16  9AD2
  17  9AD2
  18  9AD2
  19  9AD2
  20  9AD2              ;------------------------------------------------------------------------
  21  9AD2              ; START OF PROGRAM
  22  9AD2              ;------------------------------------------------------------------------
  23  9AD2
  24  9AD2              InitGame:
  25  9AD2 CD 43 90             CALL    SetM2RRoutine
  26  9AD5 26 00                LD      H, 0
  27  9AD7 2E 00                LD      L, 0
  28  9AD9 22 C1 9A             LD      (MaxPlacedBlocks), HL           ; Set the maximum number of blocks to 0
  29  9ADC 22 94 9A             LD      (HighScore), HL                 ; Set the high score to 0
  30  9ADF 3E 01                LD      A, 1
  31  9AE1 32 CA 9A             LD      (SelectedLevel), A
  32  9AE4 32 CC 9A             LD      (SelectedCanGrow), A            ; Can grow
  33  9AE7 3E 04                LD      A, 4
  34  9AE9 32 CB 9A             LD      (SelectedOrientation), A        ; CHAOS
  35  9AEC
  36  9AEC CD 80 82             CALL    Screen_LoadTiles                ; Load tiles into RAM
  37  9AEF              InitMenu:
  38  9AEF AF                   XOR     A
  39  9AF0 32 9D 9A             LD      (KeyPressed), A
  40  9AF3 CD 5C 89             CALL    ShowMenu                        ; Show menu
  41  9AF6 3E 01                LD      A, 1
  42  9AF8 32 D1 9A             LD      (InGame), A
  43  9AFB 3E 00                LD      A, ORIENT_NORTH
  44  9AFD 32 71 9A             LD      (CurrentMatrixOrientation), A  ; Set the current matrix orientation to north
  45  9B00 AF                   XOR     A
  46  9B01 32 9D 9A             LD      (KeyPressed), A
  47  9B04
  48  9B04              StartGame:
  49  9B04 3A CA 9A             LD      A, (SelectedLevel)
  50  9B07 32 96 9A             LD      (Level), A
  51  9B0A CD ED 93             CALL    SetSpeedByLevel
  52  9B0D CD 86 8C             CALL    ShowGameField  ; Show game field
  53  9B10 CD 18 90             CALL    InitNewGame
  54  9B13 CD 47 89             CALL    MatrixInit
  55  9B16 CD 98 93             CALL    ChooseRandomBlock       ; Choose a random piece
  56  9B19 F3                   DI                                      ; Disable interrupts
  57  9B1A ED 5E                IM      2                               ; Set the interrupt mode
  58  9B1C FB                   EI                                      ; Enable interrupts
  59  9B1D
  60  9B1D              ;------------------------------------------------------------------------
  61  9B1D              ; TETRIS GAME LOOP
  62  9B1D              ;------------------------------------------------------------------------
  63  9B1D
  64  9B1D              TetrisLoop:
  65  9B1D 3A CF 9A             LD      A, (GameOver)
  66  9B20 FE 01                CP      1
  67  9B22 CA BF 8F             JP      Z, ShowGameOver
  68  9B25 3A B6 9A             LD      A, (ShowNextBlock)
  69  9B28 FE 00                CP      0
  70  9B2A 28 19                JR      Z, TetrisLoopNext
  71  9B2C
  72  9B2C 3E 01                LD      A, 1
  73  9B2E 2A BF 9A             LD      HL, (PlacedBlocks)
  74  9B31 CD C1 83             CALL    Math_AddAToHL
  75  9B34 22 BF 9A             LD      (PlacedBlocks), HL      ; Incrementa il numero di pezzi piazzati
  76  9B37 ED 4B C1 9A          LD      BC, (MaxPlacedBlocks)
  77  9B3B CD C6 83             CALL    Math_CompareHLtoBC
  78  9B3E FE 01                CP      1
  79  9B40 20 03                JR      NZ, TetrisLoopNext
  80  9B42 22 C1 9A             LD      (MaxPlacedBlocks), HL  ; Set the maximum number of blocks to the current number of blocks
  81  9B45              TetrisLoopNext:
  82  9B45
  83  9B45 CD 13 95             CALL    CheckAndMarkCompletedRows
  84  9B48 3A 9F 9A             LD      A, (CompletedRows)
  85  9B4B FE 00                CP      0
  86  9B4D 28 4A                JR      Z, TetrisLoopContinue
  87  9B4F F3                   DI
  88  9B50 CD CF 87             CALL    ScoreUpdate
  89  9B53 32 9E 9A             LD      (ForcePrintMatrixRepaintAll), A
  90  9B56 CD E9 8C             CALL    PrintMatrix
  91  9B59 CD DE 8E             CALL    RemoveCompletedRows
  92  9B5C CD DE 8E             CALL    RemoveCompletedRows
  93  9B5F CD DE 8E             CALL    RemoveCompletedRows
  94  9B62 CD DE 8E             CALL    RemoveCompletedRows
  95  9B65 CD DE 8E             CALL    RemoveCompletedRows
  96  9B68 CD DE 8E             CALL    RemoveCompletedRows
  97  9B6B CD DE 8E             CALL    RemoveCompletedRows
  98  9B6E CD DE 8E             CALL    RemoveCompletedRows
  99  9B71 CD DE 8E             CALL    RemoveCompletedRows
 100  9B74 CD DE 8E             CALL    RemoveCompletedRows
 101  9B77 CD DE 8E             CALL    RemoveCompletedRows
 102  9B7A CD DE 8E             CALL    RemoveCompletedRows
 103  9B7D CD DE 8E             CALL    RemoveCompletedRows
 104  9B80 CD DE 8E             CALL    RemoveCompletedRows
 105  9B83 CD DE 8E             CALL    RemoveCompletedRows
 106  9B86 CD DE 8E             CALL    RemoveCompletedRows
 107  9B89 CD DE 8E             CALL    RemoveCompletedRows
 108  9B8C CD DE 8E             CALL    RemoveCompletedRows
 109  9B8F CD DE 8E             CALL    RemoveCompletedRows
 110  9B92 CD DE 8E             CALL    RemoveCompletedRows
 111  9B95 CD DE 8E             CALL    RemoveCompletedRows
 112  9B98                      ;CALL    PrintMatrix
 113  9B98 FB                   EI
 114  9B99              TetrisLoopContinue:
 115  9B99
 116  9B99
 117  9B99
 118  9B99
 119  9B99
 120  9B99
 121  9B99
 122  9B99 F3                   DI
 123  9B9A 3A A2 9A             LD      A, (NextBlock)
 124  9B9D 32 7A 9A             LD      (CurrentBlock), A
 125  9BA0 CD 98 93             CALL    ChooseRandomBlock       ; Choose a random piece
 126  9BA3 3A A2 9A             LD      A, (NextBlock)
 127  9BA6 CD 9F 88             CALL    UpdateNextBlockInfo
 128  9BA9 CD 1C 88             CALL    SetNextBoxPosition
 129  9BAC CD FC 88             CALL    ShowNextBlockOnBox
 130  9BAF CD 29 94             CALL    PlaceBlockAtTop         ; Place the piece at the top
 131  9BB2 FB                   EI
 132  9BB3
 133  9BB3              MoveBlock:
 134  9BB3 16 00                LD      D, 0
 135  9BB5 1E 00                LD      E, 0
 136  9BB7 CD DE 94             CALL    ReadKeyboard
 137  9BBA
 138  9BBA 3A B6 9A             LD      A, (ShowNextBlock)
 139  9BBD FE 01                CP      1
 140  9BBF CA 1D 9B             JP      Z, TetrisLoop
 141  9BC2 C3 B3 9B             JP      MoveBlock         ; Continue moving down
 142  9BC5
 143  9BC5
 144  9BC5
 145  9BC5                      SAVESNA "./out/zxetris.sna", InitGame
 146  9BC5              END
 147  9BC5
# file closed: ./src/ZXETRIS.asm
