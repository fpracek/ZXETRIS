# file opened: ./src/SAMPRWRL.asm
  1   0000              ; ===================================================================
  2   0000              ; SAM.PR World - 2025 Fausto Pracek
  3   0000              ; ===================================================================
  4   0000
  5   0000                      DEVICE ZXSPECTRUM48
  6   0000                      SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  7   0000
  8   0000                      ORG 0x8000               ; Loader address (0x8000)
  9   8000
 10   8000                      INCLUDE "TILES.asm"
# file opened: ./inc/TILES.asm
  1+  8000              ; ===================================================================
  2+  8000              ; Tiles
  3+  8000              ; ===================================================================
  4+  8000
  5+  8000              ; --------------------------------------------------------------------
  6+  8000              ; Constants
  7+  8000              ; --------------------------------------------------------------------
  8+  8000              TILE_SAMPR_LEFT		        EQU		12
  9+  8000              TILE_SAMPR_RIGHT	        EQU		0
 10+  8000              TILE_SAMPR_WK_LEFT_1        EQU		16
 11+  8000              TILE_SAMPR_WK_LEFT_2        EQU		20
 12+  8000              TILE_SAMPR_WK_RIGHT_1       EQU		4
 13+  8000              TILE_SAMPR_WK_RIGHT_2       EQU		8
 14+  8000              TILE_SAMPR_JUMP_LEFT_1    	EQU		24
 15+  8000              TILE_SAMPR_JUMP_LEFT_2      EQU		28
 16+  8000              TILE_SAMPR_JUMP_RIGHT_1    	EQU		32
 17+  8000              TILE_SAMPR_JUMP_RIGHT_2     EQU		36
 18+  8000              TILE_SAMPR_WK_JUMP_LEFT_1  	EQU		40
 19+  8000              TILE_SAMPR_WK_JUMP_LEFT_2  	EQU		44
 20+  8000              TILE_SAMPR_WK_JUMP_RIGHT_1  EQU		48
 21+  8000              TILE_SAMPR_WK_JUMP_RIGHT_2  EQU		52
 22+  8000
 23+  8000              TILES_DEF:
 24+  8000              ; Item[0] (offset:0)
 25+  8000 0F           	db 0x0F
 26+  8001 1F           	db 0x1F
 27+  8002 3F           	db 0x3F
 28+  8003 00           	db 0x00
 29+  8004 1F           	db 0x1F
 30+  8005 18           	db 0x18
 31+  8006 18           	db 0x18
 32+  8007 18           	db 0x18
 33+  8008              ; Item[1] (offset:8)
 34+  8008 80           	db 0x80
 35+  8009 C0           	db 0xC0
 36+  800A F8           	db 0xF8
 37+  800B 00           	db 0x00
 38+  800C C0           	db 0xC0
 39+  800D F0           	db 0xF0
 40+  800E F0           	db 0xF0
 41+  800F C0           	db 0xC0
 42+  8010              ; Item[2] (offset:16)
 43+  8010 1F           	db 0x1F
 44+  8011 1E           	db 0x1E
 45+  8012 1F           	db 0x1F
 46+  8013 1F           	db 0x1F
 47+  8014 00           	db 0x00
 48+  8015 1C           	db 0x1C
 49+  8016 1E           	db 0x1E
 50+  8017 1E           	db 0x1E
 51+  8018              ; Item[3] (offset:24)
 52+  8018 E0           	db 0xE0
 53+  8019 20           	db 0x20
 54+  801A E0           	db 0xE0
 55+  801B E0           	db 0xE0
 56+  801C 00           	db 0x00
 57+  801D E0           	db 0xE0
 58+  801E F0           	db 0xF0
 59+  801F F0           	db 0xF0
 60+  8020              ; Item[4] (offset:32)
 61+  8020 1F           	db 0x1F
 62+  8021 1E           	db 0x1E
 63+  8022 1F           	db 0x1F
 64+  8023 1F           	db 0x1F
 65+  8024 00           	db 0x00
 66+  8025 18           	db 0x18
 67+  8026 1E           	db 0x1E
 68+  8027 0E           	db 0x0E
 69+  8028              ; Item[5] (offset:40)
 70+  8028 E0           	db 0xE0
 71+  8029 20           	db 0x20
 72+  802A E0           	db 0xE0
 73+  802B E0           	db 0xE0
 74+  802C 18           	db 0x18
 75+  802D F8           	db 0xF8
 76+  802E E0           	db 0xE0
 77+  802F 00           	db 0x00
 78+  8030              ; Item[6] (offset:48)
 79+  8030 03           	db 0x03
 80+  8031 07           	db 0x07
 81+  8032 0F           	db 0x0F
 82+  8033 00           	db 0x00
 83+  8034 07           	db 0x07
 84+  8035 06           	db 0x06
 85+  8036 06           	db 0x06
 86+  8037 06           	db 0x06
 87+  8038              ; Item[7] (offset:56)
 88+  8038 E0           	db 0xE0
 89+  8039 F0           	db 0xF0
 90+  803A FE           	db 0xFE
 91+  803B 00           	db 0x00
 92+  803C F0           	db 0xF0
 93+  803D 3C           	db 0x3C
 94+  803E 3C           	db 0x3C
 95+  803F 30           	db 0x30
 96+  8040              ; Item[8] (offset:64)
 97+  8040 07           	db 0x07
 98+  8041 07           	db 0x07
 99+  8042 07           	db 0x07
100+  8043 07           	db 0x07
101+  8044 00           	db 0x00
102+  8045 07           	db 0x07
103+  8046 07           	db 0x07
104+  8047 06           	db 0x06
105+  8048              ; Item[9] (offset:72)
106+  8048 F8           	db 0xF8
107+  8049 88           	db 0x88
108+  804A F8           	db 0xF8
109+  804B F8           	db 0xF8
110+  804C 00           	db 0x00
111+  804D 18           	db 0x18
112+  804E 1C           	db 0x1C
113+  804F 38           	db 0x38
114+  8050              ; Item[10] (offset:80)
115+  8050 01           	db 0x01
116+  8051 03           	db 0x03
117+  8052 1F           	db 0x1F
118+  8053 00           	db 0x00
119+  8054 03           	db 0x03
120+  8055 0F           	db 0x0F
121+  8056 0F           	db 0x0F
122+  8057 03           	db 0x03
123+  8058              ; Item[11] (offset:88)
124+  8058 F0           	db 0xF0
125+  8059 F8           	db 0xF8
126+  805A FC           	db 0xFC
127+  805B 00           	db 0x00
128+  805C F8           	db 0xF8
129+  805D 18           	db 0x18
130+  805E 18           	db 0x18
131+  805F 18           	db 0x18
132+  8060              ; Item[12] (offset:96)
133+  8060 07           	db 0x07
134+  8061 04           	db 0x04
135+  8062 07           	db 0x07
136+  8063 07           	db 0x07
137+  8064 00           	db 0x00
138+  8065 07           	db 0x07
139+  8066 0F           	db 0x0F
140+  8067 0F           	db 0x0F
141+  8068              ; Item[13] (offset:104)
142+  8068 F8           	db 0xF8
143+  8069 78           	db 0x78
144+  806A F8           	db 0xF8
145+  806B F8           	db 0xF8
146+  806C 00           	db 0x00
147+  806D 38           	db 0x38
148+  806E 78           	db 0x78
149+  806F 78           	db 0x78
150+  8070              ; Item[14] (offset:112)
151+  8070 07           	db 0x07
152+  8071 04           	db 0x04
153+  8072 07           	db 0x07
154+  8073 07           	db 0x07
155+  8074 18           	db 0x18
156+  8075 1F           	db 0x1F
157+  8076 07           	db 0x07
158+  8077 00           	db 0x00
159+  8078              ; Item[15] (offset:120)
160+  8078 F8           	db 0xF8
161+  8079 78           	db 0x78
162+  807A F8           	db 0xF8
163+  807B F8           	db 0xF8
164+  807C 00           	db 0x00
165+  807D 18           	db 0x18
166+  807E 78           	db 0x78
167+  807F 70           	db 0x70
168+  8080              ; Item[16] (offset:128)
169+  8080 07           	db 0x07
170+  8081 0F           	db 0x0F
171+  8082 7F           	db 0x7F
172+  8083 00           	db 0x00
173+  8084 0F           	db 0x0F
174+  8085 3C           	db 0x3C
175+  8086 3C           	db 0x3C
176+  8087 0C           	db 0x0C
177+  8088              ; Item[17] (offset:136)
178+  8088 C0           	db 0xC0
179+  8089 E0           	db 0xE0
180+  808A F0           	db 0xF0
181+  808B 00           	db 0x00
182+  808C E0           	db 0xE0
183+  808D 60           	db 0x60
184+  808E 60           	db 0x60
185+  808F 60           	db 0x60
186+  8090              ; Item[18] (offset:144)
187+  8090 1F           	db 0x1F
188+  8091 11           	db 0x11
189+  8092 1F           	db 0x1F
190+  8093 1F           	db 0x1F
191+  8094 00           	db 0x00
192+  8095 18           	db 0x18
193+  8096 38           	db 0x38
194+  8097 1C           	db 0x1C
195+  8098              ; Item[19] (offset:152)
196+  8098 E0           	db 0xE0
197+  8099 E0           	db 0xE0
198+  809A E0           	db 0xE0
199+  809B E0           	db 0xE0
200+  809C 00           	db 0x00
201+  809D E0           	db 0xE0
202+  809E E0           	db 0xE0
203+  809F 60           	db 0x60
204+  80A0              ; Item[20] (offset:160)
205+  80A0 07           	db 0x07
206+  80A1 04           	db 0x04
207+  80A2 07           	db 0x07
208+  80A3 07           	db 0x07
209+  80A4 00           	db 0x00
210+  80A5 07           	db 0x07
211+  80A6 03           	db 0x03
212+  80A7 03           	db 0x03
213+  80A8              ; Item[21] (offset:168)
214+  80A8 F8           	db 0xF8
215+  80A9 78           	db 0x78
216+  80AA F8           	db 0xF8
217+  80AB F8           	db 0xF8
218+  80AC 00           	db 0x00
219+  80AD 38           	db 0x38
220+  80AE 00           	db 0x00
221+  80AF 00           	db 0x00
222+  80B0              ; Item[22] (offset:176)
223+  80B0 07           	db 0x07
224+  80B1 04           	db 0x04
225+  80B2 07           	db 0x07
226+  80B3 07           	db 0x07
227+  80B4 00           	db 0x00
228+  80B5 07           	db 0x07
229+  80B6 00           	db 0x00
230+  80B7 00           	db 0x00
231+  80B8              ; Item[23] (offset:184)
232+  80B8 F8           	db 0xF8
233+  80B9 78           	db 0x78
234+  80BA F8           	db 0xF8
235+  80BB F8           	db 0xF8
236+  80BC 00           	db 0x00
237+  80BD 38           	db 0x38
238+  80BE 30           	db 0x30
239+  80BF 30           	db 0x30
240+  80C0              ; Item[24] (offset:192)
241+  80C0 8F           	db 0x8F
242+  80C1 1F           	db 0x1F
243+  80C2 3F           	db 0x3F
244+  80C3 00           	db 0x00
245+  80C4 1F           	db 0x1F
246+  80C5 18           	db 0x18
247+  80C6 18           	db 0x18
248+  80C7 18           	db 0x18
249+  80C8              ; Item[25] (offset:200)
250+  80C8 1F           	db 0x1F
251+  80C9 1E           	db 0x1E
252+  80CA 1F           	db 0x1F
253+  80CB 1F           	db 0x1F
254+  80CC 00           	db 0x00
255+  80CD 1C           	db 0x1C
256+  80CE 00           	db 0x00
257+  80CF 00           	db 0x00
258+  80D0              ; Item[26] (offset:208)
259+  80D0 E0           	db 0xE0
260+  80D1 20           	db 0x20
261+  80D2 E0           	db 0xE0
262+  80D3 E0           	db 0xE0
263+  80D4 00           	db 0x00
264+  80D5 E0           	db 0xE0
265+  80D6 C0           	db 0xC0
266+  80D7 C0           	db 0xC0
267+  80D8              ; Item[27] (offset:216)
268+  80D8 1F           	db 0x1F
269+  80D9 1E           	db 0x1E
270+  80DA 1F           	db 0x1F
271+  80DB 1F           	db 0x1F
272+  80DC 00           	db 0x00
273+  80DD 1C           	db 0x1C
274+  80DE 0C           	db 0x0C
275+  80DF 0C           	db 0x0C
276+  80E0              ; Item[28] (offset:224)
277+  80E0 E0           	db 0xE0
278+  80E1 20           	db 0x20
279+  80E2 E0           	db 0xE0
280+  80E3 E0           	db 0xE0
281+  80E4 00           	db 0x00
282+  80E5 E0           	db 0xE0
283+  80E6 00           	db 0x00
284+  80E7 00           	db 0x00
285+  80E8              ; Item[29] (offset:232)
286+  80E8 0F           	db 0x0F
287+  80E9 1F           	db 0x1F
288+  80EA 00           	db 0x00
289+  80EB 00           	db 0x00
290+  80EC 1F           	db 0x1F
291+  80ED 78           	db 0x78
292+  80EE 78           	db 0x78
293+  80EF 18           	db 0x18
294+  80F0              ; Item[30] (offset:240)
295+  80F0 80           	db 0x80
296+  80F1 C0           	db 0xC0
297+  80F2 E0           	db 0xE0
298+  80F3 00           	db 0x00
299+  80F4 C0           	db 0xC0
300+  80F5 C0           	db 0xC0
301+  80F6 C0           	db 0xC0
302+  80F7 C0           	db 0xC0
303+  80F8              ; Item[31] (offset:248)
304+  80F8 3F           	db 0x3F
305+  80F9 23           	db 0x23
306+  80FA 3F           	db 0x3F
307+  80FB 3F           	db 0x3F
308+  80FC 00           	db 0x00
309+  80FD 39           	db 0x39
310+  80FE 18           	db 0x18
311+  80FF 18           	db 0x18
312+  8100              ; Item[32] (offset:256)
313+  8100 C0           	db 0xC0
314+  8101 C0           	db 0xC0
315+  8102 C0           	db 0xC0
316+  8103 C0           	db 0xC0
317+  8104 00           	db 0x00
318+  8105 C0           	db 0xC0
319+  8106 C0           	db 0xC0
320+  8107 00           	db 0x00
321+  8108              ; Item[33] (offset:264)
322+  8108 00           	db 0x00
323+  8109 00           	db 0x00
324+  810A 07           	db 0x07
325+  810B 00           	db 0x00
326+  810C 00           	db 0x00
327+  810D 03           	db 0x03
328+  810E 03           	db 0x03
329+  810F 00           	db 0x00
330+  8110              ; Item[34] (offset:272)
331+  8110 7C           	db 0x7C
332+  8111 FE           	db 0xFE
333+  8112 FE           	db 0xFE
334+  8113 00           	db 0x00
335+  8114 FE           	db 0xFE
336+  8115 C6           	db 0xC6
337+  8116 C6           	db 0xC6
338+  8117 C6           	db 0xC6
339+  8118              ; Item[35] (offset:280)
340+  8118 01           	db 0x01
341+  8119 01           	db 0x01
342+  811A 01           	db 0x01
343+  811B 01           	db 0x01
344+  811C 00           	db 0x00
345+  811D 01           	db 0x01
346+  811E 03           	db 0x03
347+  811F 00           	db 0x00
348+  8120              ; Item[36] (offset:288)
349+  8120 FE           	db 0xFE
350+  8121 1E           	db 0x1E
351+  8122 FE           	db 0xFE
352+  8123 FE           	db 0xFE
353+  8124 00           	db 0x00
354+  8125 CE           	db 0xCE
355+  8126 86           	db 0x86
356+  8127 00           	db 0x00
357+  8128              ; Item[37] (offset:296)
358+  8128 3E           	db 0x3E
359+  8129 7F           	db 0x7F
360+  812A 7F           	db 0x7F
361+  812B 00           	db 0x00
362+  812C 7F           	db 0x7F
363+  812D 63           	db 0x63
364+  812E 63           	db 0x63
365+  812F 63           	db 0x63
366+  8130              ; Item[38] (offset:304)
367+  8130 00           	db 0x00
368+  8131 00           	db 0x00
369+  8132 E0           	db 0xE0
370+  8133 00           	db 0x00
371+  8134 00           	db 0x00
372+  8135 C0           	db 0xC0
373+  8136 C0           	db 0xC0
374+  8137 00           	db 0x00
375+  8138              ; Item[39] (offset:312)
376+  8138 7F           	db 0x7F
377+  8139 78           	db 0x78
378+  813A 7F           	db 0x7F
379+  813B 7F           	db 0x7F
380+  813C 00           	db 0x00
381+  813D 73           	db 0x73
382+  813E 61           	db 0x61
383+  813F 00           	db 0x00
384+  8140              ; Item[40] (offset:320)
385+  8140 80           	db 0x80
386+  8141 80           	db 0x80
387+  8142 80           	db 0x80
388+  8143 80           	db 0x80
389+  8144 00           	db 0x00
390+  8145 80           	db 0x80
391+  8146 C0           	db 0xC0
392+  8147 00           	db 0x00
393+  8148              ; Item[41] (offset:328)
394+  8148 01           	db 0x01
395+  8149 03           	db 0x03
396+  814A 07           	db 0x07
397+  814B 00           	db 0x00
398+  814C 03           	db 0x03
399+  814D 03           	db 0x03
400+  814E 03           	db 0x03
401+  814F 03           	db 0x03
402+  8150              ; Item[42] (offset:336)
403+  8150 F0           	db 0xF0
404+  8151 F8           	db 0xF8
405+  8152 00           	db 0x00
406+  8153 00           	db 0x00
407+  8154 F8           	db 0xF8
408+  8155 1E           	db 0x1E
409+  8156 1E           	db 0x1E
410+  8157 18           	db 0x18
411+  8158              ; Item[43] (offset:344)
412+  8158 03           	db 0x03
413+  8159 03           	db 0x03
414+  815A 03           	db 0x03
415+  815B 03           	db 0x03
416+  815C 00           	db 0x00
417+  815D 03           	db 0x03
418+  815E 03           	db 0x03
419+  815F 00           	db 0x00
420+  8160              ; Item[44] (offset:352)
421+  8160 FC           	db 0xFC
422+  8161 C4           	db 0xC4
423+  8162 FC           	db 0xFC
424+  8163 FC           	db 0xFC
425+  8164 00           	db 0x00
426+  8165 9C           	db 0x9C
427+  8166 18           	db 0x18
428+  8167 18           	db 0x18
429+  8168              ; Patterns size: 360 Bytes
430+  8168
# file closed: ./inc/TILES.asm
 11   8168                      INCLUDE "SCREEN.asm"
# file opened: ./inc/SCREEN.asm
  1+  8168              ; ===================================================================
  2+  8168              ; Screen subroutines
  3+  8168              ; ===================================================================
  4+  8168
  5+  8168
  6+  8168
  7+  8168              ;------------------------------------------------------------------------
  8+  8168              ; Load 8x8 tiles into RAM
  9+  8168              ; INPUT: -
 10+  8168              ; OUTPUT: -
 11+  8168              ; MODIFIES: DE, HL, BC
 12+  8168              ;------------------------------------------------------------------------
 13+  8168              Screen_LoadTiles:
 14+  8168 F3                   DI                      ; Interrupts disabled
 15+  8169 11 40 9C             LD      DE, RAM_CHAR_SET_ADDRESS
 16+  816C 21 00 80             LD      HL, TILES_DEF
 17+  816F 01 68 01             LD      BC, 360
 18+  8172 ED B0                LDIR
 19+  8174 FB                   EI                      ; Interrupts enabled
 20+  8175 C9                   RET
 21+  8176
 22+  8176              ;------------------------------------------------------------------------
 23+  8176              ; Clear the screen and set attributes
 24+  8176              ; INPUT: -
 25+  8176              ; OUTPUT: -
 26+  8176              ; MODIFIES: AF, DE, HL, BC
 27+  8176              ;------------------------------------------------------------------------
 28+  8176              Screen_Clear:
 29+  8176                      ;----------------------------------------------------------
 30+  8176                      ; Set border to black
 31+  8176                      ;----------------------------------------------------------
 32+  8176 3E 00                LD   A, 0           ; 0 in the lower 3 bits = black
 33+  8178 D3 FE                OUT  (254), A       ; Send A to port 0xFE
 34+  817A
 35+  817A                      ;----------------------------------------------------------
 36+  817A                      ; Clear 6144 bytes of screen pixel area (0x4000..0x57FF)
 37+  817A                      ;----------------------------------------------------------
 38+  817A
 39+  817A 21 00 40             LD   HL, 0x4000      ; Start address of pixel area
 40+  817D 11 01 40             LD   DE, 0x4001      ; DE = HL + 1 for LDIR
 41+  8180 01 00 18             LD   BC, 6144        ; Number of bytes to clear
 42+  8183 36 00                LD   (HL), 0         ; Store 0 in the first byte
 43+  8185 ED B0                LDIR                 ; Repeats until BC = 0 (fills with 0)
 44+  8187
 45+  8187                      ;----------------------------------------------------------
 46+  8187                      ; Fill 768 bytes of attributes area (0x5800..0x5AFF)
 47+  8187                      ; with 0x07 (white on black)
 48+  8187                      ;----------------------------------------------------------
 49+  8187
 50+  8187 21 00 58             LD   HL, 0x5800      ; Start address of attributes area
 51+  818A 11 01 58             LD   DE, 0x5801      ; DE = HL + 1 for LDIR
 52+  818D 01 00 03             LD   BC, 768         ; Number of attribute bytes
 53+  8190 36 07                LD   (HL), 0x07      ; Attribute = 0x07 (white on black)
 54+  8192 ED B0                LDIR                 ; Fill the attribute area with 0x07
 55+  8194
 56+  8194 C9                   RET
 57+  8195
 58+  8195              ;------------------------------------------------------------------------
 59+  8195              ; Print a single RAM character out to a screen address
 60+  8195              ; INPUT:
 61+  8195              ;   A: Character to print
 62+  8195              ;   D: Character Y position
 63+  8195              ;   E: Character X position
 64+  8195              ; OUTPUT: -
 65+  8195              ; MODIFIES: -
 66+  8195              ;------------------------------------------------------------------------
 67+  8195              Screen_PrintRamChar:
 68+  8195 D5                   PUSH    DE
 69+  8196 D9                   EXX                                 ; Backup registers BC, DE, HL
 70+  8197 D1                   POP     DE
 71+  8198 F5                   PUSH    AF
 72+  8199 21 40 9C             LD      HL, RAM_CHAR_SET_ADDRESS    ; Character set bitmap data in ROM
 73+  819C 06 00                LD      B,0                         ; BC = character code
 74+  819E 4F                   LD      C, A
 75+  819F CB 21                SLA     C                           ; Multiply by 8 by shifting
 76+  81A1 CB 10                RL      B
 77+  81A3 CB 21                SLA     C
 78+  81A5 CB 10                RL      B
 79+  81A7 CB 21                SLA     C
 80+  81A9 CB 10                RL      B
 81+  81AB 09                   ADD     HL, BC                      ; And add to HL to get first byte of character
 82+  81AC CD E1 81             CALL    Screen_GetCharAddress       ; Get screen position in DE
 83+  81AF 06 08                LD      B,8                         ; Loop counter - 8 bytes per character
 84+  81B1              PrintRamCharL1:
 85+  81B1 7E                   LD      A,(HL)                      ; Get the byte from the ROM into A
 86+  81B2 12                   LD      (DE),A                      ; Stick A onto the screen
 87+  81B3 23                   INC     HL                          ; Goto next byte of character
 88+  81B4 14                   INC     D                           ; Goto next line on screen
 89+  81B5 10 FA                DJNZ    PrintRamCharL1              ; Loop around whilst it is Not Zero (NZ)
 90+  81B7 D9                   EXX                                 ; Restore registers BC, DE, HL
 91+  81B8 F1                   POP     AF
 92+  81B9 C9                   RET
 93+  81BA              ;------------------------------------------------------------------------
 94+  81BA              ; Print a single ROM character out to a screen address
 95+  81BA              ; INPUT:
 96+  81BA              ;   A: Character to print
 97+  81BA              ;   D: Character Y position
 98+  81BA              ;   E: Character X position
 99+  81BA              ; OUTPUT: -
100+  81BA              ; MODIFIES: -
101+  81BA              ;------------------------------------------------------------------------
102+  81BA              Screen_PrintRomChar:
103+  81BA D5                   PUSH    DE
104+  81BB D9                   EXX                                 ; Backup registers BC, DE, HL
105+  81BC D1                   POP     DE
106+  81BD F5                   PUSH    AF
107+  81BE 21 00 3D             LD      HL, ROM_CHAR_SET_ADDRESS    ; Character set bitmap data in ROM
108+  81C1 06 00                LD      B,0                         ; BC = character code
109+  81C3 D6 20                SUB     32                          ; Adjust for the character set
110+  81C5 4F                   LD      C, A
111+  81C6 CB 21                SLA     C                           ; Multiply by 8 by shifting
112+  81C8 CB 10                RL      B
113+  81CA CB 21                SLA     C
114+  81CC CB 10                RL      B
115+  81CE CB 21                SLA     C
116+  81D0 CB 10                RL      B
117+  81D2 09                   ADD     HL, BC                      ; And add to HL to get first byte of character
118+  81D3 CD E1 81             CALL    Screen_GetCharAddress       ; Get screen position in DE
119+  81D6 06 08                LD      B,8                         ; Loop counter - 8 bytes per character
120+  81D8              PrintRomCharL1:
121+  81D8 7E                   LD      A,(HL)                      ; Get the byte from the ROM into A
122+  81D9 12                   LD      (DE),A                      ; Stick A onto the screen
123+  81DA 23                   INC     HL                          ; Goto next byte of character
124+  81DB 14                   INC     D                           ; Goto next line on screen
125+  81DC 10 FA                DJNZ    PrintRomCharL1              ; Loop around whilst it is Not Zero (NZ)
126+  81DE D9                   EXX                                 ; Restore registers BC, DE, HL
127+  81DF F1                   POP     AF
128+  81E0 C9                   RET
129+  81E1              ;------------------------------------------------------------------------
130+  81E1              ; Get screen address from a character (X,Y) coordinate
131+  81E1              ; INPUT:
132+  81E1              ;   D: Y character position (0-23)
133+  81E1              ;   E: X character position (0-31)
134+  81E1              ; OUTPUT:
135+  81E1              ;   DE: screen address
136+  81E1              ; MODIFIES: A
137+  81E1              ;------------------------------------------------------------------------
138+  81E1              Screen_GetCharAddress:
139+  81E1 7A                   LD      A,D
140+  81E2 E6 07                AND     %00000111
141+  81E4 1F                   RRA
142+  81E5 1F                   RRA
143+  81E6 1F                   RRA
144+  81E7 1F                   RRA
145+  81E8 B3                   OR      E
146+  81E9 5F                   LD      E,A
147+  81EA 7A                   LD      A,D
148+  81EB E6 18                AND     %00011000
149+  81ED F6 40                OR      %01000000
150+  81EF 57                   LD      D,A
151+  81F0 C9                   RET
152+  81F1              ;------------------------------------------------------------------------
153+  81F1              ; Put a 16x16 tile on the screen
154+  81F1              ; INPUT:
155+  81F1              ;   A: Tile number (0-255)
156+  81F1              ;   D: Y position (0-23)
157+  81F1              ;   E: X position (0-31)
158+  81F1              ; OUTPUT: -
159+  81F1              ; MODIFIES: A
160+  81F1              ;------------------------------------------------------------------------
161+  81F1              Screen_Print16x16Tale:
162+  81F1 CD 95 81             CALL Screen_PrintRamChar        ; Print the first 8x8 tile
163+  81F4 1C                   INC     E                       ; Move to the right for the second tile
164+  81F5 3C                   INC     A                       ; Increment the tile number
165+  81F6 CD 95 81             CALL Screen_PrintRamChar        ; Print the second 8x8 tile
166+  81F9 1D                   DEC     E                       ; Move back to the left for the first tile
167+  81FA 14                   INC     D                       ; Move down for the next row of tiles
168+  81FB 3C                   INC     A                       ; Increment the tile number
169+  81FC CD 95 81             CALL Screen_PrintRamChar        ; Print the third 8x8 tile
170+  81FF 1C                   INC     E                       ; Move to the right for the second tile
171+  8200 3C                   INC     A                       ; Increment the tile number
172+  8201 CD 95 81             CALL Screen_PrintRamChar        ; print the fourth 8x8 tile
173+  8204 1D                   DEC     E                       ; Move back to the left for the first tile
174+  8205 15                   DEC     D                       ; Move back up for the next row of tiles
175+  8206 3D                   DEC     A                       ; Decrement the tile number
176+  8207 3D                   DEC     A                       ; Decrement the tile number
177+  8208 3D                   DEC     A                       ; Decrement the tile number
178+  8209 C9                   RET
179+  820A
180+  820A              ;------------------------------------------------------------------------
181+  820A              ; Constants
182+  820A              ;------------------------------------------------------------------------
183+  820A              SCR_BASE                        EQU 0x4000      ; Base address of the Spectrum screen
184+  820A              ATTR_BASE                       EQU 0x5800      ; Start of the attribute area
185+  820A              ROM_CHAR_SET_ADDRESS            EQU 0x3D00      ; Start of the ROM character set
186+  820A              RAM_CHAR_SET_ADDRESS            EQU 0x9C40      ; Start of the RAM character set
# file closed: ./inc/SCREEN.asm
 12   820A                      INCLUDE "INPUTS.asm"
# file opened: ./inc/INPUTS.asm
  1+  820A              ; ===================================================================
  2+  820A              ; Inputs
  3+  820A              ; ===================================================================
  4+  820A
  5+  820A              ; -----------------------------------------------------------------------------
  6+  820A              ; CheckInput
  7+  820A              ; -----------------------------------------------------------------------------
  8+  820A              ; Reads Kempston joystick (port #1F) and the keyboard (Q, A, O, P).
  9+  820A              ; Returns in A one of these values:
 10+  820A              ;   0..7 => direction pressed
 11+  820A              ;   255 => no direction
 12+  820A              ;
 13+  820A              ; Kempston bits:
 14+  820A              ;   bit0=right, bit1=left, bit2=down, bit3=up
 15+  820A              ; We decode to 8 directions with possible diagonals.
 16+  820A              ;
 17+  820A              ; If no joystick direction, we scan the keys:
 18+  820A              ;   Q => up,    A => down
 19+  820A              ;   O => left,  P => right
 20+  820A              ; Combinations => diagonals.
 21+  820A              ;
 22+  820A              ; The code is just an example. Adapt it as needed.
 23+  820A              ; -----------------------------------------------------------------------------
 24+  820A
 25+  820A              CheckInput:
 26+  820A
 27+  820A                  ; 1) Read Kempston joystick
 28+  820A                  ;IN    A,(#1F)      ; read port #1F into A
 29+  820A                  ;AND   #0F          ; we only care about bits 0..3
 30+  820A                  ;CP    0
 31+  820A                  ;JR    NZ,DecodeJoystick
 32+  820A
 33+  820A                  ; if A=0 => no joystick direction => check keyboard
 34+  820A 18 3E            JR    ReadKeyboard
 35+  820C
 36+  820C              ; -----------------------------------------------------------------------------
 37+  820C              ; DecodeJoystick: bits 3..0 => up,down,left,right => produce a direction
 38+  820C              ; -----------------------------------------------------------------------------
 39+  820C              DecodeJoystick:
 40+  820C 47               LD    B,A        ; keep a copy in B
 41+  820D                  ; bit3=up=8, bit2=down=4, bit1=left=2, bit0=right=1
 42+  820D
 43+  820D                  ; We want to combine them for diagonals: up+left => 4, up+right => 5, etc.
 44+  820D                  ; E.g. if bit3 & bit1 => up-left => direction=4
 45+  820D                  ; We'll do a simple check approach:
 46+  820D
 47+  820D 3E FF            LD    A,#FF      ; default = none, we'll override
 48+  820F                  ; check if up
 49+  820F CB 58            BIT   3,B
 50+  8211 28 11            JR    Z,NoUp
 51+  8213                  ; up=1
 52+  8213                  ; check if left
 53+  8213 CB 48            BIT   1,B
 54+  8215 20 07            JR    NZ,UpLeft
 55+  8217                  ; check if right
 56+  8217 CB 40            BIT   0,B
 57+  8219 20 06            JR    NZ,UpRight
 58+  821B                  ; otherwise pure up
 59+  821B 3E 02            LD    A,2
 60+  821D C9               RET
 61+  821E              UpLeft:
 62+  821E 3E 04            LD    A,4
 63+  8220 C9               RET
 64+  8221              UpRight:
 65+  8221 3E 05            LD    A,5
 66+  8223 C9               RET
 67+  8224              NoUp:
 68+  8224                  ; check if down
 69+  8224 CB 50            BIT   2,B
 70+  8226 28 11            JR    Z,NoDown
 71+  8228                  ; down=1
 72+  8228                  ; check if left
 73+  8228 CB 48            BIT   1,B
 74+  822A 20 07            JR    NZ,DownLeft
 75+  822C                  ; check if right
 76+  822C CB 40            BIT   0,B
 77+  822E 20 06            JR    NZ,DownRight
 78+  8230                  ; otherwise pure down
 79+  8230 3E 03            LD    A,3
 80+  8232 C9               RET
 81+  8233              DownLeft:
 82+  8233 3E 06            LD    A,6
 83+  8235 C9               RET
 84+  8236              DownRight:
 85+  8236 3E 07            LD    A,7
 86+  8238 C9               RET
 87+  8239              NoDown:
 88+  8239                  ; no up, no down => check left or right
 89+  8239 CB 48            BIT   1,B
 90+  823B 20 07            JR    NZ,JustLeft
 91+  823D CB 40            BIT   0,B
 92+  823F 20 06            JR    NZ,JustRight
 93+  8241                  ; if we get here => something else, but we said bits 0..3 => must be 0 => not possible
 94+  8241 3E FF            LD    A,#FF
 95+  8243 C9               RET
 96+  8244              JustLeft:
 97+  8244 3E 00            LD    A,0
 98+  8246 C9               RET
 99+  8247              JustRight:
100+  8247 3E 01            LD    A,1
101+  8249 C9               RET
102+  824A
103+  824A              ; -----------------------------------------------------------------------------
104+  824A              ; ReadKeyboard
105+  824A              ; -----------------------------------------------------------------------------
106+  824A              ReadKeyboard:
107+  824A                  ; We check Q, A, O, P by reading rows 2,1,5.
108+  824A                  ; We'll accumulate bits "up,down,left,right" in registers,
109+  824A                  ; then do the same decode logic as above.
110+  824A
111+  824A 3E FF            LD    A,#FF       ; default no bits
112+  824C 47               LD    B,A         ; B=bits:  bit3=up, bit2=down, bit1=left, bit0=right => 0=pressed
113+  824D
114+  824D                  ; --- check Q => row=2 => bit0
115+  824D 3E FB            LD    A,%11111011 ; =0xFB => bit2=0 => scanning row2
116+  824F D3 FE            OUT   (#FE),A
117+  8251 DB FE            IN    A,(#FE)
118+  8253 CB 47            BIT   0,A
119+  8255 20 02            JR    NZ,NoQ
120+  8257                  ; Q pressed => set "up" in B => bit3 => 1
121+  8257 CB D8            SET   3,B
122+  8259              NoQ:
123+  8259
124+  8259                  ; --- check A => row=1 => bit0
125+  8259 3E FD            LD    A,%11111101 ; =0xFD => bit1=0 => scanning row1
126+  825B D3 FE            OUT   (#FE),A
127+  825D DB FE            IN    A,(#FE)
128+  825F CB 47            BIT   0,A
129+  8261 20 02            JR    NZ,NoA
130+  8263                  ; A pressed => set "down" => bit2 => 1
131+  8263 CB D0            SET   2,B
132+  8265              NoA:
133+  8265
134+  8265                  ; --- check row5 => O(left=bit1), P(right=bit0)
135+  8265 3E DF            LD    A,%11011111 ; =0xDF => bit5=0 => scanning row5
136+  8267 D3 FE            OUT   (#FE),A
137+  8269 DB FE            IN    A,(#FE)
138+  826B CB 4F            BIT   1,A
139+  826D 20 02            JR    NZ,NoO
140+  826F                  ; O pressed => set "left" => bit1 => 1
141+  826F CB C8            SET   1,B
142+  8271              NoO:
143+  8271 CB 47            BIT   0,A
144+  8273 20 02            JR    NZ,NoP
145+  8275                  ; P pressed => set "right" => bit0 => 1
146+  8275 CB C0            SET   0,B
147+  8277              NoP:
148+  8277
149+  8277                  ; Ora B ha i bit (3=up,2=down,1=left,0=right) impostati a 1 se tasto premuto.
150+  8277                  ; Se tutti 0 => nessuna direzione. Decodifichiamo come sopra.
151+  8277
152+  8277 78               LD    A,B
153+  8278 FE 00            CP    0
154+  827A 28 3E            JR    Z,NoKeyboardDirection
155+  827C                  ; Non è zero => decode con stessa logica di sopra.
156+  827C
157+  827C 4F               LD    C,A
158+  827D 3E FF            LD    A,#FF
159+  827F
160+  827F                  ; up?
161+  827F CB 59            BIT   3,C
162+  8281 28 11            JR    Z,KbNoUp
163+  8283                  ; up=1
164+  8283 CB 49            BIT   1,C
165+  8285 20 07            JR    NZ,KbUpLeft
166+  8287 CB 41            BIT   0,C
167+  8289 20 06            JR    NZ,KbUpRight
168+  828B 3E 02            LD    A,2
169+  828D C9               RET
170+  828E              KbUpLeft:
171+  828E 3E 04            LD    A,4
172+  8290 C9               RET
173+  8291              KbUpRight:
174+  8291 3E 05            LD    A,5
175+  8293 C9               RET
176+  8294
177+  8294              KbNoUp:
178+  8294 CB 51            BIT   2,C
179+  8296 28 11            JR    Z,KbNoDown
180+  8298                  ; down=1
181+  8298 CB 49            BIT   1,C
182+  829A 20 07            JR    NZ,KbDownLeft
183+  829C CB 41            BIT   0,C
184+  829E 20 06            JR    NZ,KbDownRight
185+  82A0 3E 03            LD    A,3
186+  82A2 C9               RET
187+  82A3              KbDownLeft:
188+  82A3 3E 06            LD    A,6
189+  82A5 C9               RET
190+  82A6              KbDownRight:
191+  82A6 3E 07            LD    A,7
192+  82A8 C9               RET
193+  82A9
194+  82A9              KbNoDown:
195+  82A9 CB 49            BIT   1,C
196+  82AB 20 07            JR    NZ,KbLeft
197+  82AD CB 41            BIT   0,C
198+  82AF 20 06            JR    NZ,KbRight
199+  82B1 3E FF            LD    A,#FF
200+  82B3 C9               RET
201+  82B4              KbLeft:
202+  82B4 3E 00            LD    A,0
203+  82B6 C9               RET
204+  82B7              KbRight:
205+  82B7 3E 01            LD    A,1
206+  82B9 C9               RET
207+  82BA
208+  82BA              NoKeyboardDirection:
209+  82BA 3E FF            LD    A,#FF
210+  82BC C9               RET
211+  82BD
# file closed: ./inc/INPUTS.asm
 13   82BD                      INCLUDE "GAMESUBS.asm"
# file opened: ./inc/GAMESUBS.asm
  1+  82BD              ; ===================================================================
  2+  82BD              ; Game subroutines
  3+  82BD              ; ===================================================================
  4+  82BD
  5+  82BD              ;------------------------------------------------------------------------
  6+  82BD              ; Show game menu
  7+  82BD              ; INPUT: -
  8+  82BD              ; OUTPUT: -
  9+  82BD              ; MODIFIES: AF, DE, HL, BC
 10+  82BD              ;------------------------------------------------------------------------
 11+  82BD              GameSubs_ShowMenu:
 12+  82BD CD 76 81             CALL    Screen_Clear            ; Clear screen
 13+  82C0 1E 00                LD      E, 0
 14+  82C2 16 00                LD      D, 0
 15+  82C4 3E 00                LD      A, TILE_SAMPR_RIGHT
 16+  82C6 CD F1 81             CALL    Screen_Print16x16Tale  ; Print the title screen
 17+  82C9 C9                   RET
 18+  82CA
 19+  82CA              ; -----------------------------------------------------------------------------
 20+  82CA              ; TileMove8Directions
 21+  82CA              ; -----------------------------------------------------------------------------
 22+  82CA              ; Gestisce 8 direzioni (0..7) con 2 frame ciascuna, ma le direzioni 2=Up e 3=Down
 23+  82CA              ; hanno in realtà 4 frame totali, perché si sdoppiano se l'omino è girato a
 24+  82CA              ; sinistra o a destra. La struttura prevede quindi:
 25+  82CA              ;
 26+  82CA              ; [0] Xpos, [1] Ypos
 27+  82CA              ; [2] DirCorrente(0..7), [3] ContatoreFrame(0..2)
 28+  82CA              ; Frames offset:
 29+  82CA              ;   0=left: [4,5]
 30+  82CA              ;   1=right:[6,7]
 31+  82CA              ;   2=up:    => up-left:[8,9], up-right:[10,11]
 32+  82CA              ;   3=down:  => down-left:[12,13],down-right:[14,15]
 33+  82CA              ;   4=up-left:[16,17]
 34+  82CA              ;   5=up-right:[18,19]
 35+  82CA              ;   6=down-left:[20,21]
 36+  82CA              ;   7=down-right:[22,23]
 37+  82CA              ;
 38+  82CA              ; [24] MinX, [25] MaxX, [26] MinY, [27] MaxY
 39+  82CA              ; -----------------------------------------------------------------------------
 40+  82CA              ; INPUT:
 41+  82CA              ;   HL = puntatore alla struttura
 42+  82CA              ;   A  = direzione nuova (0..7)
 43+  82CA              ; OUTPUT in A:
 44+  82CA              ;   0 => ok, 1..4 => limite sx/dx/alto/basso raggiunto
 45+  82CA              ; -----------------------------------------------------------------------------
 46+  82CA
 47+  82CA              TileMove8Directions:
 48+  82CA
 49+  82CA                  ; Carica HL in IX
 50+  82CA E5               PUSH  HL
 51+  82CB DD E1            POP   IX
 52+  82CD
 53+  82CD                  ; Confronta la direzione nuova (B) con quella vecchia ([2])
 54+  82CD 47               LD    B,A
 55+  82CE DD 7E 02         LD    A,(IX+2)
 56+  82D1 B8               CP    B
 57+  82D2 C2 EA 82         JP    NZ,DirectionChanged
 58+  82D5
 59+  82D5                  ; stessa direzione => controlla ContatoreFrame
 60+  82D5 DD 7E 03         LD    A,(IX+3)
 61+  82D8 B7               OR    A
 62+  82D9 CA F5 82         JP    Z,StartFromStopped
 63+  82DC
 64+  82DC              SameDirection:
 65+  82DC 4F               LD    C,A            ; C=ContatoreFrame
 66+  82DD FE 01            CP    1
 67+  82DF CA 00 83         JP    Z,DoFrame1
 68+  82E2 FE 02            CP    2
 69+  82E4 CA 1C 83         JP    Z,DoFrame2
 70+  82E7 C3 7E 83         JP    EndNoAction
 71+  82EA
 72+  82EA              ; -----------------------------------------------------------------------------
 73+  82EA              ; Se direzione è cambiata o contatore=0 => disegna frame1 e stop
 74+  82EA              ; -----------------------------------------------------------------------------
 75+  82EA              DirectionChanged:
 76+  82EA DD 70 02         LD    (IX+2),B
 77+  82ED 3E 01            LD    A,1
 78+  82EF DD 77 03         LD    (IX+3),A
 79+  82F2 C3 81 83         JP    DrawFrame1AndRetNoMove
 80+  82F5
 81+  82F5              StartFromStopped:
 82+  82F5 DD 70 02         LD    (IX+2),B
 83+  82F8 3E 01            LD    A,1
 84+  82FA DD 77 03         LD    (IX+3),A
 85+  82FD C3 81 83         JP    DrawFrame1AndRetNoMove
 86+  8300
 87+  8300              ; -----------------------------------------------------------------------------
 88+  8300              ; DoFrame1 => disegna il frame1
 89+  8300              ; -----------------------------------------------------------------------------
 90+  8300              DoFrame1:
 91+  8300 DD 7E 02         LD    A,(IX+2)   ; direzione
 92+  8303 CD 98 83         CALL  GetFrame1Offset   ; => B=offset
 93+  8306 DD E5            PUSH  IX
 94+  8308 E1               POP   HL
 95+  8309 09               ADD   HL,BC
 96+  830A 7E               LD    A,(HL)     ; tile ID
 97+  830B
 98+  830B DD 56 01         LD    D,(IX+1)   ; Ypos
 99+  830E DD 5E 00         LD    E,(IX+0)   ; Xpos
100+  8311 CD F1 81         CALL  Screen_Print16x16Tale
101+  8314
102+  8314 3E 02            LD    A,2
103+  8316 DD 77 03         LD    (IX+3),A   ; contatore=2
104+  8319 3E 00            LD    A,0
105+  831B C9               RET
106+  831C
107+  831C              ; -----------------------------------------------------------------------------
108+  831C              ; DoFrame2 => disegna il frame2, poi sposta
109+  831C              ; -----------------------------------------------------------------------------
110+  831C              DoFrame2:
111+  831C DD 7E 02         LD    A,(IX+2)
112+  831F CD F2 83         CALL  GetFrame2Offset
113+  8322 DD E5            PUSH  IX
114+  8324 E1               POP   HL
115+  8325 09               ADD   HL,BC
116+  8326 7E               LD    A,(HL)
117+  8327
118+  8327 DD 56 01         LD    D,(IX+1)
119+  832A DD 5E 00         LD    E,(IX+0)
120+  832D CD F1 81         CALL  Screen_Print16x16Tale
121+  8330
122+  8330 3E 01            LD    A,1
123+  8332 DD 77 03         LD    (IX+3),A
124+  8335
125+  8335                  ; calcolo dx,dy
126+  8335 DD 7E 02         LD    A,(IX+2)
127+  8338 CD 4C 84         CALL  GetDxDy  ; B=dx, C=dy
128+  833B
129+  833B                  ; X => oldX + dx
130+  833B DD 7E 00         LD    A,(IX+0)
131+  833E 80               ADD   A,B
132+  833F 47               LD    B,A
133+  8340 DD 7E 18         LD    A,(IX+24)  ; MinX
134+  8343 B8               CP    B
135+  8344 DA 55 83         JP    C,LimitLeft   ; se B<MinX => limita sinistra
136+  8347
137+  8347              CheckMaxX:
138+  8347 78               LD    A,B
139+  8348 DD 6E 19         LD    L,(IX+25)  ; MaxX
140+  834B BD               CP    L
141+  834C DA 58 83         JP    C,StoreXtemp
142+  834F CA 58 83         JP    Z,StoreXtemp
143+  8352 3E 02            LD    A,2
144+  8354 C9               RET
145+  8355
146+  8355              LimitLeft:
147+  8355 3E 01            LD    A,1
148+  8357 C9               RET
149+  8358
150+  8358              StoreXtemp:
151+  8358                  ; Y => oldY + dy
152+  8358 DD 7E 01         LD    A,(IX+1)
153+  835B 81               ADD   A,C
154+  835C 4F               LD    C,A
155+  835D DD 7E 1A         LD    A,(IX+26)  ; MinY
156+  8360 B9               CP    C
157+  8361 DA 72 83         JP    C,LimitTop
158+  8364
159+  8364              CheckMaxY:
160+  8364 79               LD    A,C
161+  8365 DD 6E 1B         LD    L,(IX+27)
162+  8368 BD               CP    L
163+  8369 DA 75 83         JP    C,FinalStore
164+  836C CA 75 83         JP    Z,FinalStore
165+  836F 3E 04            LD    A,4
166+  8371 C9               RET
167+  8372
168+  8372              LimitTop:
169+  8372 3E 03            LD    A,3
170+  8374 C9               RET
171+  8375
172+  8375              FinalStore:
173+  8375 DD 70 00         LD    (IX+0),B
174+  8378 DD 71 01         LD    (IX+1),C
175+  837B 3E 00            LD    A,0
176+  837D C9               RET
177+  837E
178+  837E              EndNoAction:
179+  837E 3E 00            LD    A,0
180+  8380 C9               RET
181+  8381
182+  8381              ; -----------------------------------------------------------------------------
183+  8381              ; DrawFrame1AndRetNoMove
184+  8381              ; -----------------------------------------------------------------------------
185+  8381              DrawFrame1AndRetNoMove:
186+  8381 DD 7E 02         LD    A,(IX+2)
187+  8384 CD 98 83         CALL  GetFrame1Offset
188+  8387 DD E5            PUSH  IX
189+  8389 E1               POP   HL
190+  838A 09               ADD   HL,BC
191+  838B 7E               LD    A,(HL)
192+  838C
193+  838C DD 56 01         LD    D,(IX+1)
194+  838F DD 5E 00         LD    E,(IX+0)
195+  8392 CD F1 81         CALL  Screen_Print16x16Tale
196+  8395
197+  8395 3E 00            LD    A,0
198+  8397 C9               RET
199+  8398
200+  8398              ; -----------------------------------------------------------------------------
201+  8398              ; GetFrame1Offset / GetFrame2Offset
202+  8398              ; -----------------------------------------------------------------------------
203+  8398              ; Qui gestiamo che se dir=2 (Up) => in [8..11]: up-left se orient sx, up-right se dx
204+  8398              ; dir=3 (Down) => in [12..15]:  down-left (se sx), down-right (se dx)
205+  8398              ; e le altre direzioni hanno i loro 2 slot fissi
206+  8398              ; -----------------------------------------------------------------------------
207+  8398
208+  8398              GetFrame1Offset:
209+  8398 4F               LD   C,A        ; direzione
210+  8399                  ; controlliamo l'orientamento => (IX+2)&1
211+  8399 DD 7E 02         LD   A,(IX+2)
212+  839C E6 01            AND  1
213+  839E 5F               LD   E,A        ; E=0 => sinistra, 1 => destra
214+  839F
215+  839F FE 00            CP   0
216+  83A1 CA CA 83         JP   Z,Gf1Left
217+  83A4 FE 01            CP   1
218+  83A6 CA CD 83         JP   Z,Gf1Right
219+  83A9 FE 02            CP   2
220+  83AB CA D0 83         JP   Z,Gf1Up
221+  83AE FE 03            CP   3
222+  83B0 CA DB 83         JP   Z,Gf1Down
223+  83B3 FE 04            CP   4
224+  83B5 CA E6 83         JP   Z,Gf1UpLeft
225+  83B8 FE 05            CP   5
226+  83BA CA E9 83         JP   Z,Gf1UpRight
227+  83BD FE 06            CP   6
228+  83BF CA EC 83         JP   Z,Gf1DownLeft
229+  83C2 FE 07            CP   7
230+  83C4 CA EF 83         JP   Z,Gf1DownRight
231+  83C7
232+  83C7              Gf1Default:
233+  83C7 06 04            LD   B,4
234+  83C9 C9               RET
235+  83CA
236+  83CA              Gf1Left:
237+  83CA 06 04            LD   B,4
238+  83CC C9               RET
239+  83CD              Gf1Right:
240+  83CD 06 06            LD   B,6
241+  83CF C9               RET
242+  83D0
243+  83D0              Gf1Up:
244+  83D0 7B               LD   A,E
245+  83D1 B7               OR   A
246+  83D2 CA D8 83         JP   Z,UpFacLeft1
247+  83D5 06 0A            LD   B,10   ; up-right => [10]
248+  83D7 C9               RET
249+  83D8              UpFacLeft1:
250+  83D8 06 08            LD   B,8
251+  83DA C9               RET
252+  83DB
253+  83DB              Gf1Down:
254+  83DB 7B               LD   A,E
255+  83DC B7               OR   A
256+  83DD CA E3 83         JP   Z,DownFacLeft1
257+  83E0 06 0E            LD   B,14   ; down-right => [14]
258+  83E2 C9               RET
259+  83E3              DownFacLeft1:
260+  83E3 06 0C            LD   B,12
261+  83E5 C9               RET
262+  83E6
263+  83E6              Gf1UpLeft:
264+  83E6 06 10            LD   B,16
265+  83E8 C9               RET
266+  83E9              Gf1UpRight:
267+  83E9 06 12            LD   B,18
268+  83EB C9               RET
269+  83EC              Gf1DownLeft:
270+  83EC 06 14            LD   B,20
271+  83EE C9               RET
272+  83EF              Gf1DownRight:
273+  83EF 06 16            LD   B,22
274+  83F1 C9               RET
275+  83F2
276+  83F2
277+  83F2              GetFrame2Offset:
278+  83F2 4F               LD   C,A
279+  83F3 DD 7E 02         LD   A,(IX+2)
280+  83F6 E6 01            AND  1
281+  83F8 5F               LD   E,A
282+  83F9
283+  83F9 FE 00            CP   0
284+  83FB CA 24 84         JP   Z,Gf2Left
285+  83FE FE 01            CP   1
286+  8400 CA 27 84         JP   Z,Gf2Right
287+  8403 FE 02            CP   2
288+  8405 CA 2A 84         JP   Z,Gf2Up
289+  8408 FE 03            CP   3
290+  840A CA 35 84         JP   Z,Gf2Down
291+  840D FE 04            CP   4
292+  840F CA 40 84         JP   Z,Gf2UpLeft
293+  8412 FE 05            CP   5
294+  8414 CA 43 84         JP   Z,Gf2UpRight
295+  8417 FE 06            CP   6
296+  8419 CA 46 84         JP   Z,Gf2DownLeft
297+  841C FE 07            CP   7
298+  841E CA 49 84         JP   Z,Gf2DownRight
299+  8421
300+  8421              Gf2Default:
301+  8421 06 05            LD   B,5
302+  8423 C9               RET
303+  8424
304+  8424              Gf2Left:
305+  8424 06 05            LD   B,5
306+  8426 C9               RET
307+  8427              Gf2Right:
308+  8427 06 07            LD   B,7
309+  8429 C9               RET
310+  842A
311+  842A              Gf2Up:
312+  842A 7B               LD   A,E
313+  842B B7               OR   A
314+  842C CA 32 84         JP   Z,UpFacLeft2
315+  842F 06 0B            LD   B,11   ; up-right => [11]
316+  8431 C9               RET
317+  8432              UpFacLeft2:
318+  8432 06 09            LD   B,9
319+  8434 C9               RET
320+  8435
321+  8435              Gf2Down:
322+  8435 7B               LD   A,E
323+  8436 B7               OR   A
324+  8437 CA 3D 84         JP   Z,DownFacLeft2
325+  843A 06 0F            LD   B,15
326+  843C C9               RET
327+  843D              DownFacLeft2:
328+  843D 06 0D            LD   B,13
329+  843F C9               RET
330+  8440
331+  8440              Gf2UpLeft:
332+  8440 06 11            LD   B,17
333+  8442 C9               RET
334+  8443              Gf2UpRight:
335+  8443 06 13            LD   B,19
336+  8445 C9               RET
337+  8446              Gf2DownLeft:
338+  8446 06 15            LD   B,21
339+  8448 C9               RET
340+  8449              Gf2DownRight:
341+  8449 06 17            LD   B,23
342+  844B C9               RET
343+  844C
344+  844C
345+  844C              ; -----------------------------------------------------------------------------
346+  844C              ; GetDxDy
347+  844C              ; -----------------------------------------------------------------------------
348+  844C              ; A=dir(0..7) => B=dx, C=dy
349+  844C              ; -----------------------------------------------------------------------------
350+  844C              GetDxDy:
351+  844C 11 58 84         LD   DE,DIRECTION_OFFESETS
352+  844F 87               ADD  A,A
353+  8450 4F               LD   C,A
354+  8451 D5               PUSH DE
355+  8452 E1               POP  HL
356+  8453 09               ADD  HL,BC
357+  8454 46               LD   B,(HL)
358+  8455 23               INC  HL
359+  8456 4E               LD   C,(HL)
360+  8457 C9               RET
361+  8458
362+  8458
363+  8458
364+  8458              ;------------------------------------------------------------------------
365+  8458              ; Constants
366+  8458              ;------------------------------------------------------------------------
367+  8458              TILE_DIRECTION_LEFT             EQU     0
368+  8458              TILE_DIRECTION_RIGHT:           EQU     1
369+  8458              TILE_DIRECTION_UP:              EQU     2
370+  8458              TILE_DIRECTION_DOWN:            EQU     3
371+  8458              TILE_DIRECTION_UP_LEFT:         EQU     4
372+  8458              TILE_DIRECTION_UP_RIGHT:        EQU     5
373+  8458              TILE_DIRECTION_DOWN_LEFT:       EQU     6
374+  8458              TILE_DIRECTION_DOWN_RIGHT:      EQU     7
375+  8458              DIRECTION_OFFESETS:
376+  8458 FE 00                    DB   -2,  0   ; DIR=0 => LEFT:       X-2, Y
377+  845A 02 00                    DB    2,  0   ; DIR=1 => RIGHT:      X+2, Y
378+  845C 00 FF                    DB    0, -1   ; DIR=2 => UP:         X,   Y-1
379+  845E 00 01                    DB    0,  1   ; DIR=3 => DOWN:       X,   Y+1
380+  8460 FE FF                    DB   -2, -1   ; DIR=4 => UP-LEFT:    X-2, Y-1
381+  8462 02 FF                    DB    2, -1   ; DIR=5 => UP-RIGHT:   X+2, Y-1
382+  8464 FE 01                    DB   -2,  1   ; DIR=6 => DOWN-LEFT:  X-2, Y+1
383+  8466 02 01                    DB    2,  1   ; DIR=7 => DOWN-RIGHT: X+2, Y+1
384+  8468              ;------------------------------------------------------------------------
385+  8468              ; Variables
386+  8468              ;------------------------------------------------------------------------
387+  8468              SAMPR_TILE_INFO:
388+  8468 00 00 00 00          DB      0x00, 0x00, 0x00, 0x00 ; Xpos, Ypos, DirCorrente, ContatoreFrame
389+  846C 0C 00                DB      TILE_SAMPR_LEFT, TILE_SAMPR_RIGHT ; FrameLeft1, FrameLeft2
390+  846E 10 14                DB      TILE_SAMPR_WK_LEFT_1, TILE_SAMPR_WK_LEFT_2 ; FrameRight1, FrameRight2
391+  8470 18 1C                DB      TILE_SAMPR_JUMP_LEFT_1, TILE_SAMPR_JUMP_LEFT_2 ; FrameLeftUp1, FrameLeftUp2
392+  8472 20 24                DB      TILE_SAMPR_JUMP_RIGHT_1, TILE_SAMPR_JUMP_RIGHT_2 ; FrameRightUp1, FrameRightUp2
393+  8474 18 1C                DB      TILE_SAMPR_JUMP_LEFT_1, TILE_SAMPR_JUMP_LEFT_2 ; FrameLeftDown1, FrameLeftDown2
394+  8476 20 24                DB      TILE_SAMPR_JUMP_RIGHT_1, TILE_SAMPR_JUMP_RIGHT_2 ; FrameRightDown1, FrameRightDown2
395+  8478 18 1C                DB      TILE_SAMPR_JUMP_LEFT_1, TILE_SAMPR_JUMP_LEFT_2 ; FrameUpLeft1, FrameUpLeft2
396+  847A 20 24                DB      TILE_SAMPR_JUMP_RIGHT_1, TILE_SAMPR_JUMP_RIGHT_2 ; FrameUpRight1, FrameUpRight2
397+  847C 18 1C                DB      TILE_SAMPR_JUMP_LEFT_1, TILE_SAMPR_JUMP_LEFT_2 ; FrameDownLeft1, FrameDownLeft2
398+  847E 20 24                DB      TILE_SAMPR_JUMP_RIGHT_1, TILE_SAMPR_JUMP_RIGHT_2 ; FrameDownRight1, FrameDownRight2
399+  8480 01 1C 01 14          DB      1, 28, 01, 20 ; MinX, MaxX, MinY, MaxY
400+  8484
# file closed: ./inc/GAMESUBS.asm
 14   8484
 15   8484
 16   8484
 17   8484
 18   8484
 19   8484              ;========================================================================
 20   8484              ; START OF PROGRAM
 21   8484              ;========================================================================
 22   8484
 23   8484              StartGame:
 24   8484 CD 68 81             CALL    Screen_LoadTiles        ; Load tiles into RAM
 25   8487 CD BD 82             CALL    GameSubs_ShowMenu       ; Show menu
 26   848A              MainLoop:
 27   848A CD 0A 82         CALL  CheckInput       ; returns direction in A => 0..7 or 255
 28   848D FE FF            CP    255
 29   848F 28 0A            JR    Z, NoDirection   ; if no direction => skip movement
 30   8491
 31   8491                  ; If we get here => A=0..7
 32   8491 21 68 84         LD    HL, SAMPR_TILE_INFO
 33   8494 CD CA 82         CALL  TileMove8Directions
 34   8497                  ; A now has 0 => no boundary problem, or 1..4 => left/right/top/bottom limit
 35   8497                  ; You could handle boundary messages if needed:
 36   8497 FE 00            CP    0
 37   8499 28 00            JR    Z, NoDirection
 38   849B                  ; else A is 1..4 => you can do something like beep or bounce...
 39   849B                  ; for now, do nothing extra:
 40   849B              NoDirection:
 41   849B 18 ED            JR   MainLoop
 42   849D
 43   849D
 44   849D                      SAVESNA "./out/samprwrl.sna", StartGame
 45   849D              END
 46   849D
# file closed: ./src/SAMPRWRL.asm
